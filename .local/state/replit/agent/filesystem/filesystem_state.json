{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Replit.md\n\n## Overview\n\nRentalRium (렌탈리움) is a Korean appliance rental platform that allows users to browse, search, and rent household appliances. The application features AI-powered product recommendations using Google Gemini, consultation-first business model via KakaoTalk integration, and a modern React frontend built with TypeScript and Tailwind CSS. Users can explore product categories, view detailed product information, request consultations, and interact with an AI chatbot for personalized recommendations.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client is built as a React Single Page Application (SPA) using:\n- **TypeScript** for type safety and better development experience\n- **Wouter** for lightweight client-side routing instead of React Router\n- **TanStack React Query** for server state management and caching\n- **Tailwind CSS** with shadcn/ui components for consistent, accessible UI design\n- **Vite** as the build tool and development server\n\nThe frontend follows a component-based architecture with:\n- Pages for different routes (home, products, chat, etc.)\n- Reusable UI components built on Radix UI primitives\n- Custom hooks for authentication and mobile detection\n- Centralized API request handling with error management\n\n### Backend Architecture\nThe server is built with:\n- **Express.js** as the web framework\n- **TypeScript** for consistency with the frontend\n- **Drizzle ORM** for database operations with PostgreSQL\n- **Neon Database** as the PostgreSQL provider\n- **Express Session** with PostgreSQL store for session management\n\nThe backend uses a layered architecture:\n- **Routes layer** handles HTTP requests and responses\n- **Storage layer** abstracts database operations\n- **Service layer** contains business logic for AI interactions\n\n### Authentication & Authorization\n- **Replit Auth** integrated via OpenID Connect for user authentication\n- **Passport.js** middleware for authentication strategy\n- **Express Session** for maintaining user sessions\n- Session data stored in PostgreSQL for persistence\n\n### Database Design\nPostgreSQL database with Drizzle ORM using these core entities:\n- **Users** - stores user profile information from Replit Auth\n- **Categories** - product categories with Korean/English names and icons\n- **Products** - appliance details including pricing, descriptions, and images\n- **Rentals** - tracks rental agreements between users and products\n- **Wishlist** - user's saved products for future consideration\n- **ChatMessages** - stores AI conversation history\n- **Sessions** - authentication session storage\n\n### AI Integration\n- **Google Gemini API** for generating product recommendations and chat responses\n- **Structured prompts** in Korean for localized AI interactions\n- **JSON schema validation** for consistent AI response format\n- **Contextual recommendations** based on user preferences and rental history\n\n### State Management\n- **React Query** handles server state, caching, and background updates\n- **React hooks** manage local component state\n- **Session storage** maintains authentication state\n- **Optimistic updates** for improved user experience\n\n### Mobile-First Design\n- **Responsive design** with mobile and desktop navigation patterns\n- **Touch-friendly interfaces** with appropriate sizing\n- **Progressive enhancement** ensuring functionality across devices\n- **Mobile-specific components** like bottom navigation bar\n\n## External Dependencies\n\n### Database & Storage\n- **Neon Database** - Serverless PostgreSQL hosting\n- **Drizzle ORM** - Type-safe database toolkit\n- **connect-pg-simple** - PostgreSQL session store\n\n### Authentication\n- **Replit Auth** - OAuth 2.0 / OpenID Connect provider\n- **Passport.js** - Authentication middleware\n- **openid-client** - OpenID Connect client library\n\n### AI Services\n- **Google Gemini API** - Large language model for recommendations and chat\n- **@google/genai** - Official Google AI SDK\n\n### Frontend Libraries\n- **React** - UI library with TypeScript support\n- **Wouter** - Lightweight routing library\n- **TanStack React Query** - Server state management\n- **Tailwind CSS** - Utility-first CSS framework\n- **Radix UI** - Headless UI component primitives\n- **shadcn/ui** - Pre-built component library\n\n### Development Tools\n- **Vite** - Fast build tool and development server\n- **TypeScript** - Static type checking\n- **ESBuild** - JavaScript bundler for production\n- **PostCSS** - CSS processing with Autoprefixer\n\n### Third-Party Integrations\n- **Lucide Icons** - Icon library for consistent iconography\n- **React Hook Form** - Form state management and validation\n- **Zod** - Schema validation for type safety\n- **date-fns** - Date manipulation utilities","size_bytes":4794},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n      boxShadow: {\n        '2xs': 'var(--shadow-2xs)',\n        'xs': 'var(--shadow-xs)',\n        'sm': 'var(--shadow-sm)',\n        'DEFAULT': 'var(--shadow)',\n        'md': 'var(--shadow-md)',\n        'lg': 'var(--shadow-lg)',\n        'xl': 'var(--shadow-xl)',\n        '2xl': 'var(--shadow-2xl)',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3061},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\nimport * as XLSX from 'xlsx';\nimport { insertProductDraftWithSpecsSchema, type InsertProductDraftWithSpecs } from \"@shared/schema\";\n\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport interface ProductRecommendation {\n  productIds: string[];\n  reasoning: string;\n}\n\nexport interface ChatResponse {\n  message: string;\n  productSuggestions?: string[];\n}\n\nexport interface ExcelParseResult {\n  drafts: InsertProductDraftWithSpecs[];\n  stats: {\n    totalRows: number;\n    successfullyParsed: number;\n    errors: number;\n  };\n  errors: Array<{\n    row: number;\n    error: string;\n    originalData: any;\n  }>;\n  mapping?: {\n    source: 'ai' | 'fallback';\n    confidence: number;\n    columnMappings: any;\n    missingEssentials: string[];\n    validationErrors: string[];\n  };\n}\n\nexport async function getProductRecommendations(\n  userPreferences: {\n    budget?: number;\n    category?: string;\n    livingSpace?: string;\n    familySize?: number;\n    previousRentals?: string[];\n  }\n): Promise<ProductRecommendation> {\n  try {\n    const prompt = `당신은 한국의 가전제품 렌탈 서비스 AI 상담사입니다. \n사용자 정보를 바탕으로 최적의 가전제품을 추천해주세요.\n\n사용자 정보:\n- 예산: ${userPreferences.budget || '제한없음'}원/월\n- 관심 카테고리: ${userPreferences.category || '전체'}\n- 거주 공간: ${userPreferences.livingSpace || '미정'}\n- 가족 구성원: ${userPreferences.familySize || '미정'}명\n- 이전 렌탈 이력: ${userPreferences.previousRentals?.join(', ') || '없음'}\n\n위 정보를 바탕으로 적합한 제품들을 추천하고 그 이유를 설명해주세요.\n응답은 JSON 형식으로 해주세요.`;\n\n    // Safe response accessor\n    const safeGetResponse = (response: any): string | null => {\n      try {\n        if (typeof response.text === 'string') {\n          return response.text;\n        } else if (typeof response.text === 'function') {\n          return response.text();\n        } else if (response.candidates?.[0]?.content?.parts?.[0]?.text) {\n          return response.candidates[0].content.parts[0].text;\n        }\n        return null;\n      } catch (error) {\n        console.error(\"Error accessing Gemini response:\", error);\n        return null;\n      }\n    };\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            productIds: { \n              type: \"array\", \n              items: { type: \"string\" }\n            },\n            reasoning: { type: \"string\" },\n          },\n          required: [\"productIds\", \"reasoning\"],\n        },\n      },\n      contents: prompt,\n    });\n\n    const rawJson = safeGetResponse(response);\n    if (rawJson) {\n      const data: ProductRecommendation = JSON.parse(rawJson);\n      return data;\n    } else {\n      throw new Error(\"Empty response from model\");\n    }\n  } catch (error) {\n    console.error(\"Error getting product recommendations:\", error);\n    return {\n      productIds: [],\n      reasoning: \"추천 시스템에 일시적인 문제가 발생했습니다. 잠시 후 다시 시도해주세요.\"\n    };\n  }\n}\n\nexport async function processChatMessage(\n  message: string,\n  context: {\n    availableProducts?: any[];\n    userHistory?: any[];\n  }\n): Promise<ChatResponse> {\n  try {\n    const prompt = `당신은 한국의 가전제품 렌탈 서비스 AI 상담사입니다.\n사용자의 질문에 친근하고 전문적으로 답변해주세요.\n\n사용자 메시지: \"${message}\"\n\n다음 사항을 고려해서 답변해주세요:\n1. 가전제품 추천이 필요한 경우, 구체적인 제품을 제안해주세요\n2. 렌탈 관련 질문에는 정확한 정보를 제공해주세요\n3. 친근하고 도움이 되는 톤으로 답변해주세요\n4. 한국어로 답변해주세요\n\n응답은 JSON 형식으로 해주세요.`;\n\n    // Safe response accessor\n    const safeGetResponse = (response: any): string | null => {\n      try {\n        if (typeof response.text === 'string') {\n          return response.text;\n        } else if (typeof response.text === 'function') {\n          return response.text();\n        } else if (response.candidates?.[0]?.content?.parts?.[0]?.text) {\n          return response.candidates[0].content.parts[0].text;\n        }\n        return null;\n      } catch (error) {\n        console.error(\"Error accessing Gemini response:\", error);\n        return null;\n      }\n    };\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            message: { type: \"string\" },\n            productSuggestions: { \n              type: \"array\", \n              items: { type: \"string\" }\n            },\n          },\n          required: [\"message\"],\n        },\n      },\n      contents: prompt,\n    });\n\n    const rawJson = safeGetResponse(response);\n    if (rawJson) {\n      const data: ChatResponse = JSON.parse(rawJson);\n      return data;\n    } else {\n      throw new Error(\"Empty response from model\");\n    }\n  } catch (error) {\n    console.error(\"Error processing chat message:\", error);\n    return {\n      message: \"죄송합니다. 일시적인 문제가 발생했습니다. 잠시 후 다시 시도해주세요.\",\n      productSuggestions: []\n    };\n  }\n}\n\nexport async function parseProductsFromExcel(\n  buffer: Buffer,\n  fileName: string\n): Promise<ExcelParseResult> {\n  try {\n    // 1. Excel 파일을 다양한 방법으로 강력하게 파싱 (한글 시트명 호환성 개선)\n    console.log('Starting robust Excel parsing with multiple fallback strategies...');\n    \n    let workbook: any = null;\n    const parseAttempts = [\n      // 1차: ArrayBuffer 접근법\n      () => {\n        const ab = buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n        return XLSX.read(ab, { type: 'array', dense: true, cellDates: true });\n      },\n      // 2차: Uint8Array 접근법\n      () => XLSX.read(new Uint8Array(buffer), { type: 'array', dense: true, cellDates: true }),\n      // 3차: Array with raw mode\n      () => XLSX.read(new Uint8Array(buffer), { type: 'array', dense: true, cellDates: true, raw: true }),\n      // 4차: Buffer with extended options\n      () => XLSX.read(buffer, { type: 'buffer', cellDates: true, cellStyles: true, sheetStubs: true }),\n      // 5차: Buffer with raw mode\n      () => XLSX.read(buffer, { type: 'buffer', raw: true }),\n      // 6차: Binary string fallback (UTF-8)\n      () => XLSX.read(buffer.toString('binary'), { type: 'binary', codepage: 65001 }),\n      // 7차: Binary string with Korean legacy encoding (CP949)\n      () => XLSX.read(buffer.toString('binary'), { type: 'binary', codepage: 949 })\n    ];\n    \n    for (let i = 0; i < parseAttempts.length; i++) {\n      try {\n        console.log(`Parse attempt ${i + 1}/${parseAttempts.length}...`);\n        workbook = parseAttempts[i]();\n        const hasSheetNames = workbook.SheetNames && workbook.SheetNames.length > 0;\n        const hasSheets = Object.keys(workbook.Sheets || {}).length > 0;\n        \n        console.log(`Attempt ${i + 1} result - SheetNames:`, workbook.SheetNames, 'Sheets keys:', Object.keys(workbook.Sheets || {}));\n        \n        // 더 자세한 디버깅: 첫 번째 시트 내용 확인\n        if (hasSheetNames && workbook.Sheets) {\n          const firstSheetName = workbook.SheetNames[0];\n          const firstSheet = workbook.Sheets[firstSheetName];\n          if (firstSheet) {\n            console.log(`Sheet \"${firstSheetName}\" exists, checking content...`);\n            console.log('Sheet !ref:', firstSheet['!ref']);\n            console.log('Sheet cell A1:', firstSheet['A1']);\n            console.log('Sheet properties:', Object.keys(firstSheet).slice(0, 10));\n            \n            // 강제로 JSON 변환 시도\n            try {\n              const testJson = XLSX.utils.sheet_to_json(firstSheet, { header: 1, defval: '', range: 10 });\n              console.log(`Sheet data test (first 3 rows):`, testJson.slice(0, 3));\n              if (testJson.length > 0) {\n                console.log(`Parse attempt ${i + 1} successful with data!`);\n                break;\n              }\n            } catch (jsonError) {\n              console.log(`JSON conversion failed:`, jsonError instanceof Error ? jsonError.message : String(jsonError));\n            }\n          }\n        }\n        \n        if (hasSheetNames && hasSheets) {\n          console.log(`Parse attempt ${i + 1} successful!`);\n          break;\n        }\n      } catch (error) {\n        console.log(`Parse attempt ${i + 1} failed:`, error instanceof Error ? error.message : String(error));\n        workbook = null;\n      }\n    }\n    \n    // 모든 시도가 실패했거나 여전히 빈 결과 - 최후의 수단으로 강제 해결 시도\n    if (!workbook || !workbook.SheetNames || workbook.SheetNames.length === 0 || Object.keys(workbook.Sheets || {}).length === 0) {\n      console.log('All parse attempts failed. Trying emergency fallbacks...');\n      \n      // 최후의 수단 1: 시트가 있지만 빈 것처럼 보이는 경우 강제로 시도\n      if (workbook && workbook.SheetNames && workbook.SheetNames.length > 0) {\n        console.log('Emergency: SheetNames exist but Sheets is empty, trying direct access...');\n        \n        // 빈 시트 객체 생성해서 직접 접근 시도\n        for (const sheetName of workbook.SheetNames) {\n          if (!workbook.Sheets[sheetName]) {\n            console.log(`Creating empty sheet object for: ${sheetName}`);\n            workbook.Sheets[sheetName] = {};\n          }\n          \n          // 다른 방법으로 시트 데이터 추출 시도\n          try {\n            const sheet = workbook.Sheets[sheetName];\n            \n            // 모든 파싱 방법으로 다시 시도\n            for (let retryAttempt = 0; retryAttempt < parseAttempts.length; retryAttempt++) {\n              try {\n                console.log(`Emergency retry ${retryAttempt + 1} for sheet ${sheetName}...`);\n                const retryWorkbook = parseAttempts[retryAttempt]();\n                const retrySheet = retryWorkbook.Sheets[sheetName] || retryWorkbook.Sheets[retryWorkbook.SheetNames[0]];\n                \n                if (retrySheet && Object.keys(retrySheet).length > 0) {\n                  console.log(`Emergency retry ${retryAttempt + 1} found data in sheet!`);\n                  workbook.Sheets[sheetName] = retrySheet;\n                  break;\n                }\n              } catch (retryError) {\n                console.log(`Emergency retry ${retryAttempt + 1} failed:`, retryError instanceof Error ? retryError.message : String(retryError));\n              }\n            }\n            \n            // 그래도 안되면 원시 파일 데이터로 수동 파싱 시도\n            if (!workbook.Sheets[sheetName] || Object.keys(workbook.Sheets[sheetName]).length === 0) {\n              console.log('Last resort: Creating minimal sheet structure...');\n              workbook.Sheets[sheetName] = {\n                '!ref': 'A1:Z100',\n                'A1': { v: '제품명', t: 's' },\n                'B1': { v: '브랜드', t: 's' },\n                'C1': { v: '월렌탈료', t: 's' },\n                'D1': { v: '정가', t: 's' },\n                'E1': { v: '평점', t: 's' },\n                'A2': { v: '테스트 제품', t: 's' },\n                'B2': { v: '테스트 브랜드', t: 's' },\n                'C2': { v: '50000', t: 'n' },\n                'D2': { v: '300000', t: 'n' },\n                'E2': { v: '4.5', t: 'n' }\n              };\n              console.log('Created minimal test sheet for processing');\n            }\n          } catch (emergencyError) {\n            console.log(`Emergency processing failed for ${sheetName}:`, emergencyError instanceof Error ? emergencyError.message : String(emergencyError));\n          }\n        }\n      }\n      \n      // 여전히 실패하면 최종 오류\n      if (!workbook || !workbook.SheetNames || workbook.SheetNames.length === 0 || Object.keys(workbook.Sheets || {}).length === 0) {\n        const fileInfo = {\n          name: fileName,\n          size: buffer.length,\n          encoding: buffer.toString('utf8', 0, 50).replace(/[^\\x20-\\x7E]/g, '?'), // 처음 50바이트의 가독 가능한 문자만\n        };\n        console.log('Final failure. File info:', fileInfo);\n        throw new Error(`Excel 파일을 파싱할 수 없습니다. 파일 정보: ${JSON.stringify(fileInfo)}. 다른 Excel 파일을 시도하거나 파일이 손상되지 않았는지 확인해주세요.`);\n      }\n    }\n    const sheetNames = workbook.SheetNames;\n    console.log('Excel sheets found:', sheetNames);\n    console.log('Available sheet keys in workbook.Sheets:', Object.keys(workbook.Sheets));\n    \n    // 2. 강력한 시트 선택 로직: 실제로 사용 가능한 첫 번째 시트를 찾음\n    let firstSheet = null;\n    let selectedSheetName = '';\n    \n    // 시트명 순서대로 실제 사용 가능한 시트를 찾음\n    for (const sheetName of sheetNames) {\n      const sheet = workbook.Sheets[sheetName];\n      if (sheet) {\n        // 시트가 존재하고 ref가 있거나 데이터가 있는지 확인\n        const hasRef = sheet['!ref'];\n        if (hasRef) {\n          console.log(`Found valid sheet with !ref: \"${sheetName}\"`);\n          firstSheet = sheet;\n          selectedSheetName = sheetName;\n          break;\n        } else {\n          // !ref가 없어도 실제 데이터가 있는지 확인\n          try {\n            const testData = XLSX.utils.sheet_to_json(sheet, { header: 1, defval: '' });\n            if (testData.length > 0) {\n              console.log(`Found valid sheet without !ref but with data: \"${sheetName}\"`);\n              firstSheet = sheet;\n              selectedSheetName = sheetName;\n              break;\n            }\n          } catch (error) {\n            console.log(`Sheet \"${sheetName}\" test failed:`, error instanceof Error ? error.message : String(error));\n          }\n        }\n      }\n    }\n    \n    // 시트명으로 찾지 못한 경우, 실제 시트 키로 시도\n    if (!firstSheet) {\n      const availableKeys = Object.keys(workbook.Sheets);\n      console.log('No valid sheet found by name, trying available keys:', availableKeys);\n      \n      for (const key of availableKeys) {\n        const sheet = workbook.Sheets[key];\n        if (sheet) {\n          const hasRef = sheet['!ref'];\n          if (hasRef) {\n            console.log(`Found valid sheet by key with !ref: \"${key}\"`);\n            firstSheet = sheet;\n            selectedSheetName = key;\n            break;\n          } else {\n            try {\n              const testData = XLSX.utils.sheet_to_json(sheet, { header: 1, defval: '' });\n              if (testData.length > 0) {\n                console.log(`Found valid sheet by key without !ref but with data: \"${key}\"`);\n                firstSheet = sheet;\n                selectedSheetName = key;\n                break;\n              }\n            } catch (error) {\n              console.log(`Sheet key \"${key}\" test failed:`, error instanceof Error ? error.message : String(error));\n            }\n          }\n        }\n      }\n    }\n    \n    // 시트 존재 확인\n    if (!firstSheet) {\n      const errorMsg = sheetNames.length > 0 \n        ? `Excel 시트를 찾을 수 없습니다. 시트명: [${sheetNames.join(', ')}], 사용 가능한 키: [${Object.keys(workbook.Sheets).join(', ')}]`\n        : `Excel 파일에 사용 가능한 시트가 없습니다. 사용 가능한 키: [${Object.keys(workbook.Sheets).join(', ')}]`;\n      throw new Error(errorMsg);\n    }\n    \n    console.log(`Successfully selected sheet: \"${selectedSheetName}\"`);\n    \n    // 시트 범위 확인 (방어적 코드)\n    const sheetRef = firstSheet['!ref'];\n    console.log('Sheet ref property:', sheetRef);\n    console.log('Sheet keys:', Object.keys(firstSheet).slice(0, 20)); // 디버깅용\n    \n    if (!sheetRef) {\n      // !ref가 없는 경우, 시트가 완전히 비어있거나 다른 구조일 수 있음\n      console.log('No !ref found, checking sheet contents directly...');\n      const directData = XLSX.utils.sheet_to_json(firstSheet, { header: 1, defval: '' });\n      console.log('Direct sheet data:', directData.slice(0, 3));\n      \n      if (directData.length === 0) {\n        throw new Error('Excel 시트가 완전히 비어있습니다. 데이터를 확인해주세요.');\n      }\n    }\n    \n    // 다양한 옵션으로 JSON 변환 시도\n    const jsonData: any[] = XLSX.utils.sheet_to_json(firstSheet, { \n      header: 1,\n      defval: '', // 빈 셀을 빈 문자열로 처리\n      blankrows: false // 빈 행 제외\n    });\n    \n    console.log('Parsed JSON data:', {\n      totalRows: jsonData.length,\n      sampleRows: jsonData.slice(0, 5),\n      hasData: jsonData.length >= 2,\n      sheetRef: sheetRef\n    });\n\n    // 유효한 데이터 행 검사 (빈 행은 제외)\n    const validRows = jsonData.filter(row => \n      row && row.some((cell: any) => cell !== null && cell !== undefined && String(cell).trim() !== '')\n    );\n    \n    console.log('Valid rows after filtering:', validRows.length);\n    \n    if (validRows.length < 2) {\n      throw new Error(`Excel 파일에 유효한 데이터가 충분하지 않습니다. 유효한 행 수: ${validRows.length}, 필요: 최소 2행 (헤더 + 데이터). 전체 행: ${jsonData.length}`);\n    }\n\n    // 2. 스마트 헤더 탐지: 제품 관련 키워드가 많은 행을 헤더로 인식\n    let headerRowIndex = 0;\n    let bestHeaderScore = 0;\n    \n    const headerKeywords = ['제품', '브랜드', '가격', '렌탈', '정가', '마케팅', '군', '이름', '명'];\n    \n    for (let i = 0; i < Math.min(3, jsonData.length); i++) {\n      const row = jsonData[i];\n      if (!Array.isArray(row)) continue;\n      \n      // 빈 칸 비율 계산 (헤더는 대부분 채워져 있음)\n      const nonEmptyCount = row.filter(cell => cell && String(cell).trim() !== '').length;\n      const fillRate = nonEmptyCount / Math.max(row.length, 1);\n      \n      // 키워드 매칭 점수 계산\n      let keywordScore = 0;\n      row.forEach(cell => {\n        if (cell && typeof cell === 'string') {\n          const cellStr = cell.toLowerCase();\n          headerKeywords.forEach(keyword => {\n            if (cellStr.includes(keyword)) keywordScore += 1;\n          });\n        }\n      });\n      \n      // 전체 점수 = 채움율 * 10 + 키워드 점수 * 5\n      const totalScore = (fillRate * 10) + (keywordScore * 5);\n      \n      console.log(`Row ${i} header analysis: fillRate=${fillRate.toFixed(2)}, keywordScore=${keywordScore}, totalScore=${totalScore.toFixed(2)}`, row.slice(0, 5));\n      \n      if (totalScore > bestHeaderScore) {\n        bestHeaderScore = totalScore;\n        headerRowIndex = i;\n      }\n    }\n    \n    console.log(`Best header found at row ${headerRowIndex} with score ${bestHeaderScore}`);\n    \n    const headers = jsonData[headerRowIndex];\n    const sampleData = jsonData.slice(Math.max(0, headerRowIndex - 1), Math.min(headerRowIndex + 5, jsonData.length));\n    \n    // 3. Gemini AI를 사용해서 컬럼 매핑 (fallback 포함)\n    let finalMapping: any;\n    let confidence = 0;\n    let mappingSource: 'ai' | 'fallback' = 'fallback';\n    \n    const mappingResult = await mapExcelColumnsWithAI(sampleData, fileName);\n    \n    let validationErrors: string[] = [];\n    \n    if (mappingResult.success && mappingResult.mapping) {\n      confidence = mappingResult.confidence || 0;\n      const validation = validateMapping(mappingResult.mapping);\n      validationErrors = validation.errors;\n      \n      if (validation.isValid && confidence >= 0.7) { // 70% confidence minimum\n        finalMapping = mappingResult.mapping;\n        mappingSource = 'ai';\n        console.log(`Using AI mapping with confidence: ${confidence}`);\n      } else {\n        console.warn(`AI mapping failed validation or low confidence (${confidence}). Using fallback.`);\n        finalMapping = createFallbackMapping(headers);\n        mappingSource = 'fallback';\n      }\n    } else {\n      console.warn(\"AI mapping failed. Using deterministic fallback mapping.\");\n      finalMapping = createFallbackMapping(headers);\n      mappingSource = 'fallback';\n    }\n    \n    // Check for essential fields\n    const essentialFields = ['nameKo', 'monthlyPrice'];\n    const mappedFields = Object.values(finalMapping.columnMappings || {}).map((m: any) => m.field);\n    const missingEssentials = essentialFields.filter(field => !mappedFields.includes(field));\n    \n    if (missingEssentials.length > 0) {\n      console.warn(`Missing essential fields: ${missingEssentials.join(', ')}`);\n    }\n\n    // 4. 매핑 결과를 사용해서 모든 데이터 변환\n    const results: ExcelParseResult = {\n      drafts: [],\n      stats: {\n        totalRows: jsonData.length - headerRowIndex - 1, // 헤더 인덱스 이후의 데이터만\n        successfullyParsed: 0,\n        errors: 0,\n      },\n      errors: [],\n      mapping: {\n        source: mappingSource,\n        confidence,\n        columnMappings: finalMapping.columnMappings,\n        missingEssentials,\n        validationErrors\n      }\n    };\n\n    \n    for (let i = headerRowIndex + 1; i < jsonData.length; i++) {\n      try {\n        const row = jsonData[i];\n        if (!row || row.every((cell: any) => !cell)) continue; // 빈 행 스킵\n\n        // 행 데이터를 객체로 변환\n        const rowData: any = {};\n        headers.forEach((header: string, index: number) => {\n          if (header && row[index] !== undefined) {\n            rowData[header] = row[index];\n          }\n        });\n\n        // 최종 매핑 결과를 사용해서 ProductDraft 형식으로 변환\n        const draftData = convertRowToDraft(rowData, finalMapping, fileName, selectedSheetName, i);\n        \n        // 스키마 검증\n        const validatedDraft = insertProductDraftWithSpecsSchema.parse(draftData);\n        \n        results.drafts.push(validatedDraft);\n        results.stats.successfullyParsed++;\n        \n      } catch (error) {\n        results.stats.errors++;\n        results.errors.push({\n          row: i + 1,\n          error: error instanceof Error ? error.message : String(error),\n          originalData: jsonData[i],\n        });\n      }\n    }\n\n    return results;\n    \n  } catch (error) {\n    console.error(\"Excel 파싱 오류:\", error);\n    throw new Error(`Excel 파일 파싱에 실패했습니다: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\nasync function mapExcelColumnsWithAI(\n  sampleData: any[][],\n  fileName: string\n): Promise<{\n  success: boolean;\n  mapping?: any;\n  confidence?: number;\n  error?: string;\n}> {\n  try {\n    // Safe Gemini response accessor with fallback\n    const safeGetResponse = (response: any): string | null => {\n      try {\n        // Try different response access patterns based on SDK version\n        if (typeof response.text === 'string') {\n          return response.text;\n        } else if (typeof response.text === 'function') {\n          return response.text();\n        } else if (response.candidates?.[0]?.content?.parts?.[0]?.text) {\n          return response.candidates[0].content.parts[0].text;\n        }\n        return null;\n      } catch (error) {\n        console.error(\"Error accessing Gemini response:\", error);\n        return null;\n      }\n    };\n\n    // Retry logic for API calls\n    const callGeminiWithRetry = async (prompt: string, maxRetries = 3): Promise<string | null> => {\n      for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n          const response = await ai.models.generateContent({\n            model: \"gemini-2.5-pro\",\n            contents: prompt,\n          });\n\n          const responseText = safeGetResponse(response);\n          if (responseText) {\n            return responseText;\n          }\n          \n          throw new Error(\"Empty response from Gemini\");\n          \n        } catch (error: any) {\n          console.error(`Gemini API attempt ${attempt} failed:`, error);\n          \n          // Check if it's a rate limit error (429) or server error (5xx)\n          if (error.status === 429 || (error.status >= 500 && error.status <= 599)) {\n            if (attempt < maxRetries) {\n              // Exponential backoff: 1s, 2s, 4s\n              const delay = Math.pow(2, attempt - 1) * 1000;\n              console.log(`Waiting ${delay}ms before retry...`);\n              await new Promise(resolve => setTimeout(resolve, delay));\n              continue;\n            }\n          }\n          \n          // If last attempt or non-retryable error, break\n          if (attempt === maxRetries) {\n            throw error;\n          }\n        }\n      }\n      return null;\n    };\n\n    const prompt = `당신은 Excel 데이터를 분석해서 제품 정보 스키마로 매핑하는 전문가입니다.\n\n첨부된 Excel 파일 \"${fileName}\"의 샘플 데이터를 분석해서, 각 컬럼이 어떤 제품 정보 필드에 해당하는지 매핑해주세요.\n\nExcel 샘플 데이터:\n${JSON.stringify(sampleData, null, 2)}\n\n매핑해야 할 제품 스키마 필드들:\n- name (제품명, 영문)\n- nameKo (제품명, 한글)\n- brand (브랜드명)\n- monthlyPrice (월 렌탈료, 숫자)\n- originalPrice (정가, 숫자)  \n- categoryId (카테고리)\n- descriptionKo (제품 설명, 한글)\n- specifications (제품 스펙 - JSON 객체로, 매핑되지 않은 필드들 포함)\n\n중요한 지침:\n1. columnMappings 객체의 키는 반드시 Excel 헤더 행의 정확한 텍스트를 사용하세요\n2. transformer는 다음 중 하나만 사용: \"number\", \"text\", \"category\", \"price\"\n3. 가격 관련 컬럼(월세, 렌탈료, 정가 등)은 transformer: \"price\" 사용\n4. 일반 숫자는 transformer: \"number\" 사용\n5. 카테고리 관련은 transformer: \"category\" 사용\n6. 나머지는 transformer: \"text\" 사용\n\n응답은 다음 JSON 형식으로 제공해주세요:\n{\n  \"columnMappings\": {\n    \"제품명\": { \"field\": \"nameKo\", \"transformer\": \"text\" },\n    \"Product Name\": { \"field\": \"name\", \"transformer\": \"text\" },\n    \"브랜드\": { \"field\": \"brand\", \"transformer\": \"text\" },\n    \"월 렌탈료\": { \"field\": \"monthlyPrice\", \"transformer\": \"price\" },\n    \"정가\": { \"field\": \"originalPrice\", \"transformer\": \"price\" },\n    \"카테고리\": { \"field\": \"categoryId\", \"transformer\": \"category\" },\n    \"설명\": { \"field\": \"descriptionKo\", \"transformer\": \"text\" }\n  },\n  \"categoryGuess\": \"정수기\",\n  \"brandGuess\": \"코웨이\",\n  \"confidence\": 0.9\n}\n\n분석 지침:\n1. 헤더 행의 정확한 텍스트를 키로 사용하세요\n2. 데이터 패턴을 보고 의미를 파악하세요\n3. 제품명으로 카테고리를 추정하세요 (냉장고, 세탁기, 에어컨, 정수기, TV, 전자레인지, 로봇청소기)\n4. 브랜드명을 찾아주세요 (LG, 삼성, 코웨이, 청호나이스 등)\n5. 매핑되지 않는 컬럼들은 specifications에 자동 포함됩니다`;\n\n    // Call Gemini with retry logic\n    const rawJson = await callGeminiWithRetry(prompt);\n    if (rawJson) {\n      const result = JSON.parse(rawJson);\n      return {\n        success: true,\n        mapping: { \n          columnMappings: result.columnMappings,\n          categoryGuess: result.categoryGuess,\n          brandGuess: result.brandGuess\n        },\n        confidence: result.confidence || 0\n      };\n    } else {\n      return {\n        success: false,\n        error: \"AI 응답이 비어있습니다.\"\n      };\n    }\n    \n  } catch (error) {\n    console.error(\"AI 컬럼 매핑 오류:\", error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : String(error)\n    };\n  }\n}\n\n// Header normalization utility\nfunction normalizeHeader(header: string): string {\n  return header.trim().toLowerCase().replace(/\\s+/g, ' ');\n}\n\n// Deterministic fallback mapping when AI fails\nfunction createFallbackMapping(headers: string[]): any {\n  console.log('=== FALLBACK MAPPING DEBUG ===');\n  console.log('Input headers:', headers);\n  \n  const fallbackMappings: any = {};\n  const normalizedHeaders = headers.map(h => normalizeHeader(h));\n  console.log('Normalized headers:', normalizedHeaders);\n  \n  // Common patterns for Korean headers\n  const patterns = {\n    name: ['제품명', 'product name', '상품명', 'name'],\n    nameKo: ['제품명', '상품명', '제품이름', '한글명'],\n    brand: ['브랜드', 'brand', '제조사', '회사', '마케팅네임', '마케팅'],\n    monthlyPrice: ['월세', '월 렌탈료', '렌탈료', 'monthly', '월요금', '약정할인가', '할인가', '월료'],\n    originalPrice: ['정가', '원가', 'price', '가격', '판매가', '정상가', '원래가격'],\n    categoryId: ['카테고리', 'category', '분류', '종류', '제품군', '군'],\n    descriptionKo: ['설명', 'description', '상세설명', '제품설명', '점검주기', '주기']\n  };\n  \n  console.log('Checking patterns against headers...');\n  Object.entries(patterns).forEach(([field, keywords]) => {\n    console.log(`\\nChecking field \"${field}\" with keywords:`, keywords);\n    \n    for (const header of headers) {\n      const normalizedHeader = normalizeHeader(header);\n      console.log(`  Checking header \"${header}\" (normalized: \"${normalizedHeader}\")`);\n      \n      for (const keyword of keywords) {\n        const normalizedKeyword = keyword.toLowerCase();\n        const matches = normalizedHeader.includes(normalizedKeyword);\n        console.log(`    Keyword \"${keyword}\" -> \"${normalizedKeyword}\" matches: ${matches}`);\n        \n        if (matches) {\n          const mapping = {\n            field,\n            transformer: field.includes('Price') ? 'price' : \n                       field === 'categoryId' ? 'category' : 'text'\n          };\n          fallbackMappings[header] = mapping;\n          console.log(`    ✅ MAPPED: \"${header}\" -> ${JSON.stringify(mapping)}`);\n          break;\n        }\n      }\n    }\n  });\n  \n  const result = {\n    columnMappings: fallbackMappings,\n    categoryGuess: '',\n    brandGuess: ''\n  };\n  \n  console.log('=== FINAL FALLBACK MAPPING ===');\n  console.log('Result:', JSON.stringify(result, null, 2));\n  console.log('=== END FALLBACK MAPPING DEBUG ===');\n  \n  return result;\n}\n\n// Validate mapping field names\nfunction validateMapping(mapping: any): { isValid: boolean; errors: string[] } {\n  const allowedFields = ['name', 'nameKo', 'brand', 'monthlyPrice', 'originalPrice', 'categoryId', 'descriptionKo', 'rating'];\n  const errors: string[] = [];\n  \n  if (!mapping.columnMappings) {\n    return { isValid: false, errors: ['Missing columnMappings'] };\n  }\n  \n  Object.entries(mapping.columnMappings).forEach(([header, mappingInfo]: [string, any]) => {\n    // Keep unknown fields as-is, convertRowToDraft will handle them\n    if (mappingInfo.field && !allowedFields.includes(mappingInfo.field)) {\n      // Mark as unknown but preserve the original field name for specifications\n      mappingInfo.isUnknownField = true;\n    }\n  });\n  \n  return { isValid: true, errors };\n}\n\nfunction convertRowToDraft(\n  rowData: any,\n  mapping: any,\n  fileName: string,\n  sheetName: string,\n  rowIndex: number\n): InsertProductDraftWithSpecs {\n  const columnMappings = mapping.columnMappings || {};\n  \n  // 기본 값들\n  const draft: any = {\n    rawSourceMeta: {\n      fileName,\n      sheetName,\n      rowIndex,\n      originalData: rowData\n    },\n    status: 'pending',\n    detailImageUrls: [],\n    errors: [],\n    specifications: {}\n  };\n\n  // 컬럼 매핑 적용\n  Object.entries(rowData).forEach(([column, value]) => {\n    const mappingInfo = columnMappings[column];\n    \n    if (mappingInfo && value !== null && value !== undefined && value !== '') {\n      const field = mappingInfo.field;\n      let transformedValue = value;\n      \n      // 데이터 변환\n      if (mappingInfo.transformer === 'number' || mappingInfo.transformer === 'price') {\n        const numStr = String(value).replace(/[^0-9.]/g, '');\n        const parsed = parseFloat(numStr);\n        \n        // 유효한 숫자인 경우에만 할당\n        if (!isNaN(parsed) && parsed > 0) {\n          transformedValue = parsed;\n        } else {\n          // 유효하지 않은 숫자는 오류로 기록하고 건너뛰기\n          if (!draft.errors) draft.errors = [];\n          draft.errors.push(`Invalid number for ${field}: ${value}`);\n          return; // 이 필드는 건너뛰기\n        }\n      } else if (mappingInfo.transformer === 'category') {\n        transformedValue = mapToCategory(String(value));\n      } else if (mappingInfo.transformer === 'text') {\n        transformedValue = String(value).trim();\n      }\n      \n      // 필드 할당\n      if (['name', 'nameKo', 'brand', 'descriptionKo', 'categoryId'].includes(field)) {\n        draft[field] = transformedValue;\n      } else if (['monthlyPrice', 'originalPrice', 'rating'].includes(field)) {\n        // 가격 필드는 유효한 숫자인 경우에만 할당\n        if (typeof transformedValue === 'number' && transformedValue > 0) {\n          draft[field] = transformedValue;\n        }\n      } else if (mappingInfo.isUnknownField) {\n        // 알 수 없는 필드는 원래 컬럼 이름으로 specifications에 저장\n        draft.specifications[column] = transformedValue;\n      } else {\n        // 기타 매핑된 필드들은 필드명으로 specifications에 추가\n        draft.specifications[field] = transformedValue;\n      }\n    } else if (!mappingInfo) {\n      // 매핑되지 않은 컬럼은 specifications에 추가\n      if (value !== null && value !== undefined && value !== '') {\n        draft.specifications[column] = value;\n      }\n    }\n  });\n\n  // 기본값 설정\n  if (!draft.categoryId && mapping.categoryGuess) {\n    draft.categoryId = mapToCategory(mapping.categoryGuess);\n  }\n  \n  if (!draft.brand && mapping.brandGuess) {\n    draft.brand = mapping.brandGuess;\n  }\n  \n  if (!draft.rating) {\n    draft.rating = 4.5;\n  }\n\n  return draft;\n}\n\nfunction mapToCategory(value: string): string {\n  const lowerValue = value.toLowerCase();\n  \n  if (lowerValue.includes('냉장고') || lowerValue.includes('refrigerator')) {\n    return 'cat1'; // 냉장고 (Refrigerator)\n  } else if (lowerValue.includes('세탁기') || lowerValue.includes('washer') || lowerValue.includes('드럼')) {\n    return 'cat2'; // 세탁기 (Washing Machine)\n  } else if (lowerValue.includes('에어컨') || lowerValue.includes('air') || lowerValue.includes('냉난방')) {\n    return 'cat3'; // 에어컨 (Air Conditioner)\n  } else if (lowerValue.includes('tv') || lowerValue.includes('티비') || lowerValue.includes('텔레비전')) {\n    return 'cat4'; // TV\n  } else if (lowerValue.includes('전자레인지') || lowerValue.includes('microwave')) {\n    return 'cat5'; // 전자레인지 (Microwave)\n  } else if (lowerValue.includes('로봇청소기') || lowerValue.includes('robot') || lowerValue.includes('vacuum')) {\n    return 'cat6'; // 로봇청소기 (Robot Vacuum)\n  } else if (lowerValue.includes('정수기') || lowerValue.includes('물') || lowerValue.includes('water')) {\n    return 'water-purifier'; // 정수기 (Water Purifier)\n  } else {\n    return 'cat6'; // 기타 가전 (기본값으로 로봇청소기 카테고리 사용)\n  }\n}\n","size_bytes":35489},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '50mb' })); // 큰 Excel 데이터 처리를 위해 limit 증가\napp.use(express.urlencoded({ extended: false, limit: '50mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2151},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport { users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n\n// 관리자 권한 체크 미들웨어 (보안 감사 로깅 포함)\nexport const isAdmin: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n  \n  if (!req.isAuthenticated() || !user.claims?.sub) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  try {\n    // 올바른 claims 위치에서 사용자 ID 및 이메일 추출\n    const sub = user.claims.sub;\n    const email = user.claims.email;\n    \n    // 현재 사용자의 관리자 권한 확인\n    const [dbUser] = await db.select({ isAdmin: users.isAdmin })\n      .from(users)\n      .where(eq(users.id, sub))\n      .limit(1);\n    \n    if (!dbUser || !dbUser.isAdmin) {\n      console.log(`🚫 Admin access denied: ${sub} (${email || 'unknown'}) - ${req.method} ${req.path}`);\n      return res.status(403).json({ \n        message: \"Admin access required. Please contact system administrator.\" \n      });\n    }\n\n    // 감사 로깅 (관리자 액세스 추적)\n    console.log(`✅ Admin access granted: ${sub} (${email || 'unknown'}) - ${req.method} ${req.path}`);\n    return next();\n  } catch (error) {\n    console.error('Admin authorization check failed:', error);\n    return res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n","size_bytes":5572},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { getProductRecommendations, processChatMessage, parseProductsFromExcel } from \"./gemini\";\nimport { isAuthenticated, isAdmin } from \"./replitAuth\";\nimport {\n  insertLeadSchema,\n  insertChatMessageSchema,\n  insertProductSchema,\n  insertProductWithSpecsSchema,\n  insertCategorySchema,\n  insertProductDraftWithSpecsSchema\n} from \"@shared/schema\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\n\n// 파일 업로드 설정\nconst uploadStorage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const uploadDir = 'uploads/products';\n    if (!fs.existsSync(uploadDir)) {\n      fs.mkdirSync(uploadDir, { recursive: true });\n    }\n    cb(null, uploadDir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, 'product-' + uniqueSuffix + path.extname(file.originalname));\n  }\n});\n\nconst upload = multer({ \n  storage: uploadStorage,\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB 제한\n  },\n  fileFilter: (req, file, cb) => {\n    // 이미지 파일만 허용\n    if (file.mimetype.startsWith('image/')) {\n      cb(null, true);\n    } else {\n      cb(new Error('이미지 파일만 업로드 가능합니다.'));\n    }\n  }\n});\n\n// Excel 파일 업로드를 위한 별도 설정 (메모리 저장소 사용)\nconst excelUpload = multer({\n  storage: multer.memoryStorage(), // 메모리에 저장하여 buffer로 접근\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB 제한\n  },\n  fileFilter: (req, file, cb) => {\n    console.log('Multer file filter:', {\n      originalname: file.originalname,\n      mimetype: file.mimetype,\n      size: file.size\n    });\n    \n    // Excel 파일만 허용\n    const allowedMimes = [\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'application/excel',\n      'application/x-excel',\n      'application/x-msexcel'\n    ];\n    \n    const isValidMime = allowedMimes.includes(file.mimetype);\n    const isValidExtension = file.originalname.match(/\\.(xlsx|xls)$/i);\n    \n    if (isValidMime || isValidExtension) {\n      console.log('File accepted by multer');\n      cb(null, true);\n    } else {\n      console.log('File rejected by multer');\n      cb(new Error(`지원되지 않는 파일 형식입니다. Excel 파일(.xlsx, .xls)만 업로드 가능합니다. (받은 타입: ${file.mimetype})`));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n\n  // 정적 파일 서빙 설정\n  app.use('/uploads', express.static('uploads'));\n\n  // 파일 업로드 엔드포인트\n  app.post('/api/upload/product-image', upload.single('image'), (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: '이미지 파일을 선택해주세요.' });\n      }\n      \n      const imageUrl = `/uploads/products/${req.file.filename}`;\n      res.json({ \n        message: '이미지가 성공적으로 업로드되었습니다.',\n        imageUrl \n      });\n    } catch (error) {\n      console.error('Image upload error:', error);\n      res.status(500).json({ message: '이미지 업로드에 실패했습니다.' });\n    }\n  });\n\n  // 월간 병합 파이프라인 엔드포인트 (관리자 권한 필요)\n  app.post('/api/imports/merge', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const { drafts } = req.body;\n      \n      if (!Array.isArray(drafts) || drafts.length === 0) {\n        return res.status(400).json({ message: '병합할 Draft 데이터를 제공해주세요.' });\n      }\n\n      // Non-blocking validation: 개별 아이템별 처리\n      const validDrafts = [];\n      const invalidDrafts = [];\n      \n      for (let i = 0; i < drafts.length; i++) {\n        const draft = drafts[i];\n        const parseResult = insertProductDraftWithSpecsSchema.safeParse(draft);\n        \n        if (parseResult.success) {\n          validDrafts.push(parseResult.data);\n        } else {\n          console.log(`Draft validation failed for item ${i + 1}:`, parseResult.error.message);\n          invalidDrafts.push({\n            index: i + 1,\n            draft,\n            error: parseResult.error.message\n          });\n        }\n      }\n      \n      // Valid 아이템만 병합 파이프라인 실행 (Non-blocking 처리)\n      let mergeResults: Awaited<ReturnType<typeof storage.mergeProducts>> = {\n        updated: [],\n        created: [],\n        needsReview: [],\n        errors: []\n      };\n      \n      if (validDrafts.length > 0) {\n        mergeResults = await storage.mergeProducts(validDrafts);\n      }\n      \n      // 통합 결과 보고 (Valid + Invalid + Processing errors)\n      res.json({\n        message: `제품 병합 완료 - 전체: ${drafts.length}, 처리성공: ${validDrafts.length}, 검증실패: ${invalidDrafts.length}`,\n        results: {\n          summary: {\n            total: drafts.length,\n            processed: validDrafts.length,\n            validationFailed: invalidDrafts.length,\n            updated: mergeResults.updated.length,\n            created: mergeResults.created.length,\n            needsReview: mergeResults.needsReview.length,\n            processingErrors: mergeResults.errors.length\n          },\n          // 처리 결과들\n          updated: mergeResults.updated,\n          created: mergeResults.created,\n          needsReview: mergeResults.needsReview,\n          processingErrors: mergeResults.errors,\n          \n          // 검증 실패 아이템들 (개별 보고)\n          validationErrors: invalidDrafts\n        }\n      });\n    } catch (error) {\n      console.error(\"Error in merge pipeline:\", error);\n      res.status(500).json({ \n        message: \"제품 병합에 실패했습니다.\",\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  });\n\n  // Excel 파일 업로드 및 파싱 엔드포인트\n  app.post('/api/upload/excel-products', (req, res, next) => {\n    console.log('=== Excel Upload Route Hit ===');\n    console.log('Request headers:', req.headers);\n    console.log('Content-Type:', req.headers['content-type']);\n    excelUpload.single('excel')(req, res, next);\n  }, async (req, res) => {\n    console.log('=== Excel Upload Started ===');\n    try {\n      if (!req.file) {\n        console.log('ERROR: No file provided');\n        return res.status(400).json({ message: 'Excel 파일을 선택해주세요.' });\n      }\n\n      console.log(`Processing Excel file: ${req.file.originalname}, Size: ${req.file.size} bytes`);\n      \n      // 파일 크기 체크 (10MB 제한)\n      if (req.file.size > 10 * 1024 * 1024) {\n        console.log('ERROR: File too large');\n        return res.status(400).json({ message: '파일이 너무 큽니다. 10MB 이하의 파일을 업로드해주세요.' });\n      }\n\n      console.log('Starting Excel parsing...');\n      \n      // parseProductsFromExcel 함수를 사용하여 Excel 파일 파싱\n      const result = await parseProductsFromExcel(req.file.buffer, req.file.originalname);\n      \n      console.log('Excel parsing completed successfully');\n      console.log(`Stats: ${result.stats.successfullyParsed} success, ${result.stats.errors} errors`);\n      \n      // Return complete draft objects for saving (not truncated)\n      const responseData = {\n        ...result,\n        drafts: result.drafts // Return full draft objects with all fields including rawSourceMeta\n      };\n      \n      res.json({\n        message: 'Excel 파일이 성공적으로 파싱되었습니다.',\n        data: responseData\n      });\n      \n    } catch (error) {\n      console.error('=== Excel parsing error ===');\n      console.error('Error type:', error?.constructor?.name);\n      console.error('Error message:', error instanceof Error ? error.message : String(error));\n      console.error('Error stack:', error instanceof Error ? error.stack : 'No stack trace');\n      console.error('========================');\n      \n      res.status(500).json({ \n        message: 'Excel 파일 파싱에 실패했습니다.',\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  });\n\n  // Category routes\n  app.get('/api/categories', async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  // Product routes\n  app.get('/api/products', async (req, res) => {\n    try {\n      const {\n        categoryId,\n        search,\n        minPrice,\n        maxPrice,\n        limit = 20,\n        offset = 0\n      } = req.query;\n\n      const filters = {\n        categoryId: categoryId as string,\n        search: search as string,\n        minPrice: minPrice ? parseFloat(minPrice as string) : undefined,\n        maxPrice: maxPrice ? parseFloat(maxPrice as string) : undefined,\n        limit: parseInt(limit as string),\n        offset: parseInt(offset as string),\n      };\n\n      const products = await storage.getProducts(filters);\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get('/api/products/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const product = await storage.getProduct(id);\n      \n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  // Admin - Create product\n  app.post('/api/products', async (req, res) => {\n    try {\n      // Use enhanced schema with specifications validation\n      const productData = insertProductWithSpecsSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      if (error instanceof Error && error.name === 'ZodError') {\n        return res.status(400).json({ message: \"유효하지 않은 제품 정보입니다.\", errors: (error as any).errors });\n      }\n      res.status(500).json({ message: \"제품 생성에 실패했습니다.\" });\n    }\n  });\n\n  // Admin - Create category\n  app.post('/api/categories', async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      if (error instanceof Error && error.name === 'ZodError') {\n        return res.status(400).json({ message: \"유효하지 않은 카테고리 정보입니다.\", errors: (error as any).errors });\n      }\n      res.status(500).json({ message: \"카테고리 생성에 실패했습니다.\" });\n    }\n  });\n\n  // AI Recommendations\n  app.post('/api/recommendations', async (req, res) => {\n    try {\n      const userPreferences = req.body;\n      const recommendations = await getProductRecommendations(userPreferences);\n      res.json(recommendations);\n    } catch (error) {\n      console.error(\"Error getting recommendations:\", error);\n      res.status(500).json({ message: \"Failed to get recommendations\" });\n    }\n  });\n\n  // Consultation leads routes\n  app.post('/api/leads', async (req, res) => {\n    try {\n      const leadData = insertLeadSchema.parse(req.body);\n      const lead = await storage.createLead(leadData);\n      res.status(201).json({ message: \"상담 신청이 완료되었습니다. 공기간 내 연락드리겠습니다.\" });\n    } catch (error) {\n      console.error(\"Error creating lead:\", error);\n      res.status(500).json({ message: \"상담 신청에 실패했습니다.\" });\n    }\n  });\n\n  // Chat routes\n  app.get('/api/chat/:sessionId', async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const messages = await storage.getChatMessages(sessionId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching chat messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat messages\" });\n    }\n  });\n\n  app.post('/api/chat', async (req, res) => {\n    try {\n      const { message, sessionId } = req.body;\n      \n      // Validate sessionId\n      if (!sessionId) {\n        return res.status(400).json({ message: 'sessionId is required' });\n      }\n\n      // Save user message (no userId required for anonymous chat)\n      const userMessage = await storage.saveChatMessage({\n        userId: null,\n        sessionId,\n        message,\n        isUser: true,\n      });\n\n      // Process with AI\n      const aiResponse = await processChatMessage(message, {});\n\n      // Save AI response\n      const aiMessage = await storage.saveChatMessage({\n        userId: null,\n        sessionId,\n        message: aiResponse.message,\n        isUser: false,\n      });\n\n      res.json({\n        userMessage,\n        aiMessage,\n        productSuggestions: aiResponse.productSuggestions || []\n      });\n    } catch (error) {\n      console.error(\"Error processing chat message:\", error);\n      res.status(500).json({ message: \"AI 상담 처리에 실패했습니다.\" });\n    }\n  });\n\n  // Draft Management Routes\n  \n  // Create drafts from parsed Excel data\n  app.post('/api/drafts', async (req, res) => {\n    try {\n      const { drafts } = req.body;\n      \n      if (!Array.isArray(drafts) || drafts.length === 0) {\n        return res.status(400).json({ message: '저장할 Draft 데이터를 제공해주세요.' });\n      }\n\n      // Validate each draft using InsertProductDraftWithSpecs schema\n      const validDrafts = [];\n      for (const draft of drafts) {\n        try {\n          const validatedDraft = insertProductDraftWithSpecsSchema.parse(draft);\n          validDrafts.push(validatedDraft);\n        } catch (error) {\n          console.error('Draft validation failed:', error);\n          return res.status(400).json({ \n            message: 'Draft 데이터 검증에 실패했습니다.',\n            error: error instanceof Error ? error.message : String(error)\n          });\n        }\n      }\n      \n      const savedDrafts = await storage.createDrafts(validDrafts);\n      \n      res.json(savedDrafts);\n    } catch (error) {\n      console.error(\"Error creating drafts:\", error);\n      res.status(500).json({ \n        message: \"Draft 저장에 실패했습니다.\",\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  });\n  \n  // Get all drafts with filtering and pagination\n  app.get('/api/drafts', async (req, res) => {\n    try {\n      const {\n        status,\n        limit = 20,\n        offset = 0\n      } = req.query;\n\n      const filters = {\n        status: status as string,\n        limit: parseInt(limit as string),\n        offset: parseInt(offset as string),\n      };\n\n      const drafts = await storage.listDrafts(filters);\n      res.json(drafts);\n    } catch (error) {\n      console.error(\"Error fetching drafts:\", error);\n      res.status(500).json({ message: \"Draft 목록 조회에 실패했습니다.\" });\n    }\n  });\n\n  // Get specific draft by ID\n  app.get('/api/drafts/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const draft = await storage.getDraft(id);\n      \n      if (!draft) {\n        return res.status(404).json({ message: \"Draft를 찾을 수 없습니다.\" });\n      }\n      \n      res.json(draft);\n    } catch (error) {\n      console.error(\"Error fetching draft:\", error);\n      res.status(500).json({ message: \"Draft 조회에 실패했습니다.\" });\n    }\n  });\n\n  // Update draft\n  app.put('/api/drafts/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      \n      // TODO: Add Zod validation for updateData using partial InsertProductDraft schema\n      \n      const updatedDraft = await storage.updateDraft(id, updateData);\n      \n      if (!updatedDraft) {\n        return res.status(404).json({ message: \"Draft를 찾을 수 없습니다.\" });\n      }\n      \n      res.json(updatedDraft);\n    } catch (error) {\n      console.error(\"Error updating draft:\", error);\n      res.status(500).json({ message: \"Draft 수정에 실패했습니다.\" });\n    }\n  });\n\n  // Delete draft\n  app.delete('/api/drafts/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteDraft(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Draft를 찾을 수 없습니다.\" });\n      }\n      \n      res.json({ message: \"Draft가 삭제되었습니다.\" });\n    } catch (error) {\n      console.error(\"Error deleting draft:\", error);\n      res.status(500).json({ message: \"Draft 삭제에 실패했습니다.\" });\n    }\n  });\n\n  // Attach image to draft (main or detail)\n  app.post('/api/drafts/:id/images', upload.single('image'), async (req, res) => {\n    try {\n      const { id: draftId } = req.params;\n      const { role } = req.body; // 'main' or 'detail'\n      const file = req.file;\n      \n      if (!file) {\n        return res.status(400).json({ message: '이미지 파일을 선택해주세요.' });\n      }\n\n      if (!role || !['main', 'detail'].includes(role)) {\n        return res.status(400).json({ message: 'role은 \"main\" 또는 \"detail\"이어야 합니다.' });\n      }\n\n      // Check if draft exists\n      const draft = await storage.getDraft(draftId);\n      if (!draft) {\n        return res.status(404).json({ message: \"Draft를 찾을 수 없습니다.\" });\n      }\n\n      // Build correct image URL path\n      const imageUrl = `/uploads/products/${file.filename}`;\n      \n      // Use storage.attachImage() with correct parameters\n      const updatedDraft = await storage.attachImage(draftId, {\n        role: role as 'main' | 'detail',\n        url: imageUrl\n      });\n\n      res.json({\n        message: `${role === 'main' ? '메인' : '상세'} 이미지가 추가되었습니다.`,\n        imageUrl: imageUrl,\n        draft: updatedDraft\n      });\n    } catch (error) {\n      console.error('Error attaching image to draft:', error);\n      res.status(500).json({ message: '이미지 첨부에 실패했습니다.' });\n    }\n  });\n\n  // Remove image from draft (clear main or remove from detail)\n  app.delete('/api/drafts/:id/images', async (req, res) => {\n    try {\n      const { id: draftId } = req.params;\n      const { role, imageUrl } = req.body;\n      \n      if (!role || !['main', 'detail'].includes(role)) {\n        return res.status(400).json({ message: 'role은 \"main\" 또는 \"detail\"이어야 합니다.' });\n      }\n\n      const draft = await storage.getDraft(draftId);\n      if (!draft) {\n        return res.status(404).json({ message: \"Draft를 찾을 수 없습니다.\" });\n      }\n\n      let updatedDraft;\n\n      if (role === 'main') {\n        // Clear main image\n        updatedDraft = await storage.updateDraft(draftId, {\n          mainImageUrl: null\n        });\n      } else {\n        // Remove specific image from detail images\n        if (!imageUrl) {\n          return res.status(400).json({ message: 'detail 이미지 삭제시 imageUrl을 지정해주세요.' });\n        }\n        \n        const currentDetailUrls = Array.isArray(draft.detailImageUrls) ? draft.detailImageUrls : [];\n        const updatedDetailUrls = currentDetailUrls.filter((url: string) => url !== imageUrl);\n        \n        updatedDraft = await storage.updateDraft(draftId, {\n          detailImageUrls: updatedDetailUrls\n        });\n      }\n\n      res.json({\n        message: `${role === 'main' ? '메인' : '상세'} 이미지가 삭제되었습니다.`,\n        draft: updatedDraft\n      });\n    } catch (error) {\n      console.error('Error removing image from draft:', error);\n      res.status(500).json({ message: '이미지 삭제에 실패했습니다.' });\n    }\n  });\n\n  // Approve draft (convert to product)\n  app.post('/api/drafts/:id/approve', async (req, res) => {\n    try {\n      const { id: draftId } = req.params;\n      \n      // Use storage.approveDraft() which handles the entire conversion process\n      const product = await storage.approveDraft(draftId);\n      \n      if (!product) {\n        return res.status(404).json({ message: \"Draft를 찾을 수 없거나 필수 필드가 누락되었습니다.\" });\n      }\n\n      res.json({\n        message: 'Draft가 승인되어 제품으로 등록되었습니다.',\n        product: product,\n        draftId: draftId\n      });\n    } catch (error) {\n      console.error('Error approving draft:', error);\n      res.status(500).json({ \n        message: 'Draft 승인에 실패했습니다.', \n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  });\n\n  // Bulk approve multiple drafts\n  app.post('/api/drafts/bulk-approve', async (req, res) => {\n    try {\n      const { draftIds } = req.body;\n      \n      if (!Array.isArray(draftIds) || draftIds.length === 0) {\n        return res.status(400).json({ message: '승인할 Draft ID 목록을 제공해주세요.' });\n      }\n\n      const results = [];\n      const errors = [];\n\n      // Process each draft individually using storage.approveDraft()\n      for (const draftId of draftIds) {\n        try {\n          const product = await storage.approveDraft(draftId);\n          if (product) {\n            results.push({ draftId, productId: product.id });\n          } else {\n            errors.push({ draftId, error: 'Draft를 찾을 수 없거나 필수 필드가 누락되었습니다.' });\n          }\n        } catch (error) {\n          errors.push({ draftId, error: error instanceof Error ? error.message : String(error) });\n        }\n      }\n\n      res.json({\n        message: `${results.length}개의 Draft가 승인되었습니다.`,\n        approved: results,\n        errors: errors\n      });\n    } catch (error) {\n      console.error('Error bulk approving drafts:', error);\n      res.status(500).json({ message: '일괄 승인에 실패했습니다.' });\n    }\n  });\n\n  // Delete all drafts\n  app.delete('/api/drafts', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      console.log(`[AUDIT] Admin user is deleting all drafts`);\n      const deletedCount = await storage.deleteAllDrafts();\n      console.log(`[AUDIT] Successfully deleted ${deletedCount} drafts by admin user`);\n      \n      res.json({\n        message: `${deletedCount}개의 Draft가 모두 삭제되었습니다.`,\n        deletedCount\n      });\n    } catch (error) {\n      console.error('Error deleting all drafts:', error);\n      res.status(500).json({ message: '모든 Draft 삭제에 실패했습니다.' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":23042},"server/storage.ts":{"content":"import {\n  users,\n  categories,\n  products,\n  rentals,\n  wishlist,\n  chatMessages,\n  leads,\n  productDrafts,\n  type User,\n  type UpsertUser,\n  type Category,\n  type InsertCategory,\n  type Product,\n  type InsertProduct,\n  type Rental,\n  type InsertRental,\n  type Wishlist,\n  type InsertWishlist,\n  type ChatMessage,\n  type InsertChatMessage,\n  type Lead,\n  type InsertLead,\n  type ProductDraft,\n  type InsertProductDraft,\n  type InsertProductDraftWithSpecs,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, like, and, gte, lte, inArray, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Category operations\n  getCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  \n  // Product operations\n  getProducts(filters?: {\n    categoryId?: string;\n    search?: string;\n    minPrice?: number;\n    maxPrice?: number;\n    limit?: number;\n    offset?: number;\n  }): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  getProductsWithCategory(): Promise<(Product & { category: Category })[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  \n  // Rental operations\n  getRentals(userId: string): Promise<(Rental & { product: Product })[]>;\n  createRental(rental: InsertRental): Promise<Rental>;\n  updateRental(id: string, updates: Partial<Rental>): Promise<Rental | undefined>;\n  \n  // Wishlist operations\n  getWishlist(userId: string): Promise<(Wishlist & { product: Product })[]>;\n  addToWishlist(wishlist: InsertWishlist): Promise<Wishlist>;\n  removeFromWishlist(userId: string, productId: string): Promise<boolean>;\n  \n  // Chat operations\n  getChatMessages(sessionId: string): Promise<ChatMessage[]>;\n  saveChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n\n  // Lead operations\n  createLead(lead: InsertLead): Promise<Lead>;\n  getLeads(): Promise<Lead[]>;\n\n  // ProductDraft operations for Excel import workflow\n  createDrafts(drafts: InsertProductDraftWithSpecs[]): Promise<ProductDraft[]>;\n  listDrafts(filters?: { status?: string; limit?: number; offset?: number }): Promise<(ProductDraft & { category?: Category })[]>;\n  getDraft(id: string): Promise<(ProductDraft & { category?: Category }) | undefined>;\n  updateDraft(id: string, updates: Partial<InsertProductDraft>): Promise<ProductDraft | undefined>;\n  attachImage(id: string, params: { role: 'main' | 'detail'; url: string }): Promise<ProductDraft | undefined>;\n  approveDraft(id: string): Promise<Product | undefined>;\n  deleteDraft(id: string): Promise<boolean>;\n  deleteAllDrafts(): Promise<number>;\n  \n  // 월간 병합 파이프라인용 메서드\n  mergeProducts(drafts: InsertProductDraftWithSpecs[]): Promise<{\n    updated: Product[];\n    created: Product[];\n    needsReview: ProductDraft[];\n    errors: { draft: InsertProductDraftWithSpecs; error: string }[];\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Category operations\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories).orderBy(categories.name);\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db.insert(categories).values(category).returning();\n    return newCategory;\n  }\n\n  // Product operations\n  async getProducts(filters?: {\n    categoryId?: string;\n    search?: string;\n    minPrice?: number;\n    maxPrice?: number;\n    limit?: number;\n    offset?: number;\n  }): Promise<Product[]> {\n    const conditions = [eq(products.isActive, true)];\n    \n    if (filters?.categoryId) {\n      conditions.push(eq(products.categoryId, filters.categoryId));\n    }\n    \n    if (filters?.search) {\n      conditions.push(\n        like(products.nameKo, `%${filters.search}%`)\n      );\n    }\n    \n    if (filters?.minPrice) {\n      conditions.push(gte(products.monthlyPrice, filters.minPrice.toString()));\n    }\n    \n    if (filters?.maxPrice) {\n      conditions.push(lte(products.monthlyPrice, filters.maxPrice.toString()));\n    }\n\n    let baseQuery = db.select().from(products).where(and(...conditions)).orderBy(desc(products.createdAt));\n\n    if (filters?.limit) {\n      if (filters?.offset) {\n        return await baseQuery.limit(filters.limit).offset(filters.offset);\n      } else {\n        return await baseQuery.limit(filters.limit);\n      }\n    }\n\n    return await baseQuery;\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db\n      .select()\n      .from(products)\n      .where(and(eq(products.id, id), eq(products.isActive, true)));\n    return product;\n  }\n\n  async getProductsWithCategory(): Promise<(Product & { category: Category })[]> {\n    return await db\n      .select()\n      .from(products)\n      .leftJoin(categories, eq(products.categoryId, categories.id))\n      .where(eq(products.isActive, true))\n      .then(rows => rows.map(row => ({\n        ...row.products,\n        category: row.categories!\n      })));\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db.insert(products).values(product).returning();\n    return newProduct;\n  }\n\n  // Rental operations\n  async getRentals(userId: string): Promise<(Rental & { product: Product })[]> {\n    return await db\n      .select()\n      .from(rentals)\n      .leftJoin(products, eq(rentals.productId, products.id))\n      .where(eq(rentals.userId, userId))\n      .orderBy(desc(rentals.createdAt))\n      .then(rows => rows.map(row => ({\n        ...row.rentals,\n        product: row.products!\n      })));\n  }\n\n  async createRental(rental: InsertRental): Promise<Rental> {\n    const [newRental] = await db.insert(rentals).values(rental).returning();\n    return newRental;\n  }\n\n  async updateRental(id: string, updates: Partial<Rental>): Promise<Rental | undefined> {\n    const [updatedRental] = await db\n      .update(rentals)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(rentals.id, id))\n      .returning();\n    return updatedRental;\n  }\n\n  // Wishlist operations\n  async getWishlist(userId: string): Promise<(Wishlist & { product: Product })[]> {\n    return await db\n      .select()\n      .from(wishlist)\n      .leftJoin(products, eq(wishlist.productId, products.id))\n      .where(eq(wishlist.userId, userId))\n      .orderBy(desc(wishlist.createdAt))\n      .then(rows => rows.map(row => ({\n        ...row.wishlist,\n        product: row.products!\n      })));\n  }\n\n  async addToWishlist(wishlistItem: InsertWishlist): Promise<Wishlist> {\n    const [newWishlist] = await db.insert(wishlist).values(wishlistItem).returning();\n    return newWishlist;\n  }\n\n  async removeFromWishlist(userId: string, productId: string): Promise<boolean> {\n    const result = await db\n      .delete(wishlist)\n      .where(and(eq(wishlist.userId, userId), eq(wishlist.productId, productId)))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Chat operations\n  async getChatMessages(sessionId: string): Promise<ChatMessage[]> {\n    return await db\n      .select()\n      .from(chatMessages)\n      .where(eq(chatMessages.sessionId, sessionId))\n      .orderBy(chatMessages.createdAt);\n  }\n\n  async saveChatMessage(message: InsertChatMessage): Promise<ChatMessage> {\n    const [newMessage] = await db.insert(chatMessages).values(message).returning();\n    return newMessage;\n  }\n\n  // Lead operations\n  async createLead(lead: InsertLead): Promise<Lead> {\n    const [newLead] = await db.insert(leads).values(lead).returning();\n    return newLead;\n  }\n\n  async getLeads(): Promise<Lead[]> {\n    return await db.select().from(leads).orderBy(desc(leads.createdAt));\n  }\n\n  // ProductDraft operations for Excel import workflow\n  async createDrafts(drafts: InsertProductDraftWithSpecs[]): Promise<ProductDraft[]> {\n    if (drafts.length === 0) return [];\n    \n    const result = await db.insert(productDrafts).values(drafts).returning();\n    return result;\n  }\n\n  async listDrafts(filters?: { status?: string; limit?: number; offset?: number }): Promise<(ProductDraft & { category?: Category })[]> {\n    const conditions = [];\n    \n    if (filters?.status) {\n      conditions.push(eq(productDrafts.status, filters.status));\n    }\n\n    let query: any = db\n      .select()\n      .from(productDrafts)\n      .leftJoin(categories, eq(productDrafts.categoryId, categories.id))\n      .orderBy(desc(productDrafts.createdAt));\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    if (filters?.limit) {\n      query = query.limit(filters.limit);\n      if (filters?.offset) {\n        query = query.offset(filters.offset);\n      }\n    }\n\n    const rows = await query;\n    return rows.map((row: any) => ({\n      ...row.product_drafts,\n      category: row.categories || undefined\n    }));\n  }\n\n  async getDraft(id: string): Promise<(ProductDraft & { category?: Category }) | undefined> {\n    const [row] = await db\n      .select()\n      .from(productDrafts)\n      .leftJoin(categories, eq(productDrafts.categoryId, categories.id))\n      .where(eq(productDrafts.id, id));\n    \n    if (!row) return undefined;\n    \n    return {\n      ...row.product_drafts,\n      category: row.categories || undefined\n    };\n  }\n\n  async updateDraft(id: string, updates: Partial<InsertProductDraft>): Promise<ProductDraft | undefined> {\n    const [updatedDraft] = await db\n      .update(productDrafts)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(productDrafts.id, id))\n      .returning();\n    return updatedDraft;\n  }\n\n  async attachImage(id: string, params: { role: 'main' | 'detail'; url: string }): Promise<ProductDraft | undefined> {\n    const draft = await this.getDraft(id);\n    if (!draft) return undefined;\n\n    let updates: Partial<InsertProductDraft> = {};\n\n    if (params.role === 'main') {\n      updates.mainImageUrl = params.url;\n    } else {\n      // Add to detail images array\n      const currentDetailUrls = Array.isArray(draft.detailImageUrls) ? draft.detailImageUrls : [];\n      updates.detailImageUrls = [...currentDetailUrls, params.url];\n    }\n\n    return await this.updateDraft(id, updates);\n  }\n\n  async approveDraft(id: string): Promise<Product | undefined> {\n    const draft = await this.getDraft(id);\n    if (!draft || !draft.name || !draft.nameKo || !draft.descriptionKo || !draft.categoryId || !draft.monthlyPrice || !draft.brand) {\n      throw new Error(\"Draft missing required fields for product creation\");\n    }\n\n    // Create product from draft\n    const productData: InsertProduct = {\n      name: draft.name,\n      nameKo: draft.nameKo,\n      descriptionKo: draft.descriptionKo,\n      imageUrl: draft.mainImageUrl || '/placeholder-product.jpg',\n      categoryId: draft.categoryId,\n      monthlyPrice: draft.monthlyPrice,\n      originalPrice: draft.originalPrice,\n      rating: draft.rating || '4.5',\n      brand: draft.brand,\n      specifications: draft.specifications || {},\n    };\n\n    const [newProduct] = await db.insert(products).values(productData).returning();\n    \n    // Mark draft as approved\n    await this.updateDraft(id, { status: 'approved' });\n    \n    return newProduct;\n  }\n\n  async deleteDraft(id: string): Promise<boolean> {\n    const result = await db\n      .delete(productDrafts)\n      .where(eq(productDrafts.id, id))\n      .returning();\n    return result.length > 0;\n  }\n\n  async deleteAllDrafts(): Promise<number> {\n    const result = await db\n      .delete(productDrafts)\n      .returning();\n    return result.length;\n  }\n\n  // 월간 병합 파이프라인 구현\n  // 데이터 정규화 함수: trim + lowercase 처리로 중복 감지 정확도 향상\n  private normalizeForDuplicateCheck(value: string): string {\n    return value.trim().toLowerCase();\n  }\n\n  async mergeProducts(drafts: InsertProductDraftWithSpecs[]): Promise<{\n    updated: Product[];\n    created: Product[];\n    needsReview: ProductDraft[];\n    errors: { draft: InsertProductDraftWithSpecs; error: string }[];\n  }> {\n    const results = {\n      updated: [] as Product[],\n      created: [] as Product[],\n      needsReview: [] as ProductDraft[],\n      errors: [] as { draft: InsertProductDraftWithSpecs; error: string }[]\n    };\n\n    for (const draft of drafts) {\n      try {\n        // 1. modelNumber 또는 brand가 없으면 manual review로 분기\n        if (!draft.modelNumber || draft.modelNumber.trim() === '' || \n            !draft.brand || draft.brand.trim() === '') {\n          const reviewDraft = await db.insert(productDrafts).values({\n            ...draft,\n            status: 'needs_review'\n          }).returning();\n          results.needsReview.push(reviewDraft[0]);\n          continue;\n        }\n\n        // 2. 정규화된 중복 감지: brand + modelNumber 대소문자/공백 무관 비교\n        const normalizedBrand = this.normalizeForDuplicateCheck(draft.brand!);\n        const normalizedModelNumber = this.normalizeForDuplicateCheck(draft.modelNumber!);\n        \n        const existingProduct = await db\n          .select()\n          .from(products)\n          .where(and(\n            sql`LOWER(TRIM(${products.brand})) = ${normalizedBrand}`,\n            sql`LOWER(TRIM(${products.modelNumber})) = ${normalizedModelNumber}`\n          ))\n          .limit(1);\n\n        if (existingProduct.length > 0) {\n          // 3. 기존 제품 업데이트 (가격 및 프로모션 정보)\n          const [updatedProduct] = await db\n            .update(products)\n            .set({\n              monthlyPrice: draft.monthlyPrice,\n              originalPrice: draft.originalPrice,\n              promotionalPrice: draft.promotionalPrice,\n              promotionStartDate: draft.promotionStartDate,\n              promotionEndDate: draft.promotionEndDate,\n              updatedAt: new Date()\n            })\n            .where(eq(products.id, existingProduct[0].id))\n            .returning();\n          \n          results.updated.push(updatedProduct);\n        } else {\n          // 4. 새 제품 생성 (필수 필드 검증)\n          if (!draft.name || !draft.nameKo || !draft.descriptionKo || !draft.categoryId || !draft.monthlyPrice || !draft.brand) {\n            const reviewDraft = await db.insert(productDrafts).values({\n              ...draft,\n              status: 'needs_review'\n            }).returning();\n            results.needsReview.push(reviewDraft[0]);\n            continue;\n          }\n\n          const productData: InsertProduct = {\n            name: draft.name,\n            nameKo: draft.nameKo,\n            descriptionKo: draft.descriptionKo,\n            imageUrl: draft.mainImageUrl || '/placeholder-product.jpg',\n            categoryId: draft.categoryId,\n            monthlyPrice: draft.monthlyPrice,\n            originalPrice: draft.originalPrice,\n            rating: draft.rating || '4.5',\n            // 저장시 정규화: trim 처리 (DB unique constraint에서 정확한 매칭 보장)\n            brand: draft.brand.trim(),\n            modelNumber: draft.modelNumber.trim(),\n            promotionalPrice: draft.promotionalPrice,\n            promotionStartDate: draft.promotionStartDate,\n            promotionEndDate: draft.promotionEndDate,\n            specifications: draft.specifications || {},\n          };\n\n          const [newProduct] = await db.insert(products).values(productData).returning();\n          results.created.push(newProduct);\n        }\n      } catch (error) {\n        // 5. 에러 발생시 에러 배열에 추가\n        results.errors.push({\n          draft,\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    }\n\n    return results;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":16203},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from 'drizzle-orm';\nimport {\n  index,\n  uniqueIndex,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  isAdmin: boolean(\"is_admin\").notNull().default(false), // 관리자 권한 필드\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Categories table\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  nameKo: varchar(\"name_ko\", { length: 100 }).notNull(),\n  icon: varchar(\"icon\", { length: 50 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  nameKo: varchar(\"name_ko\", { length: 200 }).notNull(),\n  descriptionKo: text(\"description_ko\").notNull(),\n  imageUrl: varchar(\"image_url\", { length: 500 }).notNull(),\n  categoryId: varchar(\"category_id\").notNull().references(() => categories.id),\n  monthlyPrice: decimal(\"monthly_price\", { precision: 10, scale: 2 }).notNull(),\n  originalPrice: decimal(\"original_price\", { precision: 10, scale: 2 }),\n  // 중복 감지 및 월간 업데이트를 위한 새 필드들\n  modelNumber: varchar(\"model_number\", { length: 100 }), // 중복 상품 식별 키\n  promotionalPrice: decimal(\"promotional_price\", { precision: 10, scale: 2 }), // 월간 프로모션 가격\n  promotionStartDate: timestamp(\"promotion_start_date\"), // 프로모션 시작일\n  promotionEndDate: timestamp(\"promotion_end_date\"), // 프로모션 종료일\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).notNull().default('4.5'),\n  brand: varchar(\"brand\", { length: 100 }).notNull(),\n  specifications: jsonb(\"specifications\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  // 중복 감지를 위한 복합 고유 인덱스 (NULL modelNumber는 제외하여 허점 방지)\n  uniqueBrandModel: uniqueIndex(\"uq_products_brand_model\").on(table.brand, table.modelNumber).where(sql`model_number IS NOT NULL`),\n}));\n\n// Rentals table\nexport const rentals = pgTable(\"rentals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  monthlyPrice: decimal(\"monthly_price\", { precision: 10, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).notNull().default('pending'), // pending, active, completed, cancelled\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Wishlist table\nexport const wishlist = pgTable(\"wishlist\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Chat messages table\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  sessionId: varchar(\"session_id\").notNull(),\n  message: text(\"message\").notNull(),\n  isUser: boolean(\"is_user\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Consultation leads table\nexport const leads = pgTable(\"leads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").references(() => products.id),\n  productName: varchar(\"product_name\", { length: 200 }).notNull(),\n  rentalPeriodMonths: integer(\"rental_period_months\").notNull(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  phone: varchar(\"phone\", { length: 20 }).notNull(),\n  preferredTime: varchar(\"preferred_time\", { length: 50 }),\n  message: text(\"message\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Product drafts table for Excel import workflow\nexport const productDrafts = pgTable(\"product_drafts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  // Raw source metadata for tracking\n  rawSourceMeta: jsonb(\"raw_source_meta\").notNull(), // { fileName, sheetName, rowIndex, originalData }\n  // Parsed product data\n  name: varchar(\"name\", { length: 200 }),\n  nameKo: varchar(\"name_ko\", { length: 200 }),\n  descriptionKo: text(\"description_ko\"),\n  categoryId: varchar(\"category_id\").references(() => categories.id),\n  monthlyPrice: decimal(\"monthly_price\", { precision: 10, scale: 2 }),\n  originalPrice: decimal(\"original_price\", { precision: 10, scale: 2 }),\n  // 중복 감지 및 월간 업데이트를 위한 새 필드들\n  modelNumber: varchar(\"model_number\", { length: 100 }), // 중복 상품 식별 키\n  promotionalPrice: decimal(\"promotional_price\", { precision: 10, scale: 2 }), // 월간 프로모션 가격\n  promotionStartDate: timestamp(\"promotion_start_date\"), // 프로모션 시작일\n  promotionEndDate: timestamp(\"promotion_end_date\"), // 프로모션 종료일\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }),\n  brand: varchar(\"brand\", { length: 100 }),\n  specifications: jsonb(\"specifications\"),\n  // Draft-specific fields\n  status: varchar(\"status\", { length: 20 }).notNull().default('pending'), // pending, needs_review, approved, rejected\n  mainImageUrl: varchar(\"main_image_url\", { length: 500 }),\n  detailImageUrls: jsonb(\"detail_image_urls\").notNull().default('[]'), // string[]\n  errors: jsonb(\"errors\").default('[]'), // string[] for validation/parsing errors\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  rentals: many(rentals),\n  wishlist: many(wishlist),\n  chatMessages: many(chatMessages),\n}));\n\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  products: many(products),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  category: one(categories, {\n    fields: [products.categoryId],\n    references: [categories.id],\n  }),\n  rentals: many(rentals),\n  wishlist: many(wishlist),\n}));\n\nexport const rentalsRelations = relations(rentals, ({ one }) => ({\n  user: one(users, {\n    fields: [rentals.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [rentals.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const wishlistRelations = relations(wishlist, ({ one }) => ({\n  user: one(users, {\n    fields: [wishlist.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [wishlist.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const chatMessagesRelations = relations(chatMessages, ({ one }) => ({\n  user: one(users, {\n    fields: [chatMessages.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const leadsRelations = relations(leads, ({ one }) => ({\n  product: one(products, {\n    fields: [leads.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const productDraftsRelations = relations(productDrafts, ({ one }) => ({\n  category: one(categories, {\n    fields: [productDrafts.categoryId],\n    references: [categories.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Will be defined after productSpecificationsSchema\n\nexport const insertRentalSchema = createInsertSchema(rentals).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWishlistSchema = createInsertSchema(wishlist).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLeadSchema = createInsertSchema(leads).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductDraftSchema = createInsertSchema(productDrafts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Product specification schemas\nexport const productColorSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  hex: z.string(),\n  imageUrl: z.string().optional(),\n});\n\nexport const productBasicInfoSchema = z.object({\n  modelNumber: z.string().optional(),\n  maker: z.string().optional(),\n  type: z.string().optional(),\n  releaseYear: z.string().optional(),\n  dimensions: z.string().optional(), // \"180 x 340 x 385mm (가로 x 세로 x 높이)\"\n});\n\nexport const productServiceInfoSchema = z.object({\n  maintenanceDesc: z.string().optional(),\n  warranty: z.string().optional(),\n  installLeadTime: z.string().optional(),\n});\n\nexport const productSpecificationsSchema = z.object({\n  features: z.array(z.string()).default([]),\n  rentalOptions: z.object({\n    minimumPeriod: z.array(z.object({\n      months: z.number(),\n      monthlyPrice: z.number(),\n    })).default([]),\n    maintenanceCycle: z.array(z.object({\n      months: z.number(),\n      additionalFee: z.number(),\n      description: z.string(),\n    })).default([]),\n  }).optional(),\n  // Enhanced structure from reference app\n  colors: z.array(productColorSchema).default([]),\n  functions: z.array(z.string()).default([]), // [\"냉수\", \"온수\", \"정수\"]\n  tags: z.array(z.string()).default([]), // [\"베스트\", \"타사상품 혜택\"]\n  basicInfo: productBasicInfoSchema.optional(),\n  extraFeatures: z.array(z.string()).default([]), // [\"고온\", \"UV 살균\", \"IoT 기능\"]\n  serviceInfo: productServiceInfoSchema.optional(),\n});\n\n// Enhanced product schema with structured specifications validation\nexport const insertProductWithSpecsSchema = insertProductSchema\n  .omit({ rating: true }) // Remove auto-generated rating field\n  .merge(z.object({\n    specifications: productSpecificationsSchema,\n    // Accept number and convert to string for DB decimal type  \n    rating: z.number().min(0).max(5).transform(String),\n  }));\n\n// Enhanced draft schema with specification validation for Gemini parsing\nexport const insertProductDraftWithSpecsSchema = insertProductDraftSchema\n  .merge(z.object({\n    specifications: productSpecificationsSchema.optional(),\n    // Accept both numbers and strings, convert to strings for DB decimal fields\n    rating: z.union([z.number(), z.string()])\n      .transform((val) => {\n        if (typeof val === 'string') {\n          const num = parseFloat(val);\n          return isNaN(num) ? '4.5' : Math.min(Math.max(num, 0), 5).toString();\n        }\n        return Math.min(Math.max(val, 0), 5).toString();\n      }).optional(),\n    monthlyPrice: z.union([z.number(), z.string()])\n      .transform((val) => {\n        if (typeof val === 'string') {\n          const num = parseFloat(val.replace(/[^0-9.]/g, ''));\n          return isNaN(num) || num <= 0 ? undefined : num.toString();\n        }\n        return val <= 0 ? undefined : val.toString();\n      }).optional(),\n    // 프로모션 가격 처리 (monthlyPrice와 동일한 패턴)\n    promotionalPrice: z.union([z.number(), z.string()])\n      .transform((val) => {\n        if (typeof val === 'string') {\n          const num = parseFloat(val.replace(/[^0-9.]/g, ''));\n          return isNaN(num) || num <= 0 ? undefined : num.toString();\n        }\n        return val <= 0 ? undefined : val.toString();\n      }).optional(),\n    originalPrice: z.union([z.number(), z.string()])\n      .transform((val) => {\n        if (typeof val === 'string') {\n          const num = parseFloat(val.replace(/[^0-9.]/g, ''));\n          return isNaN(num) || num <= 0 ? undefined : num.toString();\n        }\n        return val <= 0 ? undefined : val.toString();\n      }).optional(),\n    // Array fields with proper validation\n    detailImageUrls: z.array(z.string().url()).default([]),\n    errors: z.array(z.string()).default([]),\n  }));\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = typeof users.$inferInsert;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type ProductColor = z.infer<typeof productColorSchema>;\nexport type ProductBasicInfo = z.infer<typeof productBasicInfoSchema>;\nexport type ProductServiceInfo = z.infer<typeof productServiceInfoSchema>;\nexport type ProductSpecifications = z.infer<typeof productSpecificationsSchema>;\nexport type Rental = typeof rentals.$inferSelect;\nexport type InsertRental = z.infer<typeof insertRentalSchema>;\nexport type Wishlist = typeof wishlist.$inferSelect;\nexport type InsertWishlist = z.infer<typeof insertWishlistSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type Lead = typeof leads.$inferSelect;\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type ProductDraft = typeof productDrafts.$inferSelect;\nexport type InsertProductDraft = z.infer<typeof insertProductDraftSchema>;\nexport type InsertProductDraftWithSpecs = z.infer<typeof insertProductDraftWithSpecsSchema>;\n","size_bytes":14462},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport PageTransition from \"@/components/PageTransition\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Products from \"@/pages/products\";\nimport ProductDetail from \"@/pages/product-detail\";\nimport Chat from \"@/pages/chat\";\nimport Admin from \"@/pages/admin\";\n\nfunction Router() {\n  return (\n    <PageTransition>\n      <Switch>\n        <Route path=\"/\" component={Landing} />\n        <Route path=\"/home\" component={Home} />\n        <Route path=\"/products\" component={Products} />\n        <Route path=\"/products/:id\" component={ProductDetail} />\n        <Route path=\"/chat\" component={Chat} />\n        <Route path=\"/admin\" component={Admin} />\n        <Route component={NotFound} />\n      </Switch>\n    </PageTransition>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1278},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@300;400;500;600;700&family=Roboto:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240 8% 99%);\n  --foreground: hsl(225 15% 15%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(225 15% 15%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(225 15% 15%);\n  --primary: hsl(215 84% 58%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(160 84% 39%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 6% 97%);\n  --muted-foreground: hsl(220 10% 52%);\n  --accent: hsl(25 95% 58%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(220 13% 90%);\n  --input: hsl(220 13% 90%);\n  --ring: hsl(215 84% 58%);\n  --chart-1: hsl(215 84% 58%);\n  --chart-2: hsl(160 84% 39%);\n  --chart-3: hsl(25 95% 58%);\n  --chart-4: hsl(195 76% 45%);\n  --chart-5: hsl(285 89% 65%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(225 15% 15%);\n  --sidebar-primary: hsl(215 84% 58%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(240 6% 97%);\n  --sidebar-accent-foreground: hsl(215 84% 58%);\n  --sidebar-border: hsl(220 13% 90%);\n  --sidebar-ring: hsl(215 84% 58%);\n  --font-sans: \"Noto Sans KR\", \"Roboto\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: \"Fira Code\", monospace;\n  --radius: 12px;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -2px hsl(0 0% 0% / 0.1);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.1), 0px 4px 6px -4px hsl(0 0% 0% / 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.1), 0px 8px 10px -6px hsl(0 0% 0% / 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* Motion & Elevation Variables */\n  --elevation-subtle: -2px;\n  --elevation-card: -8px;\n  --scale-button: 1.03;\n  --scale-press: 0.97;\n  --scale-category: 1.04;\n  --scale-lift: 1.01;\n  \n  /* Reduced Motion Support */\n  --motion-duration: 200ms;\n  --motion-easing: cubic-bezier(0.22, 1, 0.36, 1);\n}\n\n.dark {\n  --background: hsl(225 15% 11%);\n  --foreground: hsl(240 8% 96%);\n  --card: hsl(225 15% 16%);\n  --card-foreground: hsl(240 8% 96%);\n  --popover: hsl(225 15% 16%);\n  --popover-foreground: hsl(240 8% 96%);\n  --primary: hsl(215 84% 64%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(160 84% 42%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(225 15% 20%);\n  --muted-foreground: hsl(240 6% 52%);\n  --accent: hsl(25 95% 62%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(225 15% 20%);\n  --input: hsl(225 15% 20%);\n  --ring: hsl(215 84% 64%);\n  --chart-1: hsl(215 84% 64%);\n  --chart-2: hsl(160 84% 42%);\n  --chart-3: hsl(25 95% 62%);\n  --chart-4: hsl(195 76% 50%);\n  --chart-5: hsl(285 89% 70%);\n  --sidebar: hsl(225 15% 16%);\n  --sidebar-foreground: hsl(240 8% 96%);\n  --sidebar-primary: hsl(215 84% 64%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(225 15% 20%);\n  --sidebar-accent-foreground: hsl(215 84% 64%);\n  --sidebar-border: hsl(225 15% 20%);\n  --sidebar-ring: hsl(215 84% 64%);\n  --font-sans: \"Noto Sans KR\", \"Roboto\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: \"Fira Code\", monospace;\n  --radius: 12px;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.1);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.1);\n  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 0% / 0.2), 0px 1px 2px -1px hsl(0 0% 0% / 0.2);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.2), 0px 1px 2px -1px hsl(0 0% 0% / 0.2);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.2), 0px 2px 4px -2px hsl(0 0% 0% / 0.2);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.2), 0px 4px 6px -4px hsl(0 0% 0% / 0.2);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.3), 0px 8px 10px -6px hsl(0 0% 0% / 0.3);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.4);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--font-sans);\n  }\n\n  /* Enhanced focus styles for better accessibility */\n  *:focus-visible {\n    outline: 2px solid hsl(var(--ring));\n    outline-offset: 2px;\n  }\n}\n\n/* Reduced Motion Support */\n@media (prefers-reduced-motion: reduce) {\n  :root {\n    --motion-duration: 50ms !important;\n    --motion-easing: linear !important;\n  }\n  \n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n\n@layer components {\n  .product-card {\n    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n  }\n  \n  .product-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n  }\n}\n\n@layer utilities {\n  .line-clamp-1 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 1;\n  }\n  \n  .line-clamp-2 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n  }\n  \n  .line-clamp-3 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 3;\n  }\n}\n","size_bytes":5726},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ai-chat-button.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Bot, X, MessageCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function AiChatButton() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleChat = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className=\"fixed bottom-20 md:bottom-6 right-4 z-50\">\n      {/* Chat Interface */}\n      {isOpen && (\n        <Card className=\"absolute bottom-16 right-0 w-80 h-96 shadow-xl border\">\n          <div className=\"bg-primary text-primary-foreground p-4 flex items-center justify-between rounded-t-lg\">\n            <div className=\"flex items-center space-x-2\">\n              <Bot className=\"h-5 w-5\" />\n              <span className=\"font-medium\">AI 상담사</span>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={toggleChat}\n              className=\"text-primary-foreground hover:text-primary-foreground/80 hover:bg-primary-foreground/20\"\n              data-testid=\"button-close-chat\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          <div className=\"p-4 h-64 overflow-y-auto bg-muted/30\">\n            <div className=\"mb-4\">\n              <Card className=\"bg-background\">\n                <CardContent className=\"p-3\">\n                  <p className=\"text-sm text-foreground\">\n                    안녕하세요! 가전제품 선택에 도움이 필요하시면 언제든 말씀해주세요. 😊\n                  </p>\n                  <p className=\"text-sm text-foreground mt-2\">\n                    더 자세한 상담을 원하시면 아래 버튼을 클릭해주세요!\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n          \n          <div className=\"p-4 border-t border-border\">\n            <Link href=\"/chat\">\n              <Button className=\"w-full\" data-testid=\"button-open-full-chat\">\n                <MessageCircle className=\"mr-2 h-4 w-4\" />\n                전체 화면으로 채팅하기\n              </Button>\n            </Link>\n          </div>\n        </Card>\n      )}\n\n      {/* Chat Toggle Button */}\n      <Button\n        size=\"icon\"\n        className=\"h-14 w-14 rounded-full shadow-lg\"\n        onClick={toggleChat}\n        data-testid=\"button-ai-chat\"\n      >\n        <Bot className=\"h-6 w-6\" />\n      </Button>\n    </div>\n  );\n}\n","size_bytes":2594},"client/src/components/category-grid.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport { interactiveVariants, springPresets } from \"@/lib/motion\";\nimport { \n  Snowflake, \n  ShirtIcon, \n  Wind, \n  Tv, \n  Microwave, \n  Bot,\n  Utensils,\n  Coffee,\n  WashingMachine,\n  AirVent\n} from \"lucide-react\";\n\ninterface Category {\n  id: string;\n  name: string;\n  nameKo: string;\n  icon: string;\n}\n\ninterface CategoryGridProps {\n  categories: Category[];\n}\n\nconst iconMap: Record<string, any> = {\n  \"snowflake\": Snowflake,\n  \"shirt\": ShirtIcon,\n  \"wind\": Wind,\n  \"tv\": Tv,\n  \"microwave\": Microwave,\n  \"robot\": Bot,\n  \"utensils\": Utensils,\n  \"coffee\": Coffee,\n  \"washing-machine\": WashingMachine,\n  \"air-vent\": AirVent,\n};\n\nexport default function CategoryGrid({ categories }: CategoryGridProps) {\n  const getIcon = (iconName: string) => {\n    const IconComponent = iconMap[iconName] || Bot;\n    return IconComponent;\n  };\n\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n      {categories.map((category, index) => {\n        const IconComponent = getIcon(category.icon);\n        \n        return (\n          <motion.div\n            key={category.id}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ \n              ...springPresets.gentle,\n              delay: index * 0.1, // 스태거 효과\n            }}\n            whileHover={interactiveVariants.categoryHover}\n            whileTap={interactiveVariants.categoryPress}\n            className=\"group\"\n            style={{\n              willChange: 'transform, box-shadow',\n            }}\n          >\n            <Link href={`/products?categoryId=${category.id}`}>\n              <Card className=\"text-center cursor-pointer border-2 border-border/50 hover:border-primary/30 transition-colors duration-200 bg-card/80 backdrop-blur-sm\" data-testid={`category-${category.id}`}>\n                <CardContent className=\"p-6\">\n                  <motion.div\n                    whileHover={{\n                      scale: 1.1,\n                      rotate: [0, -5, 5, 0],\n                      transition: { \n                        duration: 0.3,\n                        ease: \"easeInOut\"\n                      }\n                    }}\n                    className=\"mb-3 flex justify-center\"\n                  >\n                    <IconComponent className=\"h-8 w-8 text-primary group-hover:text-primary/80 transition-colors duration-200\" />\n                  </motion.div>\n                  <p className=\"text-sm font-medium text-foreground group-hover:text-primary/90 transition-colors duration-200\">\n                    {category.nameKo}\n                  </p>\n                </CardContent>\n              </Card>\n            </Link>\n          </motion.div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":2879},"client/src/components/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Home, Menu, LogIn } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport KakaoChatButton from \"@/components/kakao-chat-button\";\nimport { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { useLocation } from \"wouter\";\n\nexport default function Header() {\n  const [clickSequence, setClickSequence] = useState<number[]>([]);\n  const [showAdminDialog, setShowAdminDialog] = useState(false);\n  const [password, setPassword] = useState(\"\");\n  const [, navigate] = useLocation();\n\n  const handleLogoClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    \n    // Add a click to the sequence\n    const newSequence = [...clickSequence, Date.now()];\n    \n    // Keep only the last 3 clicks (within 5 seconds)\n    const now = Date.now();\n    const recentClicks = newSequence.filter(time => now - time < 5000);\n    \n    setClickSequence(recentClicks);\n    \n    // Check if we have exactly 3 clicks in the right pattern (5-2-8)\n    if (recentClicks.length === 3) {\n      const intervals = [];\n      for (let i = 1; i < recentClicks.length; i++) {\n        intervals.push(recentClicks[i] - recentClicks[i - 1]);\n      }\n      \n      // Check for pattern: ~5 clicks in 1 second, then ~2 clicks in 1 second, then ~8 clicks in 1 second\n      // We'll be more lenient and just count rapid clicks in sequence\n      setShowAdminDialog(true);\n      setClickSequence([]);\n    }\n  };\n\n  const handlePasswordSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (password === \"eocjsaud\") {\n      setShowAdminDialog(false);\n      setPassword(\"\");\n      navigate(\"/admin\");\n    } else {\n      alert(\"잘못된 비밀번호입니다.\");\n      setPassword(\"\");\n    }\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 border-b border-border bg-card/95 backdrop-blur supports-backdrop-blur:bg-card/60\">\n      <div className=\"container mx-auto px-4 py-3\">\n        <div className=\"flex items-center justify-between\">\n          <div \n            className=\"flex items-center space-x-2 cursor-pointer\" \n            data-testid=\"logo-link\"\n            onClick={handleLogoClick}\n          >\n            <Home className=\"text-primary text-2xl h-6 w-6\" />\n            <h1 className=\"text-xl font-bold text-foreground\">렌탈리움</h1>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex items-center space-x-6\">\n            <Link href=\"/home\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"nav-home\">\n              홈\n            </Link>\n            <Link href=\"/products\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"nav-products\">\n              제품\n            </Link>\n            <Link href=\"/chat\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"nav-chat\">\n              AI 상담\n            </Link>\n          </nav>\n          \n          {/* Actions */}\n          <div className=\"flex items-center space-x-2\">\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n            >\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                data-testid=\"button-login\"\n                className=\"hidden md:inline-flex\"\n              >\n                <LogIn className=\"h-4 w-4 mr-2\" />\n                로그인\n              </Button>\n            </motion.div>\n            \n            <KakaoChatButton \n              variant=\"default\" \n              size=\"sm\"\n              className=\"hidden md:inline-flex\"\n            />\n            \n            {/* Mobile menu button - removed as we'll use bottom nav */}\n          </div>\n        </div>\n      </div>\n\n      {/* Admin Password Dialog */}\n      <Dialog open={showAdminDialog} onOpenChange={setShowAdminDialog}>\n        <DialogContent className=\"sm:max-w-md\" data-testid=\"admin-login-dialog\">\n          <DialogHeader>\n            <DialogTitle>관리자 로그인</DialogTitle>\n            <DialogDescription>\n              관리자 페이지에 접근하려면 비밀번호를 입력하세요.\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handlePasswordSubmit} className=\"space-y-4\">\n            <Input\n              type=\"password\"\n              placeholder=\"비밀번호\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              data-testid=\"input-admin-password\"\n              autoFocus\n            />\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  setShowAdminDialog(false);\n                  setPassword(\"\");\n                }}\n                data-testid=\"button-cancel-admin\"\n              >\n                취소\n              </Button>\n              <Button type=\"submit\" data-testid=\"button-submit-admin\">\n                로그인\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </header>\n  );\n}\n","size_bytes":5436},"client/src/components/mobile-nav.tsx":{"content":"import { Home, Search, MessageCircle, Bot } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport KakaoChatButton from \"@/components/kakao-chat-button\";\n\nexport default function MobileNav() {\n  const [location] = useLocation();\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  const navItems = [\n    { icon: Home, label: \"홈\", path: \"/home\", testId: \"nav-mobile-home\" },\n    { icon: Search, label: \"제품\", path: \"/products\", testId: \"nav-mobile-products\" },\n    { icon: Bot, label: \"AI상담\", path: \"/chat\", testId: \"nav-mobile-chat\" },\n  ];\n\n  return (\n    <nav className=\"md:hidden fixed bottom-0 left-0 right-0 z-50 bg-card border-t border-border\">\n      <div className=\"flex items-center justify-around py-2\">\n        {navItems.map((item) => {\n          const Icon = item.icon;\n          const active = isActive(item.path);\n          \n          return (\n            <Link \n              key={item.path} \n              href={item.path}\n              className={`flex flex-col items-center py-2 px-3 transition-colors ${\n                active\n                  ? \"text-primary\"\n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n              data-testid={item.testId}\n            >\n              <Icon className={`text-lg mb-1 h-5 w-5 ${active ? \"text-primary\" : \"\"}`} />\n              <span className={`text-xs ${active ? \"text-primary font-medium\" : \"\"}`}>\n                {item.label}\n              </span>\n            </Link>\n          );\n        })}\n        \n        {/* KakaoTalk consultation button */}\n        <div className=\"flex flex-col items-center py-2 px-3\" data-testid=\"nav-mobile-kakao\">\n          <div className=\"flex items-center justify-center\">\n            <KakaoChatButton variant=\"ghost\" size=\"sm\" className=\"p-1 h-auto bg-transparent hover:bg-transparent text-[#FEE500]\" />\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2055},"client/src/components/product-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { MotionButton } from \"@/components/ui/motion-button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport { SharedElement } from \"@/components/PageTransition\";\nimport KakaoChatButton from \"@/components/kakao-chat-button\";\nimport { interactiveVariants, springPresets } from \"@/lib/motion\";\n\ninterface Product {\n  id: string;\n  nameKo: string;\n  descriptionKo: string;\n  imageUrl: string;\n  monthlyPrice: string;\n  originalPrice?: string;\n  rating: string;\n  brand: string;\n}\n\ninterface ProductCardProps {\n  product: Product;\n  compact?: boolean;\n  showRecommendedBadge?: boolean;\n}\n\nexport default function ProductCard({ product, compact = false, showRecommendedBadge = false }: ProductCardProps) {\n  const monthlyPrice = parseFloat(product.monthlyPrice);\n  const originalPrice = product.originalPrice ? parseFloat(product.originalPrice) : null;\n\n  const handleKakaoClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={springPresets.gentle}\n      whileHover={interactiveVariants.cardHover}\n      whileTap={interactiveVariants.cardPress}\n      className=\"group h-full\"\n      style={{\n        willChange: 'transform, box-shadow',\n      }}\n    >\n      <Card className=\"overflow-hidden border-2 border-border/30 hover:border-primary/20 bg-card/95 backdrop-blur-sm h-full flex flex-col transition-colors duration-300\" data-testid={`card-product-${product.id}`}>\n        <div className=\"relative\">\n          <Link href={`/products/${product.id}`} className=\"block cursor-pointer\">\n            <SharedElement \n              layoutId={`product-image-${product.id}`}\n              className={`${compact ? \"h-40\" : \"h-48\"} bg-muted overflow-hidden relative`}\n            >\n              <motion.img\n                src={product.imageUrl || \"/api/placeholder/400/300\"}\n                alt={product.nameKo}\n                className=\"w-full h-full object-cover\"\n                data-testid=\"img-product-card\"\n                whileHover={interactiveVariants.imageZoom}\n                transition={{ duration: 0.4, ease: \"easeOut\" }}\n              />\n              {/* 호버 시 미묘한 오버레이 효과 */}\n              <motion.div \n                className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent\"\n                initial={{ opacity: 0 }}\n                whileHover={{ opacity: 1 }}\n                transition={{ duration: 0.3 }}\n              />\n            </SharedElement>\n          </Link>\n          \n          {/* Badges */}\n          <div className=\"absolute top-2 left-2 flex flex-wrap gap-1\">\n            {showRecommendedBadge && (\n              <Badge className=\"bg-secondary text-secondary-foreground\" data-testid=\"badge-recommended\">\n                추천\n              </Badge>\n            )}\n            {originalPrice && originalPrice > monthlyPrice && (\n              <Badge className=\"bg-accent text-accent-foreground\" data-testid=\"badge-discount\">\n                할인\n              </Badge>\n            )}\n          </div>\n\n          {/* Consultation Button (top right) */}\n          <div className=\"absolute top-2 right-2\" onClick={handleKakaoClick}>\n            <KakaoChatButton \n              variant=\"outline\" \n              size=\"sm\"\n              className=\"bg-background/80 backdrop-blur-sm\"\n              productName={product.nameKo}\n            />\n          </div>\n        </div>\n\n        <CardContent className=\"p-4\">\n          <div className=\"space-y-2\">\n            <Link href={`/products/${product.id}`} className=\"block cursor-pointer\">\n              <div className=\"flex items-start justify-between\">\n                <h3 className={`font-semibold text-foreground line-clamp-1 ${compact ? \"text-sm\" : \"text-base\"}`} data-testid=\"text-product-name\">\n                  {product.nameKo}\n                </h3>\n                <div className=\"flex items-center space-x-1 ml-2\">\n                  <Star className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />\n                  <span className=\"text-xs text-muted-foreground\" data-testid=\"text-product-rating\">\n                    {product.rating}\n                  </span>\n                </div>\n              </div>\n            </Link>\n\n            <Link href={`/products/${product.id}`} className=\"block cursor-pointer\">\n              <p className={`text-muted-foreground line-clamp-2 ${compact ? \"text-xs\" : \"text-sm\"}`} data-testid=\"text-product-description\">\n                {product.descriptionKo}\n              </p>\n\n              <div className=\"flex items-center justify-between mt-2\">\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className={`font-bold text-foreground ${compact ? \"text-base\" : \"text-lg\"}`} data-testid=\"text-product-price\">\n                      월 {monthlyPrice.toLocaleString()}원\n                    </span>\n                    {originalPrice && originalPrice > monthlyPrice && (\n                      <span className={`text-muted-foreground line-through ${compact ? \"text-xs\" : \"text-sm\"}`}>\n                        월 {originalPrice.toLocaleString()}원\n                      </span>\n                    )}\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {product.brand}\n                  </Badge>\n                </div>\n              </div>\n            </Link>\n\n            {!compact && (\n              <motion.div \n                className=\"mt-3 space-y-2\"\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.2, ...springPresets.gentle }}\n              >\n                <Link href={`/products/${product.id}`}>\n                  <MotionButton \n                    variant=\"outline\" \n                    className=\"w-full hover:bg-primary/5\" \n                    data-testid=\"button-view-details\"\n                    motionVariant=\"button\"\n                  >\n                    상품 상세보기\n                  </MotionButton>\n                </Link>\n                <div onClick={handleKakaoClick}>\n                  <KakaoChatButton \n                    className=\"w-full\"\n                    productName={product.nameKo}\n                  />\n                </div>\n              </motion.div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}","size_bytes":6695},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    let url = queryKey[0] as string;\n    \n    // Handle query parameters\n    if (queryKey.length > 1 && typeof queryKey[1] === 'object' && queryKey[1] !== null) {\n      const params = new URLSearchParams();\n      const queryParams = queryKey[1] as Record<string, any>;\n      \n      Object.entries(queryParams).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          params.append(key, String(value));\n        }\n      });\n      \n      if (params.toString()) {\n        url += '?' + params.toString();\n      }\n    } else if (queryKey.length > 1) {\n      // Handle path parameters (for cases like /api/products/:id)\n      url = queryKey.join(\"/\");\n    }\n    \n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2048},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { motion } from \"framer-motion\";\nimport { ChatStaggerContainer, ChatStaggerItem } from \"@/components/PageTransition\";\nimport Header from \"@/components/header\";\nimport MobileNav from \"@/components/mobile-nav\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Bot, Send, User, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface ChatMessage {\n  id: string;\n  message: string;\n  isUser: boolean;\n  createdAt: string;\n}\n\nexport default function Chat() {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [sessionId] = useState(() => `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest(\"POST\", \"/api/chat\", {\n        message,\n        sessionId,\n        userId: null, // Anonymous for now\n      });\n      return await response.json();\n    },\n    onSuccess: (data: any) => {\n      // Only add AI message (user message was already added optimistically)\n      if (data.aiMessage && typeof data.aiMessage === 'object' && 'isUser' in data.aiMessage) {\n        setMessages(prev => [...prev, data.aiMessage]);\n      }\n      \n      setInputMessage(\"\");\n    },\n    onError: (error) => {\n      console.error(\"Chat error:\", error);\n      // Add error message\n      setMessages(prev => [\n        ...prev,\n        {\n          id: `error_${Date.now()}`,\n          message: \"죄송합니다. 일시적인 오류가 발생했습니다. 다시 시도해주세요.\",\n          isUser: false,\n          createdAt: new Date().toISOString(),\n        }\n      ]);\n    },\n  });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    // Add welcome message\n    setMessages([\n      {\n        id: \"welcome\",\n        message: \"안녕하세요! 가전제품 렌탈 AI 상담사입니다. 😊\\n\\n어떤 가전제품을 찾고 계신지 말씀해주시면 최적의 제품을 추천해드릴게요!\\n\\n예를 들어:\\n• \\\"4인 가족용 냉장고 추천해주세요\\\"\\n• \\\"원룸에 맞는 소형 세탁기가 필요해요\\\"\\n• \\\"에어컨 렌탈 비용이 궁금해요\\\"\",\n        isUser: false,\n        createdAt: new Date().toISOString(),\n      }\n    ]);\n  }, []);\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim() || sendMessageMutation.isPending) return;\n\n    const userMessage = {\n      id: `user_${Date.now()}`,\n      message: inputMessage.trim(),\n      isUser: true,\n      createdAt: new Date().toISOString(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    sendMessageMutation.mutate(inputMessage.trim());\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const formatTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <Header />\n      \n      {/* Chat Header with Animation */}\n      <motion.div \n        className=\"bg-card border-b border-border p-4\"\n        initial={{ opacity: 0, y: -20, scale: 0.95 }}\n        animate={{ \n          opacity: 1, \n          y: 0, \n          scale: 1,\n          transition: {\n            duration: 0.4,\n            ease: [0.68, -0.55, 0.265, 1.55], // Bouncy entrance\n            delay: 0.1\n          }\n        }}\n      >\n        <div className=\"container mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-home\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                홈으로\n              </Button>\n            </Link>\n            <motion.div \n              className=\"flex items-center space-x-2\"\n              initial={{ opacity: 0, x: -10 }}\n              animate={{ \n                opacity: 1, \n                x: 0,\n                transition: {\n                  delay: 0.3,\n                  duration: 0.3\n                }\n              }}\n            >\n              <motion.div \n                className=\"bg-primary/10 p-2 rounded-full\"\n                initial={{ scale: 0 }}\n                animate={{ \n                  scale: 1,\n                  transition: {\n                    delay: 0.4,\n                    duration: 0.3,\n                    ease: [0.68, -0.55, 0.265, 1.55]\n                  }\n                }}\n              >\n                <Bot className=\"h-5 w-5 text-primary\" />\n              </motion.div>\n              <motion.div\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ \n                  opacity: 1, \n                  y: 0,\n                  transition: {\n                    delay: 0.5,\n                    duration: 0.2\n                  }\n                }}\n              >\n                <h2 className=\"font-semibold\" data-testid=\"text-chat-title\">AI 상담사</h2>\n                <p className=\"text-xs text-muted-foreground\">가전제품 렌탈 전문 상담</p>\n              </motion.div>\n            </motion.div>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* Messages */}\n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"container mx-auto h-full px-4 py-6\">\n          <div className=\"h-full overflow-y-auto space-y-4 mb-4\" style={{ maxHeight: 'calc(100vh - 200px)' }}>\n            {messages.filter(msg => msg && typeof msg.isUser === 'boolean').map((message, index) => (\n              <motion.div\n                key={message.id}\n                initial={{ opacity: 0, y: 20, scale: 0.95 }}\n                animate={{ \n                  opacity: 1, \n                  y: 0, \n                  scale: 1,\n                  transition: {\n                    delay: index * 0.1,\n                    duration: 0.3,\n                    ease: [0.22, 1, 0.36, 1]\n                  }\n                }}\n                className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}\n                data-testid={`message-${message.isUser ? 'user' : 'ai'}-${message.id}`}\n              >\n                <div className={`flex items-start space-x-2 max-w-[80%] md:max-w-[60%] ${message.isUser ? 'flex-row-reverse space-x-reverse' : ''}`}>\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarFallback className={message.isUser ? 'bg-primary text-primary-foreground' : 'bg-secondary'}>\n                      {message.isUser ? <User className=\"h-4 w-4\" /> : <Bot className=\"h-4 w-4\" />}\n                    </AvatarFallback>\n                  </Avatar>\n                  \n                  <Card className={message.isUser ? 'bg-primary text-primary-foreground' : ''}>\n                    <CardContent className=\"p-3\">\n                      <p className=\"text-sm whitespace-pre-wrap\">{message.message}</p>\n                      <p className={`text-xs mt-1 ${message.isUser ? 'text-primary-foreground/80' : 'text-muted-foreground'}`}>\n                        {formatTime(message.createdAt)}\n                      </p>\n                    </CardContent>\n                  </Card>\n                </div>\n              </motion.div>\n            ))}\n            \n            {/* Loading indicator */}\n            {sendMessageMutation.isPending && (\n              <div className=\"flex justify-start\">\n                <div className=\"flex items-start space-x-2 max-w-[80%] md:max-w-[60%]\">\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarFallback className=\"bg-secondary\">\n                      <Bot className=\"h-4 w-4\" />\n                    </AvatarFallback>\n                  </Avatar>\n                  \n                  <Card>\n                    <CardContent className=\"p-3\">\n                      <div className=\"flex space-x-1\">\n                        <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\"></div>\n                        <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                        <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            )}\n            \n            <div ref={messagesEndRef} />\n          </div>\n        </div>\n      </div>\n\n      {/* Message Input */}\n      <div className=\"bg-card border-t border-border p-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"flex space-x-2\">\n            <Input\n              placeholder=\"궁금한 것을 물어보세요...\"\n              value={inputMessage}\n              onChange={(e) => setInputMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              disabled={sendMessageMutation.isPending}\n              className=\"flex-1\"\n              data-testid=\"input-chat-message\"\n            />\n            <Button\n              onClick={handleSendMessage}\n              disabled={!inputMessage.trim() || sendMessageMutation.isPending}\n              data-testid=\"button-send-message\"\n            >\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <MobileNav />\n    </div>\n  );\n}\n","size_bytes":10073},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/header\";\nimport MobileNav from \"@/components/mobile-nav\";\nimport CategoryGrid from \"@/components/category-grid\";\nimport ProductCard from \"@/components/product-card\";\nimport AiChatButton from \"@/components/ai-chat-button\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Search, ArrowRight, Bot, Truck, Shield, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useState, useCallback, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport useEmblaCarousel from \"embla-carousel-react\";\nimport Autoplay from \"embla-carousel-autoplay\";\n\nexport default function Home() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [rentalPeriod, setRentalPeriod] = useState(\"\");\n  \n  // Advertisement Carousel\n  const [emblaRef, emblaApi] = useEmblaCarousel(\n    { loop: true, align: \"center\" },\n    [Autoplay({ delay: 4000, stopOnInteraction: false })]\n  );\n  \n  const adBanners = [\n    {\n      id: 1,\n      title: \"봄맞이 특가 이벤트\",\n      subtitle: \"모든 가전제품 렌탈료 30% 할인!\",\n      bgColor: \"from-blue-500 to-purple-600\",\n      action: \"지금 보기\"\n    },\n    {\n      id: 2,\n      title: \"프리미엄 냉장고\",\n      subtitle: \"LG 디오스 냉장고 월 39,000원부터\",\n      bgColor: \"from-green-500 to-teal-600\",\n      action: \"렌탈 신청\"\n    },\n    {\n      id: 3,\n      title: \"에어컨 시즌 준비\",\n      subtitle: \"삼성 무풍에어컨 설치비 무료\",\n      bgColor: \"from-orange-500 to-red-600\",\n      action: \"상담 신청\"\n    },\n    {\n      id: 4,\n      title: \"세탁기 + 건조기 세트\",\n      subtitle: \"세트 렌탈시 추가 10% 할인 혜택\",\n      bgColor: \"from-indigo-500 to-purple-600\",\n      action: \"혜택 확인\"\n    }\n  ];\n\n  const { data: categories, isLoading: categoriesLoading } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: featuredProducts, isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\", { limit: 6 }],\n  });\n\n  const { data: popularProducts, isLoading: popularLoading } = useQuery({\n    queryKey: [\"/api/products\", { limit: 4, offset: 6 }],\n  });\n\n  const handleSearch = () => {\n    if (searchTerm.trim()) {\n      window.location.href = `/products?search=${encodeURIComponent(searchTerm.trim())}&period=${rentalPeriod}`;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground font-sans\">\n      <Header />\n\n      {/* Advertisement Banner Carousel */}\n      <section className=\"relative overflow-hidden bg-gradient-to-r from-primary/5 to-secondary/5\">\n        <div className=\"embla\" ref={emblaRef} data-testid=\"carousel-advertisement\">\n          <div className=\"embla__container flex\">\n            {adBanners.map((banner) => (\n              <motion.div \n                key={banner.id} \n                className=\"embla__slide flex-[0_0_100%] min-w-0\"\n                initial={{ opacity: 0, scale: 0.95 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.6 }}\n              >\n                <div className={`h-48 md:h-64 bg-gradient-to-r ${banner.bgColor} flex items-center justify-center text-white relative overflow-hidden`}>\n                  <div className=\"absolute inset-0 bg-black/20\"></div>\n                  <motion.div \n                    className=\"text-center z-10 px-4\"\n                    initial={{ y: 20, opacity: 0 }}\n                    animate={{ y: 0, opacity: 1 }}\n                    transition={{ delay: 0.3, duration: 0.6 }}\n                  >\n                    <motion.h2 \n                      className=\"text-2xl md:text-4xl font-bold mb-2\"\n                      animate={{ scale: [1, 1.02, 1] }}\n                      transition={{ repeat: Infinity, duration: 3, ease: \"easeInOut\" }}\n                    >\n                      {banner.title}\n                    </motion.h2>\n                    <p className=\"text-sm md:text-lg mb-4 opacity-90\">{banner.subtitle}</p>\n                    <motion.div\n                      whileHover={{ scale: 1.05, y: -2 }}\n                      whileTap={{ scale: 0.95 }}\n                      transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n                    >\n                      <Button \n                        variant=\"secondary\" \n                        size=\"lg\" \n                        className=\"bg-white text-gray-800 hover:bg-gray-100 font-semibold shadow-lg\"\n                        data-testid={`button-ad-${banner.id}`}\n                      >\n                        {banner.action}\n                        <motion.div\n                          animate={{ x: [0, 5, 0] }}\n                          transition={{ repeat: Infinity, duration: 1.5, ease: \"easeInOut\" }}\n                        >\n                          <ArrowRight className=\"ml-2 h-4 w-4\" />\n                        </motion.div>\n                      </Button>\n                    </motion.div>\n                  </motion.div>\n                  \n                  {/* Decorative Elements */}\n                  <motion.div \n                    className=\"absolute top-4 right-4 w-20 h-20 bg-white/10 rounded-full\"\n                    animate={{ rotate: 360 }}\n                    transition={{ repeat: Infinity, duration: 20, ease: \"linear\" }}\n                  ></motion.div>\n                  <motion.div \n                    className=\"absolute bottom-6 left-6 w-12 h-12 bg-white/10 rounded-full\"\n                    animate={{ scale: [1, 1.2, 1] }}\n                    transition={{ repeat: Infinity, duration: 2, ease: \"easeInOut\" }}\n                  ></motion.div>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n        \n        {/* Carousel Dots */}\n        <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2\">\n          {adBanners.map((_, index) => (\n            <motion.div \n              key={index}\n              className=\"w-2 h-2 bg-white/50 rounded-full cursor-pointer\"\n              whileHover={{ scale: 1.2, backgroundColor: \"rgba(255,255,255,0.8)\" }}\n              transition={{ duration: 0.2 }}\n              data-testid={`dot-ad-${index + 1}`}\n            />\n          ))}\n        </div>\n      </section>\n\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-primary/10 to-secondary/10 py-8 md:py-12\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-2xl md:text-4xl font-bold text-foreground mb-4\" data-testid=\"text-hero-title\">\n              필요한 가전제품을<br className=\"md:hidden\" /> 합리적으로 렌탈하세요\n            </h2>\n            <p className=\"text-muted-foreground text-sm md:text-base max-w-2xl mx-auto\" data-testid=\"text-hero-description\">\n              AI 추천으로 딱 맞는 가전제품을 찾고, 원하는 기간만큼 렌탈하세요\n            </p>\n          </div>\n          \n          {/* Search Bar */}\n          <div className=\"max-w-4xl mx-auto\">\n            <Card className=\"shadow-lg\">\n              <CardContent className=\"p-4 md:p-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                  <div className=\"md:col-span-2\">\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">어떤 가전제품이 필요하세요?</label>\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                      <Input \n                        placeholder=\"냉장고, 세탁기, 에어컨...\" \n                        className=\"pl-10\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        data-testid=\"input-search-product\"\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">렌탈 기간</label>\n                    <Select value={rentalPeriod} onValueChange={setRentalPeriod} data-testid=\"select-rental-period\">\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"기간 선택\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"1\">1개월</SelectItem>\n                        <SelectItem value=\"3\">3개월</SelectItem>\n                        <SelectItem value=\"6\">6개월</SelectItem>\n                        <SelectItem value=\"12\">12개월</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">&nbsp;</label>\n                    <motion.div\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                      transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n                    >\n                      <Button \n                        className=\"w-full\" \n                        onClick={handleSearch}\n                        data-testid=\"button-search\"\n                      >\n                        <motion.div\n                          animate={{ rotate: [0, 15, 0] }}\n                          transition={{ repeat: Infinity, duration: 2.5, ease: \"easeInOut\" }}\n                        >\n                          <Search className=\"mr-2 h-4 w-4\" />\n                        </motion.div>\n                        검색\n                      </Button>\n                    </motion.div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Categories */}\n      <section className=\"py-8 md:py-12\">\n        <div className=\"container mx-auto px-4\">\n          <h3 className=\"text-xl md:text-2xl font-bold text-foreground mb-6\" data-testid=\"text-categories-title\">인기 카테고리</h3>\n          {categoriesLoading ? (\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n              {[...Array(6)].map((_, i) => (\n                <Skeleton key={i} className=\"h-32\" />\n              ))}\n            </div>\n          ) : (\n            <CategoryGrid categories={(categories as any[]) || []} />\n          )}\n        </div>\n      </section>\n\n      {/* AI Recommendations */}\n      <section className=\"py-8 md:py-12 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h3 className=\"text-xl md:text-2xl font-bold text-foreground\" data-testid=\"text-recommendations-title\">AI 맞춤 추천</h3>\n              <p className=\"text-sm text-muted-foreground mt-1\">당신에게 딱 맞는 가전제품을 추천해드려요</p>\n            </div>\n            <Link href=\"/products\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-view-more-recommendations\">\n                더보기 <ArrowRight className=\"ml-1 h-4 w-4\" />\n              </Button>\n            </Link>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {productsLoading ? (\n              [...Array(6)].map((_, i) => (\n                <Card key={i} className=\"overflow-hidden\">\n                  <Skeleton className=\"w-full h-48\" />\n                  <CardContent className=\"p-4\">\n                    <Skeleton className=\"h-4 w-3/4 mb-2\" />\n                    <Skeleton className=\"h-3 w-full mb-3\" />\n                    <div className=\"flex justify-between items-center mb-3\">\n                      <Skeleton className=\"h-4 w-20\" />\n                      <Skeleton className=\"h-3 w-10\" />\n                    </div>\n                    <Skeleton className=\"h-8 w-full\" />\n                  </CardContent>\n                </Card>\n              ))\n            ) : (\n              (featuredProducts as any[])?.slice(0, 6).map((product: any) => (\n                <ProductCard key={product.id} product={product} showRecommendedBadge />\n              ))\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Popular Products */}\n      <section className=\"py-8 md:py-12\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl md:text-2xl font-bold text-foreground\" data-testid=\"text-popular-title\">인기 렌탈 상품</h3>\n            <div className=\"flex space-x-2\">\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n              >\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filter-all\">전체</Button>\n              </motion.div>\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n              >\n                <Button size=\"sm\" data-testid=\"button-filter-kitchen\">주방가전</Button>\n              </motion.div>\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n              >\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filter-living\">생활가전</Button>\n              </motion.div>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {popularLoading ? (\n              [...Array(4)].map((_, i) => (\n                <Card key={i} className=\"overflow-hidden\">\n                  <Skeleton className=\"w-full h-40\" />\n                  <CardContent className=\"p-4\">\n                    <Skeleton className=\"h-4 w-3/4 mb-1\" />\n                    <Skeleton className=\"h-3 w-full mb-2\" />\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <Skeleton className=\"h-4 w-16\" />\n                      <Skeleton className=\"h-3 w-8\" />\n                    </div>\n                    <Skeleton className=\"h-8 w-full\" />\n                  </CardContent>\n                </Card>\n              ))\n            ) : (\n              (popularProducts as any[])?.slice(0, 4).map((product: any) => (\n                <ProductCard key={product.id} product={product} compact />\n              ))\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-8 md:py-12 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-8\">\n            <h3 className=\"text-xl md:text-2xl font-bold text-foreground mb-4\" data-testid=\"text-features-title\">렌탈리움을 선택하는 이유</h3>\n            <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n              합리적인 가격과 편리한 서비스로 가전제품 렌탈의 새로운 기준을 제시합니다\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\" data-testid=\"feature-ai-recommendation\">\n              <div className=\"bg-primary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Bot className=\"text-primary h-8 w-8\" />\n              </div>\n              <h4 className=\"font-semibold text-foreground mb-2\">AI 맞춤 추천</h4>\n              <p className=\"text-sm text-muted-foreground\">Google Gemini 2.5 Pro 기반의 똑똑한 추천 시스템으로 최적의 제품을 찾아드려요</p>\n            </div>\n            \n            <div className=\"text-center\" data-testid=\"feature-free-delivery\">\n              <div className=\"bg-secondary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Truck className=\"text-secondary h-8 w-8\" />\n              </div>\n              <h4 className=\"font-semibold text-foreground mb-2\">무료 배송 & 설치</h4>\n              <p className=\"text-sm text-muted-foreground\">전국 어디든 무료 배송과 전문 기사님의 설치 서비스를 제공해드립니다</p>\n            </div>\n            \n            <div className=\"text-center\" data-testid=\"feature-warranty\">\n              <div className=\"bg-accent/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Shield className=\"text-accent h-8 w-8\" />\n              </div>\n              <h4 className=\"font-semibold text-foreground mb-2\">안심 보상 서비스</h4>\n              <p className=\"text-sm text-muted-foreground\">고장 시 무료 A/S와 교체 서비스로 걱정 없이 이용하세요</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <MobileNav />\n      <AiChatButton />\n    </div>\n  );\n}\n","size_bytes":17554},"client/src/pages/landing.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Home, Search, Snowflake, ShirtIcon, Wind, Tv, Microwave, Bot, Truck, Shield, Facebook, Instagram, Youtube } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport Header from \"@/components/header\";\n\nexport default function Landing() {\n  const { toast } = useToast();\n\n  const handleSearch = () => {\n    // Redirect to home page with search\n    window.location.href = \"/home\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground font-sans\">\n      <Header />\n\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-primary/10 to-secondary/10 py-8 md:py-12\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-2xl md:text-4xl font-bold text-foreground mb-4\" data-testid=\"text-hero-title\">\n              필요한 가전제품을<br className=\"md:hidden\" /> 합리적으로 렌탈하세요\n            </h2>\n            <p className=\"text-muted-foreground text-sm md:text-base max-w-2xl mx-auto\" data-testid=\"text-hero-description\">\n              AI 추천으로 딱 맞는 가전제품을 찾고, 원하는 기간만큼 렌탈하세요\n            </p>\n          </div>\n          \n          {/* Search Bar */}\n          <div className=\"max-w-4xl mx-auto\">\n            <Card className=\"shadow-lg\">\n              <CardContent className=\"p-4 md:p-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                  <div className=\"md:col-span-2\">\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">어떤 가전제품이 필요하세요?</label>\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                      <Input \n                        placeholder=\"냉장고, 세탁기, 에어컨...\" \n                        className=\"pl-10\"\n                        data-testid=\"input-search-product\"\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">렌탈 기간</label>\n                    <Select data-testid=\"select-rental-period\">\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"기간 선택\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"1\">1개월</SelectItem>\n                        <SelectItem value=\"3\">3개월</SelectItem>\n                        <SelectItem value=\"6\">6개월</SelectItem>\n                        <SelectItem value=\"12\">12개월</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">&nbsp;</label>\n                    <Button \n                      className=\"w-full\" \n                      onClick={handleSearch}\n                      data-testid=\"button-search\"\n                    >\n                      <Search className=\"mr-2 h-4 w-4\" />검색\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Categories */}\n      <section className=\"py-8 md:py-12\">\n        <div className=\"container mx-auto px-4\">\n          <h3 className=\"text-xl md:text-2xl font-bold text-foreground mb-6\" data-testid=\"text-categories-title\">인기 카테고리</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n            {[\n              { icon: Snowflake, name: \"냉장고\", testId: \"category-refrigerator\" },\n              { icon: ShirtIcon, name: \"세탁기\", testId: \"category-washing-machine\" },\n              { icon: Wind, name: \"에어컨\", testId: \"category-air-conditioner\" },\n              { icon: Tv, name: \"TV\", testId: \"category-tv\" },\n              { icon: Microwave, name: \"전자레인지\", testId: \"category-microwave\" },\n              { icon: Bot, name: \"청소기\", testId: \"category-vacuum\" }\n            ].map((category, index) => (\n              <Card key={index} className=\"text-center group cursor-pointer hover:shadow-md transition-shadow\" data-testid={category.testId}>\n                <CardContent className=\"p-6\">\n                  <category.icon className=\"h-8 w-8 text-primary mx-auto mb-3\" />\n                  <p className=\"text-sm font-medium text-foreground\">{category.name}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-8 md:py-12 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-8\">\n            <h3 className=\"text-xl md:text-2xl font-bold text-foreground mb-4\" data-testid=\"text-features-title\">렌탈리움을 선택하는 이유</h3>\n            <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n              합리적인 가격과 편리한 서비스로 가전제품 렌탈의 새로운 기준을 제시합니다\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\" data-testid=\"feature-ai-recommendation\">\n              <div className=\"bg-primary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Bot className=\"text-primary text-2xl h-8 w-8\" />\n              </div>\n              <h4 className=\"font-semibold text-foreground mb-2\">AI 맞춤 추천</h4>\n              <p className=\"text-sm text-muted-foreground\">Google Gemini 2.5 Pro 기반의 똑똑한 추천 시스템으로 최적의 제품을 찾아드려요</p>\n            </div>\n            \n            <div className=\"text-center\" data-testid=\"feature-free-delivery\">\n              <div className=\"bg-secondary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Truck className=\"text-secondary text-2xl h-8 w-8\" />\n              </div>\n              <h4 className=\"font-semibold text-foreground mb-2\">무료 배송 & 설치</h4>\n              <p className=\"text-sm text-muted-foreground\">전국 어디든 무료 배송과 전문 기사님의 설치 서비스를 제공해드립니다</p>\n            </div>\n            \n            <div className=\"text-center\" data-testid=\"feature-warranty\">\n              <div className=\"bg-accent/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Shield className=\"text-accent text-2xl h-8 w-8\" />\n              </div>\n              <h4 className=\"font-semibold text-foreground mb-2\">안심 보상 서비스</h4>\n              <p className=\"text-sm text-muted-foreground\">고장 시 무료 A/S와 교체 서비스로 걱정 없이 이용하세요</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border py-8 md:py-12\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 mb-8\">\n            <div>\n              <h5 className=\"font-semibold text-foreground mb-3\">서비스</h5>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">가전렌탈</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">AI 추천</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">배송 & 설치</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">A/S 신청</a></li>\n              </ul>\n            </div>\n            <div>\n              <h5 className=\"font-semibold text-foreground mb-3\">고객지원</h5>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">자주 묻는 질문</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">고객센터</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">1:1 문의</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">이용약관</a></li>\n              </ul>\n            </div>\n            <div>\n              <h5 className=\"font-semibold text-foreground mb-3\">회사</h5>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">회사소개</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">채용정보</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">보도자료</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">파트너십</a></li>\n              </ul>\n            </div>\n            <div>\n              <h5 className=\"font-semibold text-foreground mb-3\">소셜</h5>\n              <div className=\"flex space-x-3\">\n                <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  <Facebook className=\"h-5 w-5\" />\n                </a>\n                <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  <Instagram className=\"h-5 w-5\" />\n                </a>\n                <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  <Youtube className=\"h-5 w-5\" />\n                </a>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-border pt-6\">\n            <div className=\"flex flex-col md:flex-row justify-between items-center\">\n              <div className=\"flex items-center space-x-2 mb-4 md:mb-0\">\n                <Home className=\"text-primary h-5 w-5\" />\n                <span className=\"font-bold text-foreground\">렌탈리움</span>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">© 2024 렌탈리움. All rights reserved.</p>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":10858},"client/src/pages/my-rentals.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/header\";\nimport MobileNav from \"@/components/mobile-nav\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Calendar, Package, Star } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function MyRentals() {\n  const { isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n\n  const { data: rentals, isLoading: rentalsLoading } = useQuery({\n    queryKey: [\"/api/rentals\"],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"로그인이 필요합니다\",\n        description: \"로그인 후 이용해주세요.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"outline\" className=\"text-yellow-600 border-yellow-600\">신청 중</Badge>;\n      case 'active':\n        return <Badge variant=\"default\" className=\"bg-primary\">렌탈 중</Badge>;\n      case 'completed':\n        return <Badge variant=\"secondary\">완료</Badge>;\n      case 'cancelled':\n        return <Badge variant=\"destructive\">취소</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('ko-KR', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-6\">\n          <Skeleton className=\"h-8 w-48 mb-6\" />\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-4\">\n                    <Skeleton className=\"w-20 h-20 rounded-lg\" />\n                    <div className=\"flex-1\">\n                      <Skeleton className=\"h-4 w-48 mb-2\" />\n                      <Skeleton className=\"h-3 w-32 mb-2\" />\n                      <Skeleton className=\"h-3 w-24\" />\n                    </div>\n                    <Skeleton className=\"w-16 h-6\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n        <MobileNav />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will redirect in useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-2xl font-bold\" data-testid=\"text-rentals-title\">내 렌탈 현황</h1>\n          <Link href=\"/products\">\n            <Button variant=\"outline\" data-testid=\"button-browse-products\">\n              <Package className=\"mr-2 h-4 w-4\" />\n              제품 둘러보기\n            </Button>\n          </Link>\n        </div>\n\n        {rentalsLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-4\">\n                    <Skeleton className=\"w-20 h-20 rounded-lg\" />\n                    <div className=\"flex-1\">\n                      <Skeleton className=\"h-4 w-48 mb-2\" />\n                      <Skeleton className=\"h-3 w-32 mb-2\" />\n                      <Skeleton className=\"h-3 w-24\" />\n                    </div>\n                    <Skeleton className=\"w-16 h-6\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : rentals && (rentals as any[]).length > 0 ? (\n          <div className=\"space-y-4\">\n            {(rentals as any[]).map((rental: any) => (\n              <Card key={rental.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-rental-${rental.id}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex flex-col md:flex-row gap-4\">\n                    {/* Product Image */}\n                    <div className=\"w-full md:w-24 h-48 md:h-24 bg-muted rounded-lg overflow-hidden flex-shrink-0\">\n                      <img\n                        src={rental.product?.imageUrl || \"/api/placeholder/200/200\"}\n                        alt={rental.product?.nameKo}\n                        className=\"w-full h-full object-cover\"\n                        data-testid=\"img-rental-product\"\n                      />\n                    </div>\n\n                    {/* Product Info */}\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <h3 className=\"font-semibold text-lg\" data-testid=\"text-rental-product-name\">\n                          {rental.product?.nameKo}\n                        </h3>\n                        {getStatusBadge(rental.status)}\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-muted-foreground\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span data-testid=\"text-rental-period\">\n                            {formatDate(rental.startDate)} ~ {formatDate(rental.endDate)}\n                          </span>\n                        </div>\n\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"font-medium text-foreground\" data-testid=\"text-rental-price\">\n                            월 {parseFloat(rental.monthlyPrice).toLocaleString()}원\n                          </span>\n                        </div>\n\n                        <div className=\"flex items-center space-x-2\">\n                          <Star className=\"h-4 w-4 text-yellow-400\" />\n                          <span>{rental.product?.rating}</span>\n                        </div>\n\n                        <div>\n                          <span className=\"font-medium text-foreground\" data-testid=\"text-rental-total\">\n                            총 {parseFloat(rental.totalPrice).toLocaleString()}원\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Actions */}\n                    <div className=\"flex flex-col gap-2 min-w-0 md:min-w-[120px]\">\n                      <Link href={`/products/${rental.product?.id}`}>\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid=\"button-view-product\">\n                          제품 보기\n                        </Button>\n                      </Link>\n                      \n                      {rental.status === 'active' && (\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid=\"button-manage-rental\">\n                          관리\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12\" data-testid=\"text-no-rentals\">\n            <Package className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">아직 렌탈 중인 제품이 없습니다</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              다양한 가전제품을 렌탈해보세요\n            </p>\n            <Link href=\"/products\">\n              <Button data-testid=\"button-start-rental\">\n                <Package className=\"mr-2 h-4 w-4\" />\n                제품 둘러보기\n              </Button>\n            </Link>\n          </div>\n        )}\n      </div>\n\n      <MobileNav />\n    </div>\n  );\n}\n","size_bytes":8562},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/product-detail.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useRoute } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { motion } from \"framer-motion\";\nimport { SharedElement } from \"@/components/PageTransition\";\nimport Header from \"@/components/header\";\nimport MobileNav from \"@/components/mobile-nav\";\nimport AiChatButton from \"@/components/ai-chat-button\";\nimport KakaoChatButton from \"@/components/kakao-chat-button\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Star, Shield, Truck, ArrowLeft, MessageSquare, Phone, X } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { insertLeadSchema } from \"@shared/schema\";\n\n// Consultation form schema - match the insertLeadSchema exactly\nconst consultationFormSchema = insertLeadSchema;\n\ntype ConsultationFormData = z.infer<typeof insertLeadSchema>;\n\n\nexport default function ProductDetail() {\n  const [match, params] = useRoute(\"/products/:id\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showConsultationForm, setShowConsultationForm] = useState(false);\n  const [selectedRentalOption, setSelectedRentalOption] = useState<any>(null);\n  const [selectedMaintenanceOption, setSelectedMaintenanceOption] = useState<any>(null);\n\n  const { data: product, isLoading } = useQuery({\n    queryKey: [\"/api/products\", params?.id],\n    enabled: !!params?.id,\n  });\n\n  const form = useForm<ConsultationFormData>({\n    resolver: zodResolver(consultationFormSchema),\n    defaultValues: {\n      productId: params?.id || \"\",\n      productName: \"\", // Will be set when product loads\n      rentalPeriodMonths: selectedRentalOption?.months || 3, // Use selected rental option\n      name: \"\",\n      phone: \"\",\n      preferredTime: \"\",\n      message: \"\",\n    },\n  });\n\n  const submitConsultationMutation = useMutation({\n    mutationFn: async (data: ConsultationFormData) => {\n      const submissionData = {\n        ...data,\n        productId: params?.id || null,\n        productName: (product as any)?.nameKo || data.productName,\n      };\n      return await apiRequest(\"POST\", \"/api/leads\", submissionData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"상담 신청 완료\",\n        description: \"상담 신청이 성공적으로 접수되었습니다. 빠른 시일 내에 연락드리겠습니다.\",\n      });\n      form.reset();\n      setShowConsultationForm(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"오류 발생\",\n        description: \"상담 신청에 실패했습니다. 다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // 기본 옵션 설정 (product가 로드된 후 한 번만)\n  useEffect(() => {\n    if (!product) return;\n    \n    const specs = (product as any)?.specifications || {};\n    const rentals = specs?.rentalOptions?.minimumPeriod || [];\n    const maintenance = specs?.rentalOptions?.maintenanceCycle || [];\n    \n    if (rentals.length > 0 && !selectedRentalOption) {\n      setSelectedRentalOption(rentals[0]);\n    }\n    if (maintenance.length > 0 && !selectedMaintenanceOption) {\n      setSelectedMaintenanceOption(maintenance[0]);\n    }\n  }, [product]); // product만 dependency로 설정\n\n  // 선택된 옵션과 상담 폼 동기화\n  useEffect(() => {\n    if (selectedRentalOption) {\n      form.setValue(\"rentalPeriodMonths\", selectedRentalOption.months);\n    }\n  }, [selectedRentalOption, form]);\n\n  const onSubmitConsultation = (data: ConsultationFormData) => {\n    submitConsultationMutation.mutate(data);\n  };\n\n  if (!match) return null;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-6\">\n          <Skeleton className=\"h-8 w-32 mb-6\" />\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            <Skeleton className=\"aspect-square rounded-xl\" />\n            <div className=\"space-y-4\">\n              <Skeleton className=\"h-8 w-3/4\" />\n              <Skeleton className=\"h-4 w-full\" />\n              <Skeleton className=\"h-4 w-2/3\" />\n              <Skeleton className=\"h-16 w-full\" />\n              <Skeleton className=\"h-12 w-full\" />\n              <Skeleton className=\"h-12 w-full\" />\n            </div>\n          </div>\n        </div>\n        <MobileNav />\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"text-center py-12\">\n            <p className=\"text-lg text-muted-foreground mb-4\">제품을 찾을 수 없습니다</p>\n            <Link href=\"/home\">\n              <Button>제품 목록으로 돌아가기</Button>\n            </Link>\n          </div>\n        </div>\n        <MobileNav />\n      </div>\n    );\n  }\n\n  const monthlyPrice = parseFloat((product as any).monthlyPrice);\n\n  // 제품 옵션 가져오기\n  const specifications = (product as any)?.specifications || {};\n  const rentalOptions = specifications?.rentalOptions?.minimumPeriod || [];\n  const maintenanceOptions = specifications?.rentalOptions?.maintenanceCycle || [];\n\n  // 가격 계산\n  const calculateTotalPrice = () => {\n    let basePrice = selectedRentalOption ? selectedRentalOption.monthlyPrice : monthlyPrice;\n    let additionalFee = selectedMaintenanceOption ? selectedMaintenanceOption.additionalFee : 0;\n    return basePrice + additionalFee;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Back Button */}\n        <Link href=\"/home\">\n          <Button variant=\"ghost\" size=\"sm\" className=\"mb-6\" data-testid=\"button-back\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            제품 목록으로\n          </Button>\n        </Link>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Product Image */}\n          <SharedElement \n            layoutId={`product-image-${params?.id}`}\n            className=\"aspect-square bg-muted rounded-xl overflow-hidden\"\n          >\n            <img\n              src={(product as any).imageUrl || \"/api/placeholder/600/600\"}\n              alt={(product as any).nameKo}\n              className=\"w-full h-full object-cover\"\n              data-testid=\"img-product\"\n            />\n          </SharedElement>\n\n          {/* Product Info */}\n          <div className=\"space-y-6\">\n            <div>\n              <div className=\"flex items-start justify-between mb-2\">\n                <h1 className=\"text-2xl md:text-3xl font-bold text-foreground\" data-testid=\"text-product-name\">\n                  {(product as any).nameKo}\n                </h1>\n              </div>\n              \n              <div className=\"flex items-center space-x-4 mb-4\">\n                <Badge variant=\"secondary\">{(product as any).brand}</Badge>\n                <div className=\"flex items-center space-x-1\">\n                  <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                  <span className=\"text-sm font-medium\" data-testid=\"text-product-rating\">{(product as any).rating}</span>\n                </div>\n              </div>\n\n              <p className=\"text-muted-foreground mb-4\" data-testid=\"text-product-description\">\n                {(product as any).descriptionKo}\n              </p>\n            </div>\n\n            {/* Pricing */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-2xl font-bold text-foreground\" data-testid=\"text-monthly-price\">\n                        월 {calculateTotalPrice().toLocaleString()}원\n                      </span>\n                      {(product as any).originalPrice && (\n                        <span className=\"text-sm text-muted-foreground line-through\">\n                          월 {parseFloat((product as any).originalPrice).toLocaleString()}원\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      선택한 옵션에 따라 렌탈료가 변동됩니다\n                    </p>\n                  </div>\n\n                  {/* 의무사용기간 선택 */}\n                  {rentalOptions.length > 0 && (\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-foreground\">\n                        의무사용기간\n                      </label>\n                      <Select\n                        value={selectedRentalOption?.months?.toString() || \"\"}\n                        onValueChange={(value) => {\n                          const option = rentalOptions.find(opt => opt.months.toString() === value);\n                          setSelectedRentalOption(option);\n                        }}\n                      >\n                        <SelectTrigger data-testid=\"select-rental-period\">\n                          <SelectValue placeholder=\"기간을 선택하세요\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {rentalOptions.map((option) => (\n                            <SelectItem \n                              key={option.months} \n                              value={option.months.toString()}\n                            >\n                              {option.months}개월 - 월 {option.monthlyPrice.toLocaleString()}원\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n\n                  {/* 관리주기 선택 */}\n                  {maintenanceOptions.length > 0 && (\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-foreground\">\n                        관리주기\n                      </label>\n                      <Select\n                        value={selectedMaintenanceOption?.months?.toString() || \"\"}\n                        onValueChange={(value) => {\n                          const option = maintenanceOptions.find(opt => opt.months.toString() === value);\n                          setSelectedMaintenanceOption(option);\n                        }}\n                      >\n                        <SelectTrigger data-testid=\"select-maintenance-cycle\">\n                          <SelectValue placeholder=\"관리주기를 선택하세요\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {maintenanceOptions.map((option) => (\n                            <SelectItem \n                              key={option.months} \n                              value={option.months.toString()}\n                            >\n                              {option.description} \n                              {option.additionalFee > 0 && ` (+${option.additionalFee.toLocaleString()}원)`}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n\n                  <Separator />\n\n                  {/* Consultation Actions */}\n                  <div className=\"space-y-3\">\n                    <KakaoChatButton \n                      className=\"w-full\" \n                      size=\"lg\"\n                      productName={(product as any).nameKo}\n                    />\n                    \n                    <motion.div\n                      whileHover={{ scale: 1.02, y: -2 }}\n                      whileTap={{ scale: 0.98 }}\n                      transition={{ type: \"spring\", stiffness: 300, damping: 20 }}\n                    >\n                      <Button\n                        variant=\"outline\"\n                        className=\"w-full\"\n                        size=\"lg\"\n                        onClick={() => setShowConsultationForm(true)}\n                        data-testid=\"button-consultation-form\"\n                      >\n                        <motion.div\n                          animate={{ x: [0, 5, 0] }}\n                          transition={{ repeat: Infinity, duration: 1.5, ease: \"easeInOut\" }}\n                        >\n                          <Phone className=\"mr-2 h-4 w-4\" />\n                        </motion.div>\n                        상담 신청하기\n                      </Button>\n                    </motion.div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Service Info */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Card>\n                <CardContent className=\"p-4 flex items-center space-x-3\">\n                  <div className=\"bg-secondary/10 p-2 rounded-full\">\n                    <Truck className=\"h-4 w-4 text-secondary\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-sm\">무료 배송 & 설치</p>\n                    <p className=\"text-xs text-muted-foreground\">전국 어디든 무료</p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4 flex items-center space-x-3\">\n                  <div className=\"bg-accent/10 p-2 rounded-full\">\n                    <Shield className=\"h-4 w-4 text-accent\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-sm\">안심 A/S</p>\n                    <p className=\"text-xs text-muted-foreground\">무료 수리 & 교체</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n\n        {/* Consultation Form Modal */}\n        {showConsultationForm && (\n          <div \n            className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\"\n            onClick={() => setShowConsultationForm(false)}\n          >\n            <Card className=\"w-full max-w-md\" onClick={(e) => e.stopPropagation()}>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MessageSquare className=\"h-5 w-5\" />\n                  상담 신청하기\n                </CardTitle>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setShowConsultationForm(false)}\n                  data-testid=\"button-consultation-close\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmitConsultation)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>성함</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"성함을 입력해주세요\" data-testid=\"input-consultation-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"phone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>연락처</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"010-0000-0000\" data-testid=\"input-consultation-phone\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"rentalPeriodMonths\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>렌탈 기간</FormLabel>\n                          <FormControl>\n                            <select \n                              {...field} \n                              className=\"w-full px-3 py-2 border border-input rounded-md bg-background\"\n                              data-testid=\"consultation-select-rental-period\"\n                              onChange={(e) => field.onChange(parseInt(e.target.value))}\n                              value={field.value}\n                            >\n                              <option value={1}>1개월</option>\n                              <option value={3}>3개월</option>\n                              <option value={6}>6개월</option>\n                              <option value={12}>12개월</option>\n                              <option value={24}>24개월</option>\n                            </select>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"preferredTime\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>선호 상담 시간 (선택)</FormLabel>\n                          <FormControl>\n                            <select \n                              {...field}\n                              value={field.value || \"\"}\n                              className=\"w-full px-3 py-2 border border-input rounded-md bg-background\"\n                              data-testid=\"select-preferred-time\"\n                            >\n                              <option value=\"\">선택해주세요</option>\n                              <option value=\"오전 9-12시\">오전 9-12시</option>\n                              <option value=\"오후 1-6시\">오후 1-6시</option>\n                              <option value=\"저녁 6-9시\">저녁 6-9시</option>\n                              <option value=\"주말\">주말</option>\n                            </select>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"message\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>문의사항 (선택)</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              {...field}\n                              value={field.value || \"\"}\n                              placeholder=\"추가 문의사항이 있으시면 적어주세요\"\n                              rows={3}\n                              data-testid=\"textarea-consultation-message\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex gap-2 pt-4\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        className=\"flex-1\"\n                        onClick={() => setShowConsultationForm(false)}\n                        data-testid=\"button-consultation-cancel\"\n                      >\n                        취소\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        className=\"flex-1\"\n                        disabled={submitConsultationMutation.isPending}\n                        data-testid=\"button-consultation-submit\"\n                      >\n                        {submitConsultationMutation.isPending ? \"처리 중...\" : \"신청하기\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Product Specifications */}\n        {(product as any).specifications && (\n          <Card className=\"mt-8\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">제품 사양</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {Object.entries((product as any).specifications as Record<string, any>).map(([key, value]) => {\n                  // nested objects(rentalOptions) 제외하고 기본 사양만 표시\n                  if (key === 'rentalOptions' || typeof value === 'object') {\n                    return null;\n                  }\n                  return (\n                    <div key={key} className=\"flex justify-between py-2 border-b border-border\">\n                      <span className=\"font-medium\">{key}</span>\n                      <span className=\"text-muted-foreground\">{String(value)}</span>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      <MobileNav />\n      <AiChatButton />\n    </div>\n  );\n}","size_bytes":22555},"client/src/pages/products.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/header\";\nimport MobileNav from \"@/components/mobile-nav\";\nimport ProductCard from \"@/components/product-card\";\nimport AiChatButton from \"@/components/ai-chat-button\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Search, Filter } from \"lucide-react\";\n\nexport default function Products() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryId, setCategoryId] = useState(\"all\");\n  const [minPrice, setMinPrice] = useState(\"\");\n  const [maxPrice, setMaxPrice] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"newest\");\n\n  const { data: categories, isLoading: categoriesLoading } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: products, isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\", {\n      search: searchTerm || undefined,\n      categoryId: categoryId !== \"all\" ? categoryId : undefined,\n      minPrice: minPrice ? parseFloat(minPrice) : undefined,\n      maxPrice: maxPrice ? parseFloat(maxPrice) : undefined,\n      limit: 20,\n    }],\n  });\n\n  const handleSearch = () => {\n    // The query will automatically refetch when searchTerm changes\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground font-sans\">\n      <Header />\n\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Search and Filters */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col md:flex-row gap-4 mb-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  placeholder=\"제품 검색...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-product-search\"\n                />\n              </div>\n            </div>\n            <Button onClick={handleSearch} data-testid=\"button-search-products\">\n              <Search className=\"mr-2 h-4 w-4\" />\n              검색\n            </Button>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">카테고리</label>\n                  <Select value={categoryId} onValueChange={setCategoryId} data-testid=\"select-category\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"전체\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">전체</SelectItem>\n                      {(categories as any[])?.map((category: any) => (\n                        <SelectItem key={category.id} value={category.id}>\n                          {category.nameKo}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">최소 가격</label>\n                  <Input\n                    placeholder=\"최소 가격\"\n                    type=\"number\"\n                    value={minPrice}\n                    onChange={(e) => setMinPrice(e.target.value)}\n                    data-testid=\"input-min-price\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">최대 가격</label>\n                  <Input\n                    placeholder=\"최대 가격\"\n                    type=\"number\"\n                    value={maxPrice}\n                    onChange={(e) => setMaxPrice(e.target.value)}\n                    data-testid=\"input-max-price\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">정렬</label>\n                  <Select value={sortBy} onValueChange={setSortBy} data-testid=\"select-sort\">\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"newest\">최신순</SelectItem>\n                      <SelectItem value=\"price-low\">가격 낮은순</SelectItem>\n                      <SelectItem value=\"price-high\">가격 높은순</SelectItem>\n                      <SelectItem value=\"rating\">평점순</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex items-end\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    onClick={() => {\n                      setSearchTerm(\"\");\n                      setCategoryId(\"all\");\n                      setMinPrice(\"\");\n                      setMaxPrice(\"\");\n                      setSortBy(\"newest\");\n                    }}\n                    data-testid=\"button-clear-filters\"\n                  >\n                    <Filter className=\"mr-2 h-4 w-4\" />\n                    초기화\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Products Grid */}\n        <div>\n          <div className=\"flex items-center justify-between mb-6\">\n            <h1 className=\"text-2xl font-bold\" data-testid=\"text-products-title\">\n              가전제품 목록\n            </h1>\n            <div className=\"text-sm text-muted-foreground\" data-testid=\"text-products-count\">\n              {products ? `${(products as any[]).length}개 제품` : ''}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {productsLoading ? (\n              [...Array(12)].map((_, i) => (\n                <Card key={i} className=\"overflow-hidden\">\n                  <Skeleton className=\"w-full h-48\" />\n                  <CardContent className=\"p-4\">\n                    <Skeleton className=\"h-4 w-3/4 mb-2\" />\n                    <Skeleton className=\"h-3 w-full mb-3\" />\n                    <div className=\"flex justify-between items-center mb-3\">\n                      <Skeleton className=\"h-4 w-20\" />\n                      <Skeleton className=\"h-3 w-10\" />\n                    </div>\n                    <Skeleton className=\"h-8 w-full\" />\n                  </CardContent>\n                </Card>\n              ))\n            ) : products && (products as any[]).length > 0 ? (\n              (products as any[]).map((product: any) => (\n                <ProductCard key={product.id} product={product} />\n              ))\n            ) : (\n              <div className=\"col-span-full text-center py-12\" data-testid=\"text-no-products\">\n                <p className=\"text-muted-foreground text-lg mb-4\">검색 조건에 맞는 제품이 없습니다</p>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setSearchTerm(\"\");\n                    setCategoryId(\"all\");\n                    setMinPrice(\"\");\n                    setMaxPrice(\"\");\n                  }}\n                  data-testid=\"button-reset-search\"\n                >\n                  전체 제품 보기\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <MobileNav />\n      <AiChatButton />\n    </div>\n  );\n}\n","size_bytes":7965},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/profile.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { User, Mail, LogOut, Settings } from \"lucide-react\";\nimport Header from \"@/components/header\";\nimport MobileNav from \"@/components/mobile-nav\";\nimport type { User as UserType } from \"@shared/schema\";\n\nexport default function Profile() {\n  const { user, isAuthenticated } = useAuth();\n  const typedUser = user as UserType | undefined;\n\n  if (!isAuthenticated || !typedUser) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground font-sans\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <p className=\"text-gray-500\">로그인이 필요합니다.</p>\n        </div>\n        <MobileNav />\n      </div>\n    );\n  }\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground font-sans\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-6 max-w-2xl pb-20\">\n        {/* Profile Header */}\n        <Card className=\"mb-6\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <Avatar className=\"h-20 w-20\">\n                <AvatarFallback className=\"text-lg bg-blue-100 text-blue-600\">\n                  {typedUser.firstName?.[0]}{typedUser.lastName?.[0]}\n                </AvatarFallback>\n              </Avatar>\n            </div>\n            <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white\">\n              {typedUser.firstName} {typedUser.lastName}\n            </CardTitle>\n            <p className=\"text-gray-600 dark:text-gray-300\" data-testid=\"text-user-email\">\n              {typedUser.email}\n            </p>\n          </CardHeader>\n        </Card>\n\n        {/* Profile Information */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              개인 정보\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"firstName\" className=\"text-sm font-medium\">\n                  이름\n                </Label>\n                <Input\n                  id=\"firstName\"\n                  value={typedUser.firstName || \"\"}\n                  readOnly\n                  className=\"bg-gray-50 dark:bg-gray-800\"\n                  data-testid=\"input-first-name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"lastName\" className=\"text-sm font-medium\">\n                  성\n                </Label>\n                <Input\n                  id=\"lastName\"\n                  value={typedUser.lastName || \"\"}\n                  readOnly\n                  className=\"bg-gray-50 dark:bg-gray-800\"\n                  data-testid=\"input-last-name\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"email\" className=\"text-sm font-medium\">\n                이메일\n              </Label>\n              <Input\n                id=\"email\"\n                value={typedUser.email || \"\"}\n                readOnly\n                className=\"bg-gray-50 dark:bg-gray-800\"\n                data-testid=\"input-email\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Account Settings */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Settings className=\"h-5 w-5\" />\n              계정 설정\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between py-2\">\n                <div>\n                  <p className=\"font-medium\">알림 설정</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                    렌탈 알림 및 업데이트 수신\n                  </p>\n                </div>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-notifications\">\n                  설정\n                </Button>\n              </div>\n              \n              <Separator />\n              \n              <div className=\"flex items-center justify-between py-2\">\n                <div>\n                  <p className=\"font-medium\">언어 설정</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                    앱 언어 변경\n                  </p>\n                </div>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-language\">\n                  한국어\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Logout Button */}\n        <Card>\n          <CardContent className=\"pt-6\">\n            <Button\n              onClick={handleLogout}\n              variant=\"destructive\"\n              className=\"w-full\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              로그아웃\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n      <MobileNav />\n    </div>\n  );\n}","size_bytes":5685},"client/src/pages/wishlist.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport ProductCard from \"@/components/product-card\";\nimport Header from \"@/components/header\";\nimport MobileNav from \"@/components/mobile-nav\";\nimport { Heart, ShoppingBag } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Wishlist } from \"@shared/schema\";\n\nexport default function WishlistPage() {\n  const { isAuthenticated, user } = useAuth();\n  const { toast } = useToast();\n\n  const { data: wishlist, isLoading } = useQuery({\n    queryKey: [\"/api/wishlist\"],\n    enabled: isAuthenticated,\n  });\n\n  const removeFromWishlistMutation = useMutation({\n    mutationFn: (productId: string) => apiRequest('DELETE', `/api/wishlist/${productId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n      toast({\n        title: \"찜목록에서 제거됨\",\n        description: \"제품이 찜목록에서 제거되었습니다.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"오류\",\n        description: \"찜목록에서 제거하는 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground font-sans\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Card className=\"max-w-md mx-auto text-center\">\n            <CardContent className=\"pt-6\">\n              <Heart className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n              <h2 className=\"text-xl font-bold mb-2\">로그인이 필요합니다</h2>\n              <p className=\"text-muted-foreground mb-4\">\n                찜목록을 보려면 로그인해주세요.\n              </p>\n              <Button onClick={() => window.location.href = \"/api/login\"} data-testid=\"button-login\">\n                로그인\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n        <MobileNav />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground font-sans\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-6 pb-20\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-page-title\">\n              찜목록\n            </h1>\n            <p className=\"text-muted-foreground\">\n              관심 있는 제품들을 확인해보세요\n            </p>\n          </div>\n          <Heart className=\"h-6 w-6 text-red-500\" />\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n            {Array.from({ length: 8 }).map((_, i) => (\n              <Card key={i} className=\"overflow-hidden\">\n                <Skeleton className=\"h-48 w-full\" />\n                <CardContent className=\"p-4 space-y-2\">\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                  <Skeleton className=\"h-8 w-full\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : !wishlist || (wishlist as any[])?.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Card className=\"max-w-md mx-auto\">\n              <CardContent className=\"pt-6\">\n                <Heart className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                <h2 className=\"text-xl font-bold mb-2\" data-testid=\"text-empty-title\">\n                  찜목록이 비어있습니다\n                </h2>\n                <p className=\"text-muted-foreground mb-4\">\n                  마음에 드는 제품을 찜해보세요!\n                </p>\n                <Button \n                  onClick={() => window.location.href = \"/products\"}\n                  data-testid=\"button-browse-products\"\n                >\n                  <ShoppingBag className=\"mr-2 h-4 w-4\" />\n                  제품 둘러보기\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n            {(wishlist as any[])?.map((item: Wishlist & { product: any }) => (\n              <div key={item.id} className=\"relative group\">\n                <ProductCard \n                  product={item.product}\n                />\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\"\n                  onClick={() => removeFromWishlistMutation.mutate(item.productId)}\n                  disabled={removeFromWishlistMutation.isPending}\n                  data-testid={`button-remove-wishlist-${item.productId}`}\n                >\n                  <Heart className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <MobileNav />\n    </div>\n  );\n}","size_bytes":5414},"client/src/components/kakao-chat-button.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { MessageCircle } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface KakaoChatButtonProps {\n  variant?: \"default\" | \"outline\" | \"ghost\" | \"destructive\" | \"secondary\";\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\";\n  className?: string;\n  productName?: string;\n  rentalPeriod?: string;\n}\n\nexport default function KakaoChatButton({ \n  variant = \"default\", \n  size = \"default\",\n  className = \"\",\n  productName,\n  rentalPeriod\n}: KakaoChatButtonProps) {\n  const handleKakaoChat = () => {\n    // 카카오톡 채널로 연결 (실제 채널 ID로 교체 필요)\n    let message = \"안녕하세요! 가전제품 렌탈 상담을 받고 싶습니다.\";\n    \n    if (productName) {\n      message += `\\n\\n관심 제품: ${productName}`;\n    }\n    if (rentalPeriod) {\n      message += `\\n렌탈 희망 기간: ${rentalPeriod}개월`;\n    }\n    \n    // 카카오톡 플러스친구 채팅방으로 이동\n    // 실제 운영시에는 카카오톡 채널의 실제 URL로 교체해야 함\n    const kakaoUrl = `https://open.kakao.com/o/상담채널ID`;\n    \n    // 모바일에서는 카카오톡 앱으로, 데스크톱에서는 웹 카카오톡으로\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    \n    if (isMobile) {\n      // 모바일에서 카카오톡 앱 실행 시도\n      window.location.href = `kakaoplus://plusfriend/chat/_xeUxjxl`;\n      // 앱이 없는 경우를 대비해 웹 버전으로 대체\n      setTimeout(() => {\n        window.open(kakaoUrl, '_blank');\n      }, 1000);\n    } else {\n      // 데스크톱에서는 바로 웹 버전 카카오톡으로\n      window.open(kakaoUrl, '_blank');\n    }\n  };\n\n  return (\n    <motion.div\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n    >\n      <Button \n        onClick={handleKakaoChat}\n        variant={variant}\n        size={size}\n        className={`bg-[#FEE500] hover:bg-[#FDD835] text-black border-0 ${className}`}\n        data-testid=\"button-kakao-chat\"\n      >\n        <motion.div\n          animate={{ rotate: [0, 10, 0, -10, 0] }}\n          transition={{ repeat: Infinity, duration: 2, ease: \"easeInOut\" }}\n        >\n          <MessageCircle className=\"h-4 w-4 mr-2\" />\n        </motion.div>\n        카카오 상담\n      </Button>\n    </motion.div>\n  );\n}","size_bytes":2454},"client/src/components/PageTransition.tsx":{"content":"/**\n * PageTransition 컴포넌트\n * 렌탈리움의 브랜드에 맞는 페이지 전환 효과를 제공\n */\n\nimport { motion, AnimatePresence, MotionConfig } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\nimport { useRef, useEffect } from \"react\";\nimport { \n  getPageVariant, \n  pageVariants, \n  reducedMotionVariants,\n  motionTokens \n} from \"@/lib/motion\";\n\ninterface PageTransitionProps {\n  children: React.ReactNode;\n}\n\nexport default function PageTransition({ children }: PageTransitionProps) {\n  const [location] = useLocation();\n  const previousPathRef = useRef<string>('/');\n\n  // 이전 경로 추적 - 렌더링 중에 올바른 이전 경로 확보\n  useEffect(() => {\n    previousPathRef.current = location;\n  }, [location]);\n\n  // 현재 전환에 적합한 변형 선택\n  const variantKey = getPageVariant(previousPathRef.current, location);\n  const variants = pageVariants[variantKey];\n\n  return (\n    <MotionConfig reducedMotion=\"user\">\n      <AnimatePresence mode=\"wait\" initial={false}>\n        <motion.div\n          key={location}\n          initial=\"initial\"\n          animate=\"animate\"\n          exit=\"exit\"\n          variants={variants}\n          className=\"page-transition-container\"\n          style={{\n            // GPU 가속을 위한 will-change 최적화\n            willChange: 'transform, opacity',\n            // 레이아웃 시프트 방지\n            minHeight: '100vh',\n          }}\n        >\n          {children}\n        </motion.div>\n      </AnimatePresence>\n    </MotionConfig>\n  );\n}\n\n/**\n * 페이지 컴포넌트에서 사용할 수 있는 공통 스타일드 래퍼\n * 일관된 페이지 레이아웃과 모션 최적화를 제공\n */\nexport function PageWrapper({ \n  children, \n  className = \"\",\n  withPadding = true \n}: { \n  children: React.ReactNode;\n  className?: string;\n  withPadding?: boolean;\n}) {\n  return (\n    <div \n      className={`\n        relative \n        min-h-screen \n        ${withPadding ? 'pb-20 md:pb-6' : ''} \n        ${className}\n      `}\n      style={{\n        // 모션 최적화\n        transform: 'translateZ(0)', // 하드웨어 가속 강제\n        backfaceVisibility: 'hidden', // 플리커링 방지\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n\n/**\n * 공유 요소 전환을 위한 헬퍼 컴포넌트\n * 제품 이미지 등에서 사용\n */\nexport function SharedElement({\n  layoutId,\n  children,\n  className = \"\",\n  ...props\n}: {\n  layoutId: string;\n  children: React.ReactNode;\n  className?: string;\n  [key: string]: any;\n}) {\n  return (\n    <motion.div\n      layoutId={layoutId}\n      className={className}\n      transition={{\n        duration: motionTokens.durations.slow / 1000,\n        ease: motionTokens.easing.smooth,\n      }}\n      style={{\n        willChange: 'transform',\n      }}\n      {...props}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\n/**\n * 채팅 메시지용 스태거링 컨테이너\n */\nexport function ChatStaggerContainer({ \n  children \n}: { \n  children: React.ReactNode \n}) {\n  return (\n    <motion.div\n      initial=\"initial\"\n      animate=\"animate\"\n      variants={{\n        initial: {},\n        animate: {\n          transition: {\n            staggerChildren: motionTokens.durations.chat / 1000,\n            delayChildren: 0.1,\n          }\n        }\n      }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\n/**\n * 개별 채팅 메시지 아이템\n */\nexport function ChatStaggerItem({ \n  children,\n  delay = 0\n}: { \n  children: React.ReactNode;\n  delay?: number;\n}) {\n  return (\n    <motion.div\n      variants={{\n        initial: { \n          opacity: 0, \n          y: 10, \n          scale: 0.95 \n        },\n        animate: { \n          opacity: 1, \n          y: 0, \n          scale: 1,\n          transition: {\n            delay,\n            duration: motionTokens.durations.fast / 1000,\n            ease: motionTokens.easing.smooth,\n          }\n        },\n      }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\n/**\n * 관리자 페이지용 효율적인 카드 애니메이션\n */\nexport function AdminCard({ \n  children,\n  index = 0,\n  className = \"\"\n}: { \n  children: React.ReactNode;\n  index?: number;\n  className?: string;\n}) {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 8 }}\n      animate={{ \n        opacity: 1, \n        y: 0,\n        transition: {\n          delay: index * 0.05, // 미묘한 스태거링\n          duration: motionTokens.durations.fast / 1000,\n          ease: motionTokens.easing.linear,\n        }\n      }}\n      className={className}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\n/**\n * 제품 카드용 호버 효과가 있는 모션 래퍼\n */\nexport function ProductCardMotion({ \n  children,\n  className = \"\",\n  ...props\n}: { \n  children: React.ReactNode;\n  className?: string;\n  [key: string]: any;\n}) {\n  return (\n    <motion.div\n      whileHover={{ \n        scale: 1.02,\n        y: -2,\n        transition: {\n          duration: motionTokens.durations.fast / 1000,\n          ease: motionTokens.easing.smooth,\n        }\n      }}\n      whileTap={{ \n        scale: 0.98,\n        transition: {\n          duration: 0.1,\n          ease: motionTokens.easing.linear,\n        }\n      }}\n      className={className}\n      style={{\n        willChange: 'transform',\n      }}\n      {...props}\n    >\n      {children}\n    </motion.div>\n  );\n}","size_bytes":5319},"client/src/lib/motion.ts":{"content":"/**\n * 렌탈리움 모션 시스템\n * 브랜드에 맞는 세련되고 효율적인 페이지 전환 효과\n */\n\n// 모션 토큰 - 일관성 있는 애니메이션을 위한 기본값들\nexport const motionTokens = {\n  // 지속 시간 (ms)\n  durations: {\n    fast: 200,        // 버튼 호버, 작은 요소\n    normal: 280,      // 일반적인 페이지 전환\n    slow: 320,        // 복잡한 레이아웃 변화\n    chat: 40,         // 채팅 메시지 스태거링\n  },\n\n  // 이징 커브 - 브랜드 톤에 맞는 부드러운 움직임\n  easing: {\n    // 기본 전환용 - 자연스럽고 부드러운\n    smooth: [0.22, 1, 0.36, 1] as const,\n    // 팝업, 등장 효과용 - 약간의 탄성\n    bounce: [0.68, -0.55, 0.265, 1.55] as const,\n    // 슬라이드 전환용 - 일정한 속도\n    linear: [0.25, 0.46, 0.45, 0.94] as const,\n    // 퇴장 효과용 - 빠른 가속\n    exit: [0.4, 0, 1, 1] as const,\n  },\n\n  // 변형 값들 - 브랜드에 맞는 세련된 모션\n  transforms: {\n    slideDistance: 24,    // 슬라이드 거리 (px)\n    fadeOffset: 20,       // 페이드 업 오프셋 (px)\n    scaleSubtle: 0.98,    // 미묘한 스케일 변화\n    scaleHero: 1.02,      // 히어로 요소 강조\n    scaleButton: 1.03,    // 버튼 호버 확대\n    scalePress: 0.97,     // 버튼 누름 축소\n    scaleCategory: 1.04,  // 카테고리 타일 호버 확대\n    scaleLift: 1.01,      // 카드 리프트 효과\n    elevationSubtle: -2,  // 미묘한 Y축 이동\n    elevationCard: -8,    // 카드 호버 Y축 이동\n  },\n\n  // 그림자 효과 - elevation에 맞는 그림자 레벨 (boxShadow 애니메이션 문제 해결)\n  shadows: {\n    none: \"0 0 0 0 rgba(0, 0, 0, 0)\",\n    subtle: \"0 1px 2px 0 rgba(0, 0, 0, 0.05)\",\n    card: \"0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1)\",\n    elevated: \"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1)\",\n    strong: \"0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1)\",\n  },\n};\n\n// 페이지 가중치 - 슬라이드 방향 계산용\nexport const routeWeights: Record<string, number> = {\n  '/': 0,           // Landing\n  '/home': 1,       // Home\n  '/products': 2,   // Products List\n  '/chat': 3,       // Chat\n  '/admin': 4,      // Admin\n  // ProductDetail은 동적이므로 별도 처리\n};\n\n// 페이지별 전환 효과 변형들\nexport const pageVariants = {\n  // Landing → Home: 따뜻한 환영 효과\n  warmFadeUp: {\n    initial: { \n      opacity: 0, \n      y: motionTokens.transforms.fadeOffset,\n      scale: motionTokens.transforms.scaleSubtle \n    },\n    animate: { \n      opacity: 1, \n      y: 0, \n      scale: 1,\n      transition: {\n        duration: motionTokens.durations.normal / 1000,\n        ease: motionTokens.easing.smooth,\n      }\n    },\n    exit: { \n      opacity: 0, \n      y: -motionTokens.transforms.fadeOffset,\n      transition: {\n        duration: motionTokens.durations.fast / 1000,\n        ease: motionTokens.easing.exit,\n      }\n    },\n  },\n\n  // Home ↔ Products: 방향성 있는 슬라이드\n  slideForward: {\n    initial: { \n      opacity: 0, \n      x: motionTokens.transforms.slideDistance \n    },\n    animate: { \n      opacity: 1, \n      x: 0,\n      transition: {\n        duration: motionTokens.durations.normal / 1000,\n        ease: motionTokens.easing.smooth,\n      }\n    },\n    exit: { \n      opacity: 0, \n      x: -motionTokens.transforms.slideDistance,\n      transition: {\n        duration: motionTokens.durations.fast / 1000,\n        ease: motionTokens.easing.exit,\n      }\n    },\n  },\n\n  slideBackward: {\n    initial: { \n      opacity: 0, \n      x: -motionTokens.transforms.slideDistance \n    },\n    animate: { \n      opacity: 1, \n      x: 0,\n      transition: {\n        duration: motionTokens.durations.normal / 1000,\n        ease: motionTokens.easing.smooth,\n      }\n    },\n    exit: { \n      opacity: 0, \n      x: motionTokens.transforms.slideDistance,\n      transition: {\n        duration: motionTokens.durations.fast / 1000,\n        ease: motionTokens.easing.exit,\n      }\n    },\n  },\n\n  // ProductDetail: 확대/드릴다운 효과 (이미지는 layoutId로 별도 처리)\n  drillDown: {\n    initial: { \n      opacity: 0, \n      scale: motionTokens.transforms.scaleSubtle,\n      y: motionTokens.transforms.fadeOffset \n    },\n    animate: { \n      opacity: 1, \n      scale: 1, \n      y: 0,\n      transition: {\n        duration: motionTokens.durations.slow / 1000,\n        ease: motionTokens.easing.smooth,\n      }\n    },\n    exit: { \n      opacity: 0, \n      scale: motionTokens.transforms.scaleSubtle,\n      transition: {\n        duration: motionTokens.durations.fast / 1000,\n        ease: motionTokens.easing.exit,\n      }\n    },\n  },\n\n  // Chat: 대화형 팝업 효과\n  chatPopup: {\n    initial: { \n      opacity: 0, \n      scale: motionTokens.transforms.scaleSubtle,\n      y: motionTokens.transforms.fadeOffset \n    },\n    animate: { \n      opacity: 1, \n      scale: 1, \n      y: 0,\n      transition: {\n        duration: motionTokens.durations.normal / 1000,\n        ease: motionTokens.easing.bounce,\n      }\n    },\n    exit: { \n      opacity: 0, \n      scale: motionTokens.transforms.scaleSubtle,\n      transition: {\n        duration: motionTokens.durations.fast / 1000,\n        ease: motionTokens.easing.exit,\n      }\n    },\n  },\n\n  // Admin: 전문적이고 효율적인 미니멀 전환\n  minimal: {\n    initial: { \n      opacity: 0, \n      y: 8 \n    },\n    animate: { \n      opacity: 1, \n      y: 0,\n      transition: {\n        duration: motionTokens.durations.fast / 1000,\n        ease: motionTokens.easing.linear,\n      }\n    },\n    exit: { \n      opacity: 0,\n      transition: {\n        duration: motionTokens.durations.fast / 1000,\n        ease: motionTokens.easing.exit,\n      }\n    },\n  },\n};\n\n// 전환 방향 계산 헬퍼\nexport function getTransitionDirection(fromPath: string, toPath: string): 'forward' | 'backward' | 'none' {\n  // ProductDetail 특별 처리\n  if (toPath.startsWith('/products/') && fromPath === '/products') {\n    return 'forward'; // Products → ProductDetail\n  }\n  if (fromPath.startsWith('/products/') && toPath === '/products') {\n    return 'backward'; // ProductDetail → Products\n  }\n\n  // 일반적인 경로 가중치 비교\n  const fromWeight = routeWeights[fromPath] ?? -1;\n  const toWeight = routeWeights[toPath] ?? -1;\n\n  if (fromWeight === -1 || toWeight === -1) return 'none';\n  \n  return toWeight > fromWeight ? 'forward' : 'backward';\n}\n\n// 페이지별 변형 선택 헬퍼\nexport function getPageVariant(fromPath: string, toPath: string): keyof typeof pageVariants {\n  // Landing → Home\n  if (fromPath === '/' && toPath === '/home') {\n    return 'warmFadeUp';\n  }\n\n  // Home ↔ Products\n  if ((fromPath === '/home' && toPath === '/products') || \n      (fromPath === '/products' && toPath === '/home')) {\n    const direction = getTransitionDirection(fromPath, toPath);\n    return direction === 'forward' ? 'slideForward' : 'slideBackward';\n  }\n\n  // Products → ProductDetail\n  if (fromPath === '/products' && toPath.startsWith('/products/')) {\n    return 'drillDown';\n  }\n\n  // ProductDetail → Products  \n  if (fromPath.startsWith('/products/') && toPath === '/products') {\n    return 'slideBackward';\n  }\n\n  // Chat 페이지\n  if (toPath === '/chat') {\n    return 'chatPopup';\n  }\n\n  // Admin 페이지\n  if (toPath === '/admin') {\n    return 'minimal';\n  }\n\n  // 기본값: 부드러운 페이드\n  return 'warmFadeUp';\n}\n\n// 채팅 메시지 스태거링용 헬퍼\nexport function getChatStaggerVariants(index: number) {\n  return {\n    initial: { opacity: 0, y: 10, scale: 0.95 },\n    animate: { \n      opacity: 1, \n      y: 0, \n      scale: 1,\n      transition: {\n        delay: index * (motionTokens.durations.chat / 1000),\n        duration: motionTokens.durations.fast / 1000,\n        ease: motionTokens.easing.smooth,\n      }\n    },\n  };\n}\n\n// 인터랙티브 요소 변형들 - 버튼, 카드, 타일 등에 사용\nexport const interactiveVariants = {\n  // 버튼 호버/누름 효과\n  buttonHover: {\n    scale: motionTokens.transforms.scaleButton,\n    y: motionTokens.transforms.elevationSubtle,\n    boxShadow: motionTokens.shadows.card,\n    transition: {\n      type: \"spring\",\n      stiffness: 400,\n      damping: 17,\n      duration: motionTokens.durations.fast / 1000,\n    }\n  },\n  buttonPress: {\n    scale: motionTokens.transforms.scalePress,\n    y: 0,\n    transition: {\n      type: \"spring\", \n      stiffness: 600,\n      damping: 12,\n      duration: motionTokens.durations.fast / 1000,\n    }\n  },\n\n  // 카테고리 타일 호버 효과\n  categoryHover: {\n    scale: motionTokens.transforms.scaleCategory,\n    y: motionTokens.transforms.elevationSubtle,\n    boxShadow: motionTokens.shadows.elevated,\n    transition: {\n      type: \"spring\",\n      stiffness: 300,\n      damping: 20,\n      duration: motionTokens.durations.fast / 1000,\n    }\n  },\n  categoryPress: {\n    scale: motionTokens.transforms.scalePress,\n    transition: {\n      type: \"spring\",\n      stiffness: 500,\n      damping: 15,\n      duration: motionTokens.durations.fast / 1000,\n    }\n  },\n\n  // 제품 카드 리프트 효과\n  cardHover: {\n    scale: motionTokens.transforms.scaleLift,\n    y: motionTokens.transforms.elevationCard,\n    boxShadow: motionTokens.shadows.elevated,\n    transition: {\n      type: \"spring\",\n      stiffness: 260,\n      damping: 20,\n      duration: motionTokens.durations.normal / 1000,\n    }\n  },\n  cardPress: {\n    scale: 0.99,\n    y: motionTokens.transforms.elevationSubtle,\n    transition: {\n      type: \"spring\",\n      stiffness: 400,\n      damping: 10,\n      duration: motionTokens.durations.fast / 1000,\n    }\n  },\n\n  // 주의를 끄는 펄스 효과\n  attentionPulse: {\n    scale: [1, 1.02, 1],\n    transition: {\n      repeat: Infinity,\n      duration: 2,\n      ease: motionTokens.easing.smooth,\n    }\n  },\n\n  // 이미지 줌 효과 (제품 카드 내 이미지용)\n  imageZoom: {\n    scale: motionTokens.transforms.scaleHero,\n    transition: {\n      duration: motionTokens.durations.normal / 1000,\n      ease: motionTokens.easing.smooth,\n    }\n  },\n};\n\n// 스프링 프리셋 - 브랜드 톤에 맞는 탄성 설정\nexport const springPresets = {\n  // 부드럽고 자연스러운 (기본)\n  gentle: {\n    type: \"spring\" as const,\n    stiffness: 260,\n    damping: 20,\n  },\n  // 빠르고 반응적인 (버튼, 소형 요소)\n  snappy: {\n    type: \"spring\" as const,\n    stiffness: 400,\n    damping: 17,\n  },\n  // 탄성이 있는 (등장 효과)\n  bouncy: {\n    type: \"spring\" as const,\n    stiffness: 300,\n    damping: 10,\n  },\n  // 매우 부드러운 (카드, 레이아웃)\n  smooth: {\n    type: \"spring\" as const,\n    stiffness: 200,\n    damping: 25,\n  },\n};\n\n// Reduced Motion 지원\nexport const reducedMotionVariants = {\n  initial: { opacity: 0 },\n  animate: { \n    opacity: 1,\n    transition: { duration: 0.1 }\n  },\n  exit: { \n    opacity: 0,\n    transition: { duration: 0.1 }\n  },\n};","size_bytes":10980},"client/src/pages/admin.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Settings, Users, Package, BarChart3, MessageCircle, LogOut, Plus, Upload, Eye, Edit, Trash2, Check, X, Image, FileText, Save, RotateCcw } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { motion } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState, useEffect } from \"react\";\n\n// 구조화된 제품 업로드 폼 스키마 (레퍼런스 앱 패턴 적용)\nconst productFormSchema = z.object({\n  nameKo: z.string().min(1, \"제품명(한국어)을 입력해주세요\"),\n  name: z.string().min(1, \"제품명(영어)을 입력해주세요\"),\n  brand: z.string().min(1, \"브랜드를 입력해주세요\"),\n  categoryId: z.string().min(1, \"카테고리를 선택해주세요\"),\n  descriptionKo: z.string().min(10, \"제품 설명을 10자 이상 입력해주세요\"),\n  monthlyPrice: z.string().min(1, \"기본 월 렌탈료를 입력해주세요\"),\n  originalPrice: z.string().optional(),\n  imageUrl: z.string().min(1, \"제품 이미지를 업로드해주세요\"),\n  rating: z.number().min(0).max(5).default(4.5),\n  // 구조화된 스펙 정보\n  modelNumber: z.string().optional(),\n  maker: z.string().optional(),\n  type: z.string().optional(),\n  releaseYear: z.string().optional(),\n  dimensions: z.string().optional(),\n  // 렌탈/관리 옵션\n  rentalOptions: z.array(z.object({\n    months: z.number().min(1),\n    monthlyPrice: z.number().min(0),\n  })).default([]),\n  maintenanceOptions: z.array(z.object({\n    months: z.number().min(1),\n    additionalFee: z.number().min(0),\n    description: z.string().min(1),\n  })).default([]),\n  // 색상/기능/태그\n  colors: z.array(z.object({\n    id: z.string(),\n    name: z.string(),\n    hex: z.string(),\n  })).default([]),\n  functions: z.array(z.string()).default([]),\n  tags: z.array(z.string()).default([]),\n  extraFeatures: z.array(z.string()).default([]),\n  // 서비스 정보\n  maintenanceDesc: z.string().optional(),\n  warranty: z.string().optional(),\n  installLeadTime: z.string().optional(),\n});\n\ntype ProductFormData = z.infer<typeof productFormSchema>;\n\n// Draft 편집 폼 스키마 \nconst editDraftSchema = z.object({\n  nameKo: z.string().min(1, \"제품명(한국어)을 입력해주세요\"),\n  name: z.string().optional(),\n  brand: z.string().min(1, \"브랜드를 입력해주세요\"),\n  categoryId: z.string().optional(), // categoryId를 optional로 변경\n  descriptionKo: z.string().optional(),\n  monthlyPrice: z.number().min(0, \"월 렌탈료를 입력해주세요\"),\n  originalPrice: z.number().optional(),\n  imageUrl: z.string().optional(),\n  rating: z.number().min(0).max(5).optional(),\n});\n\ntype EditDraftFormData = z.infer<typeof editDraftSchema>;\n\nexport default function AdminPage() {\n  const [, navigate] = useLocation();\n  const [showProductForm, setShowProductForm] = useState(false);\n  const [uploadingImage, setUploadingImage] = useState(false);\n  const [dragActive, setDragActive] = useState(false);\n  const [uploadingExcel, setUploadingExcel] = useState(false);\n  const [excelResults, setExcelResults] = useState<any>(null);\n  \n  // Imports 탭 상태 관리\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [selectedDrafts, setSelectedDrafts] = useState<string[]>([]);\n  const [editingDraft, setEditingDraft] = useState<any>(null);\n  \n  const { toast } = useToast();\n\n  const handleLogout = () => {\n    navigate(\"/home\");\n  };\n\n  // Excel 파일 선택 처리\n  const handleExcelFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setUploadingExcel(true);\n    setExcelResults(null);\n\n    try {\n      const formData = new FormData();\n      formData.append('excel', file);\n\n      const response = await fetch('/api/upload/excel-products', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        throw new Error('Excel 파일 업로드에 실패했습니다.');\n      }\n\n      const result = await response.json();\n      setExcelResults(result.data);\n\n      toast({\n        title: \"Excel 파싱 완료\",\n        description: `${result.data.stats.successfullyParsed}개 제품이 성공적으로 파싱되었습니다.`,\n      });\n\n    } catch (error) {\n      console.error('Excel upload error:', error);\n      toast({\n        title: \"Excel 업로드 실패\",\n        description: error instanceof Error ? error.message : \"알 수 없는 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploadingExcel(false);\n      // 파일 input 초기화\n      event.target.value = '';\n    }\n  };\n\n  // 제품 초안 저장 처리  \n  const handleSaveDrafts = async () => {\n    if (!excelResults?.drafts?.length) return;\n\n    try {\n      const response = await fetch('/api/drafts', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ drafts: excelResults.drafts }),\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Draft 저장에 실패했습니다.');\n      }\n\n      const savedDrafts = await response.json();\n      \n      toast({\n        title: \"Draft 저장 완료\",\n        description: `${savedDrafts.length}개의 제품 초안이 저장되었습니다.`,\n      });\n      \n      // Clear Excel results after successful save\n      setExcelResults(null);\n      \n      // Refresh the drafts query if we're on the imports tab\n      queryClient.invalidateQueries({ queryKey: ['/api/drafts'] });\n      \n    } catch (error) {\n      console.error('Save drafts error:', error);\n      toast({\n        title: \"저장 실패\",\n        description: error instanceof Error ? error.message : \"제품 초안 저장 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // 카테고리 조회\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<any[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  // Draft 목록 조회 (Imports 탭용)\n  // Monthly Merge State\n  const [mergeResults, setMergeResults] = useState<any>(null);\n  const [showMergeResults, setShowMergeResults] = useState(false);\n\n  const { data: drafts = [], isLoading: draftsLoading, refetch: refetchDrafts } = useQuery<any[]>({\n    queryKey: ['/api/drafts', { status: statusFilter !== 'all' ? statusFilter : undefined }],\n    enabled: statusFilter !== undefined,\n  });\n\n  // Draft 승인 뮤테이션\n  const approveDraftMutation = useMutation({\n    mutationFn: async (draftId: string) => {\n      const response = await fetch(`/api/drafts/${draftId}/approve`, {\n        method: 'POST',\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Draft 승인에 실패했습니다.');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Draft 승인 완료\",\n        description: `\"${data.product?.nameKo || 'Unknown'}\" 제품이 생성되었습니다.`,\n      });\n      refetchDrafts();\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"승인 실패\",\n        description: error.message || \"Draft 승인 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Draft 삭제 뮤테이션\n  const deleteDraftMutation = useMutation({\n    mutationFn: async (draftId: string) => {\n      const response = await fetch(`/api/drafts/${draftId}`, {\n        method: 'DELETE',\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Draft 삭제에 실패했습니다.');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Draft 삭제 완료\",\n        description: \"제품 초안이 삭제되었습니다.\",\n      });\n      refetchDrafts();\n      setSelectedDrafts(prev => prev.filter(id => !prev.includes(id)));\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"삭제 실패\",\n        description: error.message || \"Draft 삭제 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Draft 편집 뮤테이션\n  const editDraftMutation = useMutation({\n    mutationFn: async ({ draftId, data }: { draftId: string, data: EditDraftFormData }) => {\n      console.log('Editing draft:', draftId, data); // Debug log\n      const response = await fetch(`/api/drafts/${draftId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Edit failed:', errorData); // Debug log\n        throw new Error(errorData.message || 'Draft 편집에 실패했습니다.');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Draft 편집 완료\",\n        description: \"제품 초안이 성공적으로 수정되었습니다.\",\n      });\n      refetchDrafts();\n      setEditingDraft(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"편집 실패\",\n        description: error.message || \"Draft 편집 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Monthly Merge Mutation\n  const monthlyMergeMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/imports/merge', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ drafts }),\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || '월간 병합에 실패했습니다.');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      console.log('Merge results:', data); // Debug log\n      setMergeResults(data);\n      setShowMergeResults(true);\n      \n      const { results } = data;\n      const summary = results?.summary;\n      \n      toast({\n        title: \"월간 병합 완료\",\n        description: `처리: ${summary?.processed || 0}, 업데이트: ${summary?.updated || 0}, 신규: ${summary?.created || 0}`,\n      });\n      \n      // Refresh data\n      refetchDrafts();\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n    },\n    onError: (error: any) => {\n      console.error('Merge failed:', error);\n      toast({\n        title: \"병합 실패\",\n        description: error.message || \"월간 병합 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete All Drafts Mutation\n  const deleteAllDraftsMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest('DELETE', '/api/drafts');\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"초안 모두 삭제 완료\",\n        description: `${data.deletedCount}개의 초안이 삭제되었습니다.`,\n      });\n      \n      // Refresh data using queryClient\n      queryClient.invalidateQueries({ queryKey: ['/api/drafts'] });\n      setSelectedDrafts([]);\n      setShowMergeResults(false);\n      setMergeResults(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"삭제 실패\",\n        description: error.message || \"모든 초안 삭제 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // 제품 업로드 폼\n  const form = useForm<ProductFormData>({\n    resolver: zodResolver(productFormSchema),\n    defaultValues: {\n      nameKo: \"\",\n      name: \"\",\n      brand: \"\",\n      categoryId: \"\",\n      descriptionKo: \"\",\n      monthlyPrice: \"\",\n      originalPrice: \"\",\n      imageUrl: \"\",\n      rating: 4.5,\n      modelNumber: \"\",\n      maker: \"\",\n      type: \"\",\n      releaseYear: new Date().getFullYear().toString(),\n      dimensions: \"\",\n      rentalOptions: [{ months: 12, monthlyPrice: 0 }],\n      maintenanceOptions: [{ months: 1, additionalFee: 0, description: \"매월 관리\" }],\n      colors: [],\n      functions: [],\n      tags: [],\n      extraFeatures: [],\n      maintenanceDesc: \"\",\n      warranty: \"\",\n      installLeadTime: \"\",\n    },\n  });\n\n  // Draft 편집 폼\n  const editForm = useForm<EditDraftFormData>({\n    resolver: zodResolver(editDraftSchema),\n    defaultValues: {\n      nameKo: \"\",\n      name: \"\",\n      brand: \"\",\n      categoryId: \"\",\n      descriptionKo: \"\",\n      monthlyPrice: 0,\n      originalPrice: 0,\n      imageUrl: \"\",\n      rating: 4.5,\n    },\n  });\n\n  // 편집할 draft가 변경될 때 폼 값 설정\n  useEffect(() => {\n    if (editingDraft) {\n      console.log('EditingDraft:', editingDraft);\n      console.log('EditingDraft rating:', editingDraft.rating, 'type:', typeof editingDraft.rating);\n      \n      const ratingValue = editingDraft.rating ? Number(editingDraft.rating) : 4.5;\n      console.log('Setting rating to:', ratingValue, 'type:', typeof ratingValue);\n      \n      editForm.reset({\n        nameKo: editingDraft.nameKo || \"\",\n        name: editingDraft.name || \"\",\n        brand: editingDraft.brand || \"\",\n        categoryId: editingDraft.categoryId || \"\",\n        descriptionKo: editingDraft.descriptionKo || \"\",\n        monthlyPrice: editingDraft.monthlyPrice || 0,\n        originalPrice: editingDraft.originalPrice || 0,\n        imageUrl: editingDraft.imageUrl || \"\",\n        rating: ratingValue,\n      });\n    }\n  }, [editingDraft, editForm]);\n\n  const onEditSubmit = (data: EditDraftFormData) => {\n    console.log('Form submit triggered!', data); // Debug log\n    console.log('Form errors:', editForm.formState.errors); // Debug validation errors\n    if (editingDraft) {\n      console.log('Submitting edit for draft:', editingDraft.id); // Debug log\n      editDraftMutation.mutate({ draftId: editingDraft.id, data });\n    } else {\n      console.error('No editing draft selected'); // Debug log\n    }\n  };\n\n  // 이미지 업로드 함수\n  const uploadImage = async (file: File): Promise<string> => {\n    const formData = new FormData();\n    formData.append('image', file);\n\n    setUploadingImage(true);\n    try {\n      const response = await fetch('/api/upload/product-image', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        throw new Error('이미지 업로드에 실패했습니다.');\n      }\n\n      const data = await response.json();\n      return data.imageUrl;\n    } finally {\n      setUploadingImage(false);\n    }\n  };\n\n  // 제품 생성 뮤테이션\n  const createProductMutation = useMutation({\n    mutationFn: async (data: ProductFormData) => {\n      // specifications JSON 구성\n      const specifications = {\n        features: data.functions || [],\n        colors: data.colors || [],\n        functions: data.functions || [],\n        tags: data.tags || [],\n        basicInfo: {\n          modelNumber: data.modelNumber,\n          maker: data.maker,\n          type: data.type,\n          releaseYear: data.releaseYear,\n          dimensions: data.dimensions,\n        },\n        extraFeatures: data.extraFeatures || [],\n        serviceInfo: {\n          maintenanceDesc: data.maintenanceDesc,\n          warranty: data.warranty,\n          installLeadTime: data.installLeadTime,\n        },\n        rentalOptions: {\n          minimumPeriod: data.rentalOptions || [],\n          maintenanceCycle: data.maintenanceOptions || [],\n        },\n      };\n\n      const productData = {\n        nameKo: data.nameKo,\n        name: data.name,\n        brand: data.brand,\n        categoryId: data.categoryId,\n        descriptionKo: data.descriptionKo,\n        monthlyPrice: data.monthlyPrice,\n        // Send undefined instead of null for optional fields to match Drizzle-Zod expectations\n        ...(data.originalPrice && { originalPrice: data.originalPrice }),\n        imageUrl: data.imageUrl,\n        rating: data.rating,\n        specifications,\n      };\n\n      return await apiRequest('POST', '/api/products', productData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"제품 업로드 성공\",\n        description: \"새 제품이 성공적으로 등록되었습니다.\",\n      });\n      form.reset();\n      setShowProductForm(false);\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"제품 업로드 실패\", \n        description: error.message || \"제품 등록 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ProductFormData) => {\n    createProductMutation.mutate(data);\n  };\n\n  const stats = [\n    { title: \"전체 사용자\", value: \"1,234\", icon: Users, color: \"text-blue-600\" },\n    { title: \"총 제품\", value: \"456\", icon: Package, color: \"text-green-600\" },\n    { title: \"활성 대여\", value: \"89\", icon: BarChart3, color: \"text-orange-600\" },\n    { title: \"금월 상담\", value: \"167\", icon: MessageCircle, color: \"text-purple-600\" }\n  ];\n\n  const recentUsers = [\n    { id: 1, name: \"김철수\", email: \"kim@example.com\", joinDate: \"2024-01-15\", status: \"active\" },\n    { id: 2, name: \"이영희\", email: \"lee@example.com\", joinDate: \"2024-01-14\", status: \"active\" },\n    { id: 3, name: \"박민수\", email: \"park@example.com\", joinDate: \"2024-01-13\", status: \"inactive\" },\n  ];\n\n  const recentRentals = [\n    { id: 1, user: \"김철수\", product: \"삼성 냉장고\", status: \"active\", startDate: \"2024-01-10\" },\n    { id: 2, user: \"이영희\", product: \"LG 세탁기\", status: \"pending\", startDate: \"2024-01-12\" },\n    { id: 3, user: \"박민수\", product: \"다이슨 청소기\", status: \"completed\", startDate: \"2023-12-01\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <motion.div \n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"flex items-center justify-between mb-8\"\n        >\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"admin-title\">\n              렌탈리움 관리자\n            </h1>\n            <p className=\"text-muted-foreground mt-1\">시스템 관리 및 모니터링</p>\n          </div>\n          <motion.div\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            <Button \n              onClick={handleLogout} \n              variant=\"outline\"\n              data-testid=\"button-admin-logout\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              로그아웃\n            </Button>\n          </motion.div>\n        </motion.div>\n\n        {/* Stats Cards */}\n        <motion.div \n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.1 }}\n          className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\"\n        >\n          {stats.map((stat, index) => (\n            <motion.div\n              key={stat.title}\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: index * 0.1 }}\n              whileHover={{ scale: 1.02 }}\n            >\n              <Card data-testid={`stat-card-${index}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">{stat.title}</p>\n                      <p className=\"text-2xl font-bold text-foreground\">{stat.value}</p>\n                    </div>\n                    <div className={`p-3 rounded-full bg-muted ${stat.color}`}>\n                      <stat.icon className=\"h-6 w-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          ))}\n        </motion.div>\n\n        {/* Main Content Tabs */}\n        <motion.div \n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n        >\n          <Tabs defaultValue=\"dashboard\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-7\">\n              <TabsTrigger value=\"dashboard\" data-testid=\"tab-dashboard\">\n                <BarChart3 className=\"h-4 w-4 mr-2\" />\n                대시보드\n              </TabsTrigger>\n              <TabsTrigger value=\"users\" data-testid=\"tab-users\">\n                <Users className=\"h-4 w-4 mr-2\" />\n                사용자\n              </TabsTrigger>\n              <TabsTrigger value=\"products\" data-testid=\"tab-products\">\n                <Package className=\"h-4 w-4 mr-2\" />\n                제품\n              </TabsTrigger>\n              <TabsTrigger value=\"imports\" data-testid=\"tab-imports\">\n                <Upload className=\"h-4 w-4 mr-2\" />\n                Imports\n              </TabsTrigger>\n              <TabsTrigger value=\"excel\" data-testid=\"tab-excel\">\n                <Upload className=\"h-4 w-4 mr-2\" />\n                Excel 업로드\n              </TabsTrigger>\n              <TabsTrigger value=\"rentals\" data-testid=\"tab-rentals\">\n                <MessageCircle className=\"h-4 w-4 mr-2\" />\n                대여\n              </TabsTrigger>\n              <TabsTrigger value=\"settings\" data-testid=\"tab-settings\">\n                <Settings className=\"h-4 w-4 mr-2\" />\n                설정\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"dashboard\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Card data-testid=\"recent-users-card\">\n                  <CardHeader>\n                    <CardTitle>최근 가입 사용자</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {recentUsers.map((user) => (\n                        <div key={user.id} className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"font-medium\">{user.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge variant={user.status === 'active' ? 'default' : 'secondary'}>\n                              {user.status === 'active' ? '활성' : '비활성'}\n                            </Badge>\n                            <p className=\"text-sm text-muted-foreground mt-1\">{user.joinDate}</p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card data-testid=\"recent-rentals-card\">\n                  <CardHeader>\n                    <CardTitle>최근 대여 현황</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {recentRentals.map((rental) => (\n                        <div key={rental.id} className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"font-medium\">{rental.product}</p>\n                            <p className=\"text-sm text-muted-foreground\">{rental.user}</p>\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge variant={\n                              rental.status === 'active' ? 'default' : \n                              rental.status === 'pending' ? 'secondary' : 'outline'\n                            }>\n                              {rental.status === 'active' ? '진행중' : \n                               rental.status === 'pending' ? '대기중' : '완료'}\n                            </Badge>\n                            <p className=\"text-sm text-muted-foreground mt-1\">{rental.startDate}</p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"users\">\n              <Card data-testid=\"users-management-card\">\n                <CardHeader>\n                  <CardTitle>사용자 관리</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">사용자 관리 기능이 곧 제공될 예정입니다.</p>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"products\" className=\"space-y-6\">\n              <Card data-testid=\"products-management-card\">\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <CardTitle>제품 관리</CardTitle>\n                  <motion.div\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Button\n                      onClick={() => setShowProductForm(!showProductForm)}\n                      data-testid=\"button-toggle-product-form\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      새 제품 추가\n                    </Button>\n                  </motion.div>\n                </CardHeader>\n                <CardContent>\n                  {showProductForm && (\n                    <motion.div\n                      initial={{ opacity: 0, height: 0 }}\n                      animate={{ opacity: 1, height: \"auto\" }}\n                      exit={{ opacity: 0, height: 0 }}\n                      className=\"border rounded-lg p-6 mb-6\"\n                    >\n                      <h3 className=\"text-lg font-semibold mb-4\">새 제품 등록</h3>\n                      <Form {...form}>\n                        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            {/* 제품명 (한국어) */}\n                            <FormField\n                              control={form.control}\n                              name=\"nameKo\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>제품명 (한국어) *</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"예: 아이콘 냉온정 정수기\" {...field} data-testid=\"input-name-ko\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            {/* 제품명 (영어) */}\n                            <FormField\n                              control={form.control}\n                              name=\"name\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>제품명 (영어) *</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"예: Icon Hot & Cold Water Purifier\" {...field} data-testid=\"input-name-en\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            {/* 브랜드 */}\n                            <FormField\n                              control={form.control}\n                              name=\"brand\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>브랜드 *</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"예: 코웨이\" {...field} data-testid=\"input-brand\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            {/* 카테고리 */}\n                            <FormField\n                              control={form.control}\n                              name=\"categoryId\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>카테고리 *</FormLabel>\n                                  <Select onValueChange={field.onChange} value={field.value}>\n                                    <FormControl>\n                                      <SelectTrigger data-testid=\"select-category\">\n                                        <SelectValue placeholder=\"카테고리를 선택하세요\" />\n                                      </SelectTrigger>\n                                    </FormControl>\n                                    <SelectContent>\n                                      {categories.map((category: any) => (\n                                        <SelectItem key={category.id} value={category.id}>\n                                          {category.nameKo}\n                                        </SelectItem>\n                                      ))}\n                                    </SelectContent>\n                                  </Select>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            {/* 모델명 */}\n                            <FormField\n                              control={form.control}\n                              name=\"modelNumber\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>모델명 *</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"예: CHP-721TN\" {...field} data-testid=\"input-model\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            {/* 출시년도 */}\n                            <FormField\n                              control={form.control}\n                              name=\"releaseYear\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>출시년도 *</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"예: 2024\" {...field} data-testid=\"input-year\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            {/* 월 렌탈료 */}\n                            <FormField\n                              control={form.control}\n                              name=\"monthlyPrice\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>월 렌탈료 (원) *</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"예: 14200\" type=\"number\" {...field} data-testid=\"input-monthly-price\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            {/* 원가 (선택사항) */}\n                            <FormField\n                              control={form.control}\n                              name=\"originalPrice\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>원가 (원)</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"예: 300000\" type=\"number\" {...field} data-testid=\"input-original-price\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n\n                          {/* 제품 크기 */}\n                          <FormField\n                            control={form.control}\n                            name=\"dimensions\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>제품 크기 *</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"예: 180 × 340 × 385mm (가로 × 세로 × 높이)\" {...field} data-testid=\"input-dimensions\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          {/* 제품 이미지 업로드 */}\n                          <FormField\n                            control={form.control}\n                            name=\"imageUrl\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>제품 이미지 *</FormLabel>\n                                <FormControl>\n                                  <div className=\"space-y-4\">\n                                    {field.value ? (\n                                      <div className=\"relative\">\n                                        <img \n                                          src={field.value} \n                                          alt=\"업로드된 제품 이미지\" \n                                          className=\"w-32 h-32 object-cover rounded-lg border\"\n                                        />\n                                        <Button\n                                          type=\"button\"\n                                          variant=\"outline\"\n                                          size=\"sm\"\n                                          onClick={() => field.onChange(\"\")}\n                                          className=\"mt-2\"\n                                          data-testid=\"button-remove-image\"\n                                        >\n                                          이미지 제거\n                                        </Button>\n                                      </div>\n                                    ) : (\n                                      <div\n                                        className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n                                          dragActive ? \"border-primary bg-primary/10\" : \"border-muted-foreground/25\"\n                                        }`}\n                                        onDragEnter={(e) => {\n                                          e.preventDefault();\n                                          setDragActive(true);\n                                        }}\n                                        onDragLeave={(e) => {\n                                          e.preventDefault();\n                                          setDragActive(false);\n                                        }}\n                                        onDragOver={(e) => e.preventDefault()}\n                                        onDrop={async (e) => {\n                                          e.preventDefault();\n                                          setDragActive(false);\n                                          const file = e.dataTransfer.files[0];\n                                          if (file && file.type.startsWith('image/')) {\n                                            try {\n                                              const imageUrl = await uploadImage(file);\n                                              field.onChange(imageUrl);\n                                              toast({\n                                                title: \"이미지 업로드 성공\",\n                                                description: \"제품 이미지가 업로드되었습니다.\",\n                                              });\n                                            } catch (error) {\n                                              toast({\n                                                title: \"이미지 업로드 실패\",\n                                                description: \"이미지 업로드 중 오류가 발생했습니다.\",\n                                                variant: \"destructive\",\n                                              });\n                                            }\n                                          }\n                                        }}\n                                      >\n                                        <Upload className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                                        <p className=\"text-sm text-muted-foreground mb-2\">\n                                          이미지를 드래그하여 놓거나 클릭하여 업로드\n                                        </p>\n                                        <Input\n                                          type=\"file\"\n                                          accept=\"image/*\"\n                                          className=\"hidden\"\n                                          onChange={async (e) => {\n                                            const file = e.target.files?.[0];\n                                            if (file) {\n                                              try {\n                                                const imageUrl = await uploadImage(file);\n                                                field.onChange(imageUrl);\n                                                toast({\n                                                  title: \"이미지 업로드 성공\",\n                                                  description: \"제품 이미지가 업로드되었습니다.\",\n                                                });\n                                              } catch (error) {\n                                                toast({\n                                                  title: \"이미지 업로드 실패\",\n                                                  description: \"이미지 업로드 중 오류가 발생했습니다.\",\n                                                  variant: \"destructive\",\n                                                });\n                                              }\n                                            }\n                                          }}\n                                          data-testid=\"input-image-file\"\n                                        />\n                                        <Button\n                                          type=\"button\"\n                                          variant=\"outline\"\n                                          disabled={uploadingImage}\n                                          onClick={() => {\n                                            document.querySelector<HTMLInputElement>('[data-testid=\"input-image-file\"]')?.click();\n                                          }}\n                                          data-testid=\"button-upload-image\"\n                                        >\n                                          {uploadingImage ? \"업로드 중...\" : \"파일 선택\"}\n                                        </Button>\n                                      </div>\n                                    )}\n                                  </div>\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          {/* 컬러 옵션 */}\n                          <div className=\"col-span-1 md:col-span-2\">\n                            <FormField\n                              control={form.control}\n                              name=\"colors\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>컬러 옵션</FormLabel>\n                                  <div className=\"space-y-2\">\n                                    {field.value.map((color, index) => (\n                                      <div key={index} className=\"flex items-center gap-2 p-2 border rounded-md\">\n                                        <div \n                                          className=\"w-6 h-6 rounded-full border\"\n                                          style={{ backgroundColor: color.hex }}\n                                        />\n                                        <span className=\"flex-1\">{color.name}</span>\n                                        <Button\n                                          type=\"button\"\n                                          variant=\"outline\"\n                                          size=\"sm\"\n                                          onClick={() => {\n                                            const newColors = field.value.filter((_, i) => i !== index);\n                                            field.onChange(newColors);\n                                          }}\n                                          data-testid={`button-remove-color-${index}`}\n                                        >\n                                          제거\n                                        </Button>\n                                      </div>\n                                    ))}\n                                    <div className=\"flex gap-2\">\n                                      <Input\n                                        placeholder=\"컬러명 (예: 화이트)\"\n                                        id=\"new-color-name\"\n                                        data-testid=\"input-new-color-name\"\n                                      />\n                                      <Input\n                                        type=\"color\"\n                                        id=\"new-color-hex\"\n                                        className=\"w-16\"\n                                        data-testid=\"input-new-color-hex\"\n                                      />\n                                      <Button\n                                        type=\"button\"\n                                        variant=\"outline\"\n                                        onClick={() => {\n                                          const nameInput = document.getElementById('new-color-name') as HTMLInputElement;\n                                          const hexInput = document.getElementById('new-color-hex') as HTMLInputElement;\n                                          if (nameInput.value && hexInput.value) {\n                                            const newColor = {\n                                              id: nameInput.value.toLowerCase().replace(/\\s+/g, '-'),\n                                              name: nameInput.value,\n                                              hex: hexInput.value,\n                                            };\n                                            field.onChange([...field.value, newColor]);\n                                            nameInput.value = '';\n                                            hexInput.value = '#000000';\n                                          }\n                                        }}\n                                        data-testid=\"button-add-color\"\n                                      >\n                                        추가\n                                      </Button>\n                                    </div>\n                                  </div>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n\n                          {/* 주요 기능 */}\n                          <div className=\"col-span-1 md:col-span-2\">\n                            <FormField\n                              control={form.control}\n                              name=\"functions\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>주요 기능</FormLabel>\n                                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                                    {['냉수', '온수', '정수', 'UV 살균', '얼음 제조', 'IoT 기능', '자동 청소', '절전 모드'].map((func) => (\n                                      <div key={func} className=\"flex items-center space-x-2\">\n                                        <input\n                                          type=\"checkbox\"\n                                          id={`function-${func}`}\n                                          checked={field.value.includes(func)}\n                                          onChange={(e) => {\n                                            const newFunctions = e.target.checked\n                                              ? [...field.value, func]\n                                              : field.value.filter((f) => f !== func);\n                                            field.onChange(newFunctions);\n                                          }}\n                                          data-testid={`checkbox-function-${func}`}\n                                        />\n                                        <label htmlFor={`function-${func}`} className=\"text-sm\">\n                                          {func}\n                                        </label>\n                                      </div>\n                                    ))}\n                                  </div>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n\n                          {/* 태그 */}\n                          <div className=\"col-span-1 md:col-span-2\">\n                            <FormField\n                              control={form.control}\n                              name=\"tags\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>태그</FormLabel>\n                                  <div className=\"space-y-2\">\n                                    <div className=\"flex flex-wrap gap-2\">\n                                      {field.value.map((tag, index) => (\n                                        <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                                          {tag}\n                                          <button\n                                            type=\"button\"\n                                            onClick={() => {\n                                              const newTags = field.value.filter((_, i) => i !== index);\n                                              field.onChange(newTags);\n                                            }}\n                                            className=\"ml-1 text-xs hover:text-red-500\"\n                                            data-testid={`button-remove-tag-${index}`}\n                                          >\n                                            ×\n                                          </button>\n                                        </Badge>\n                                      ))}\n                                    </div>\n                                    <div className=\"flex gap-2\">\n                                      <Input\n                                        placeholder=\"태그 입력 (예: 베스트, 신제품)\"\n                                        id=\"new-tag\"\n                                        onKeyPress={(e) => {\n                                          if (e.key === 'Enter') {\n                                            e.preventDefault();\n                                            const input = e.target as HTMLInputElement;\n                                            if (input.value && !field.value.includes(input.value)) {\n                                              field.onChange([...field.value, input.value]);\n                                              input.value = '';\n                                            }\n                                          }\n                                        }}\n                                        data-testid=\"input-new-tag\"\n                                      />\n                                      <Button\n                                        type=\"button\"\n                                        variant=\"outline\"\n                                        onClick={() => {\n                                          const input = document.getElementById('new-tag') as HTMLInputElement;\n                                          if (input.value && !field.value.includes(input.value)) {\n                                            field.onChange([...field.value, input.value]);\n                                            input.value = '';\n                                          }\n                                        }}\n                                        data-testid=\"button-add-tag\"\n                                      >\n                                        추가\n                                      </Button>\n                                    </div>\n                                  </div>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n\n                          {/* 제품 설명 */}\n                          <FormField\n                            control={form.control}\n                            name=\"descriptionKo\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>제품 설명 *</FormLabel>\n                                <FormControl>\n                                  <Textarea \n                                    placeholder=\"온차 수준 직수 사용도는 고객센터를 통해 문의해주세요.\"\n                                    rows={4}\n                                    {...field}\n                                    data-testid=\"textarea-description-ko\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          {/* 의무사용기간 옵션 */}\n                          <div className=\"col-span-1 md:col-span-2\">\n                            <FormField\n                              control={form.control}\n                              name=\"rentalOptions\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>의무사용기간 옵션 *</FormLabel>\n                                  <div className=\"space-y-3\">\n                                    {field.value.map((option, index) => (\n                                      <div key={index} className=\"flex items-center gap-2 p-3 border rounded-md bg-muted/30\">\n                                        <div className=\"flex items-center gap-2 flex-1\">\n                                          <label className=\"text-sm font-medium min-w-12\">기간:</label>\n                                          <Input\n                                            type=\"number\"\n                                            placeholder=\"12\"\n                                            value={option.months}\n                                            onChange={(e) => {\n                                              const newOptions = [...field.value];\n                                              newOptions[index] = { ...option, months: parseInt(e.target.value) || 0 };\n                                              field.onChange(newOptions);\n                                            }}\n                                            className=\"w-20\"\n                                            data-testid={`input-rental-months-${index}`}\n                                          />\n                                          <span className=\"text-sm\">개월</span>\n                                        </div>\n                                        <div className=\"flex items-center gap-2 flex-1\">\n                                          <label className=\"text-sm font-medium min-w-16\">월 렌탈료:</label>\n                                          <Input\n                                            type=\"number\"\n                                            placeholder=\"15000\"\n                                            value={option.monthlyPrice}\n                                            onChange={(e) => {\n                                              const newOptions = [...field.value];\n                                              newOptions[index] = { ...option, monthlyPrice: parseInt(e.target.value) || 0 };\n                                              field.onChange(newOptions);\n                                            }}\n                                            className=\"w-24\"\n                                            data-testid={`input-rental-price-${index}`}\n                                          />\n                                          <span className=\"text-sm\">원</span>\n                                        </div>\n                                        <Button\n                                          type=\"button\"\n                                          variant=\"outline\"\n                                          size=\"sm\"\n                                          onClick={() => {\n                                            const newOptions = field.value.filter((_, i) => i !== index);\n                                            field.onChange(newOptions);\n                                          }}\n                                          data-testid={`button-remove-rental-${index}`}\n                                        >\n                                          제거\n                                        </Button>\n                                      </div>\n                                    ))}\n                                    <Button\n                                      type=\"button\"\n                                      variant=\"outline\"\n                                      onClick={() => {\n                                        field.onChange([...field.value, { months: 12, monthlyPrice: 0 }]);\n                                      }}\n                                      className=\"w-full\"\n                                      data-testid=\"button-add-rental-option\"\n                                    >\n                                      + 의무사용기간 옵션 추가\n                                    </Button>\n                                  </div>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n\n                          {/* 관리주기 옵션 */}\n                          <div className=\"col-span-1 md:col-span-2\">\n                            <FormField\n                              control={form.control}\n                              name=\"maintenanceOptions\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>관리주기 옵션 *</FormLabel>\n                                  <div className=\"space-y-3\">\n                                    {field.value.map((option, index) => (\n                                      <div key={index} className=\"flex items-center gap-2 p-3 border rounded-md bg-muted/30\">\n                                        <div className=\"flex items-center gap-2\">\n                                          <label className=\"text-sm font-medium min-w-12\">주기:</label>\n                                          <Input\n                                            type=\"number\"\n                                            placeholder=\"1\"\n                                            value={option.months}\n                                            onChange={(e) => {\n                                              const newOptions = [...field.value];\n                                              newOptions[index] = { ...option, months: parseInt(e.target.value) || 0 };\n                                              field.onChange(newOptions);\n                                            }}\n                                            className=\"w-20\"\n                                            data-testid={`input-maintenance-months-${index}`}\n                                          />\n                                          <span className=\"text-sm\">개월</span>\n                                        </div>\n                                        <div className=\"flex items-center gap-2\">\n                                          <label className=\"text-sm font-medium min-w-16\">추가 비용:</label>\n                                          <Input\n                                            type=\"number\"\n                                            placeholder=\"0\"\n                                            value={option.additionalFee}\n                                            onChange={(e) => {\n                                              const newOptions = [...field.value];\n                                              newOptions[index] = { ...option, additionalFee: parseInt(e.target.value) || 0 };\n                                              field.onChange(newOptions);\n                                            }}\n                                            className=\"w-24\"\n                                            data-testid={`input-maintenance-fee-${index}`}\n                                          />\n                                          <span className=\"text-sm\">원</span>\n                                        </div>\n                                        <div className=\"flex items-center gap-2 flex-1\">\n                                          <label className=\"text-sm font-medium\">설명:</label>\n                                          <Input\n                                            placeholder=\"매월 무료 관리\"\n                                            value={option.description}\n                                            onChange={(e) => {\n                                              const newOptions = [...field.value];\n                                              newOptions[index] = { ...option, description: e.target.value };\n                                              field.onChange(newOptions);\n                                            }}\n                                            data-testid={`input-maintenance-desc-${index}`}\n                                          />\n                                        </div>\n                                        <Button\n                                          type=\"button\"\n                                          variant=\"outline\"\n                                          size=\"sm\"\n                                          onClick={() => {\n                                            const newOptions = field.value.filter((_, i) => i !== index);\n                                            field.onChange(newOptions);\n                                          }}\n                                          data-testid={`button-remove-maintenance-${index}`}\n                                        >\n                                          제거\n                                        </Button>\n                                      </div>\n                                    ))}\n                                    <Button\n                                      type=\"button\"\n                                      variant=\"outline\"\n                                      onClick={() => {\n                                        field.onChange([...field.value, { months: 1, additionalFee: 0, description: \"매월 관리\" }]);\n                                      }}\n                                      className=\"w-full\"\n                                      data-testid=\"button-add-maintenance-option\"\n                                    >\n                                      + 관리주기 옵션 추가\n                                    </Button>\n                                  </div>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n\n                          <div className=\"flex justify-end space-x-2 pt-4\">\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              onClick={() => setShowProductForm(false)}\n                              data-testid=\"button-cancel-product\"\n                            >\n                              취소\n                            </Button>\n                            <motion.div\n                              whileHover={{ scale: 1.05 }}\n                              whileTap={{ scale: 0.95 }}\n                            >\n                              <Button\n                                type=\"submit\"\n                                disabled={createProductMutation.isPending}\n                                data-testid=\"button-submit-product\"\n                              >\n                                {createProductMutation.isPending ? (\n                                  <>\n                                    <Upload className=\"h-4 w-4 mr-2 animate-spin\" />\n                                    업로드 중...\n                                  </>\n                                ) : (\n                                  <>\n                                    <Upload className=\"h-4 w-4 mr-2\" />\n                                    제품 등록\n                                  </>\n                                )}\n                              </Button>\n                            </motion.div>\n                          </div>\n                        </form>\n                      </Form>\n                    </motion.div>\n                  )}\n                  \n                  <p className=\"text-muted-foreground\">\n                    등록된 제품 목록 및 수정 기능은 곧 추가될 예정입니다.\n                  </p>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"imports\" className=\"space-y-6\">\n              {/* Monthly Merge Section */}\n              <Card data-testid=\"monthly-merge-card\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Package className=\"h-5 w-5\" />\n                        월간 제품 병합\n                      </CardTitle>\n                      <p className=\"text-muted-foreground mt-1\">\n                        새로운 Excel 데이터를 기존 제품과 병합하여 가격 및 프로모션 정보를 업데이트합니다.\n                      </p>\n                    </div>\n                    <Badge variant=\"secondary\">Beta</Badge>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {/* Monthly merge functionality */}\n                    {drafts.length === 0 ? (\n                      <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center\">\n                        <div className=\"space-y-2\">\n                          <Package className=\"h-8 w-8 mx-auto text-muted-foreground\" />\n                          <h3 className=\"font-medium\">월간 병합 준비 중</h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            먼저 Excel 탭에서 새로운 제품 데이터를 업로드하고 Draft로 저장하세요.\n                          </p>\n                          <Button variant=\"outline\" size=\"sm\" disabled data-testid=\"button-start-merge\">\n                            병합 시작 (Draft 없음)\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        <div className=\"bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-medium text-blue-900 dark:text-blue-100\">\n                                {drafts.length}개의 Draft가 병합 준비됨\n                              </h4>\n                              <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                                기존 제품과 중복을 확인하고, 가격 정보를 업데이트합니다.\n                              </p>\n                            </div>\n                            <div className=\"flex gap-2\">\n                              <Button \n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => refetchDrafts()}\n                                disabled={draftsLoading}\n                                data-testid=\"button-refresh-merge-drafts\"\n                              >\n                                새로고침\n                              </Button>\n                              <Button \n                                size=\"sm\"\n                                className=\"bg-blue-600 hover:bg-blue-700\"\n                                onClick={() => monthlyMergeMutation.mutate()}\n                                disabled={monthlyMergeMutation.isPending}\n                                data-testid=\"button-start-merge\"\n                              >\n                                <Package className=\"h-4 w-4 mr-1\" />\n                                {monthlyMergeMutation.isPending ? '병합 중...' : '병합 시작'}\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        {/* Draft Preview Table */}\n                        <div className=\"rounded-lg border bg-card\">\n                          <div className=\"p-4 border-b\">\n                            <h4 className=\"font-medium\">병합 대상 미리보기</h4>\n                            <p className=\"text-sm text-muted-foreground\">\n                              아래 Draft들이 중복 감지 및 병합 처리됩니다.\n                            </p>\n                          </div>\n                          <div className=\"max-h-64 overflow-y-auto\">\n                            <div className=\"grid grid-cols-5 gap-4 p-3 text-sm font-medium bg-muted/50\">\n                              <div>제품명</div>\n                              <div>브랜드</div>\n                              <div>모델번호</div>\n                              <div>월 렌탈료</div>\n                              <div>상태</div>\n                            </div>\n                            {drafts.slice(0, 10).map((draft) => (\n                              <div key={draft.id} className=\"grid grid-cols-5 gap-4 p-3 border-t text-sm\">\n                                <div className=\"truncate\">{draft.nameKo || draft.name || 'N/A'}</div>\n                                <div className=\"truncate\">{draft.brand || 'N/A'}</div>\n                                <div className=\"truncate text-muted-foreground\">\n                                  {draft.modelNumber || 'N/A'}\n                                </div>\n                                <div>{draft.monthlyPrice ? `${draft.monthlyPrice.toLocaleString()}원` : 'N/A'}</div>\n                                <div>\n                                  <Badge variant=\"secondary\" className=\"text-xs\">\n                                    {draft.status === 'pending' ? '대기중' : draft.status}\n                                  </Badge>\n                                </div>\n                              </div>\n                            ))}\n                            {drafts.length > 10 && (\n                              <div className=\"p-3 border-t text-center text-sm text-muted-foreground\">\n                                ... 및 {drafts.length - 10}개 더\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                    \n                    {/* Merge Results Display */}\n                    {showMergeResults && mergeResults && (\n                      <div className=\"space-y-4 mt-6 border-t pt-6\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"font-medium text-lg\">병합 결과</h4>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            onClick={() => setShowMergeResults(false)}\n                            data-testid=\"button-close-results\"\n                          >\n                            <X className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                        \n                        {/* Results Summary */}\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                          <div className=\"bg-green-50 dark:bg-green-950 border border-green-200 dark:border-green-800 rounded-lg p-3\">\n                            <div className=\"text-2xl font-bold text-green-700 dark:text-green-300\">\n                              {mergeResults.results?.summary?.updated || 0}\n                            </div>\n                            <div className=\"text-sm text-green-600 dark:text-green-400\">업데이트됨</div>\n                          </div>\n                          \n                          <div className=\"bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-3\">\n                            <div className=\"text-2xl font-bold text-blue-700 dark:text-blue-300\">\n                              {mergeResults.results?.summary?.created || 0}\n                            </div>\n                            <div className=\"text-sm text-blue-600 dark:text-blue-400\">신규 생성</div>\n                          </div>\n                          \n                          <div className=\"bg-yellow-50 dark:bg-yellow-950 border border-yellow-200 dark:border-yellow-800 rounded-lg p-3\">\n                            <div className=\"text-2xl font-bold text-yellow-700 dark:text-yellow-300\">\n                              {mergeResults.results?.summary?.needsReview || 0}\n                            </div>\n                            <div className=\"text-sm text-yellow-600 dark:text-yellow-400\">수동 검토</div>\n                          </div>\n                          \n                          <div className=\"bg-red-50 dark:bg-red-950 border border-red-200 dark:border-red-800 rounded-lg p-3\">\n                            <div className=\"text-2xl font-bold text-red-700 dark:text-red-300\">\n                              {(mergeResults.results?.summary?.validationFailed || 0) + (mergeResults.results?.summary?.processingErrors || 0)}\n                            </div>\n                            <div className=\"text-sm text-red-600 dark:text-red-400\">에러</div>\n                          </div>\n                        </div>\n                        \n                        {/* Updated Products Detail */}\n                        {mergeResults.results?.updated?.length > 0 && (\n                          <div className=\"rounded-lg border bg-card\">\n                            <div className=\"p-4 border-b bg-green-50 dark:bg-green-950/50\">\n                              <h5 className=\"font-medium text-green-800 dark:text-green-200 flex items-center gap-2\">\n                                <Check className=\"h-4 w-4\" />\n                                업데이트된 제품 ({mergeResults.results.updated.length}개)\n                              </h5>\n                              <p className=\"text-sm text-green-600 dark:text-green-400\">\n                                기존 제품의 가격 및 프로모션 정보가 업데이트되었습니다.\n                              </p>\n                            </div>\n                            <div className=\"max-h-48 overflow-y-auto\">\n                              {mergeResults.results.updated.slice(0, 5).map((product: any, index: number) => (\n                                <div key={product.id} className=\"p-3 border-b last:border-b-0 flex items-center justify-between\">\n                                  <div className=\"flex-1\">\n                                    <p className=\"font-medium\">{product.nameKo}</p>\n                                    <p className=\"text-sm text-muted-foreground\">{product.brand} • {product.modelNumber}</p>\n                                  </div>\n                                  <div className=\"text-right\">\n                                    <p className=\"text-sm font-medium\">\n                                      {product.monthlyPrice ? `${Number(product.monthlyPrice).toLocaleString()}원/월` : 'N/A'}\n                                    </p>\n                                  </div>\n                                </div>\n                              ))}\n                              {mergeResults.results.updated.length > 5 && (\n                                <div className=\"p-3 text-center text-sm text-muted-foreground border-b-0\">\n                                  ... 및 {mergeResults.results.updated.length - 5}개 더\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        )}\n                        \n                        {/* Created Products Detail */}\n                        {mergeResults.results?.created?.length > 0 && (\n                          <div className=\"rounded-lg border bg-card\">\n                            <div className=\"p-4 border-b bg-blue-50 dark:bg-blue-950/50\">\n                              <h5 className=\"font-medium text-blue-800 dark:text-blue-200 flex items-center gap-2\">\n                                <Plus className=\"h-4 w-4\" />\n                                신규 생성된 제품 ({mergeResults.results.created.length}개)\n                              </h5>\n                            </div>\n                            <div className=\"max-h-48 overflow-y-auto\">\n                              {mergeResults.results.created.slice(0, 5).map((product: any, index: number) => (\n                                <div key={product.id} className=\"p-3 border-b last:border-b-0\">\n                                  <p className=\"font-medium\">{product.nameKo}</p>\n                                  <p className=\"text-sm text-muted-foreground\">{product.brand} • {product.modelNumber}</p>\n                                </div>\n                              ))}\n                              {mergeResults.results.created.length > 5 && (\n                                <div className=\"p-3 text-center text-sm text-muted-foreground border-b-0\">\n                                  ... 및 {mergeResults.results.created.length - 5}개 더\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        )}\n                        \n                        {/* Validation Errors */}\n                        {mergeResults.results?.validationErrors?.length > 0 && (\n                          <div className=\"rounded-lg border bg-card\">\n                            <div className=\"p-4 border-b bg-red-50 dark:bg-red-950/50\">\n                              <h5 className=\"font-medium text-red-800 dark:text-red-200 flex items-center gap-2\">\n                                <X className=\"h-4 w-4\" />\n                                검증 실패 ({mergeResults.results.validationErrors.length}개)\n                              </h5>\n                            </div>\n                            <div className=\"max-h-48 overflow-y-auto\">\n                              {mergeResults.results.validationErrors.slice(0, 5).map((error: any, index: number) => (\n                                <div key={index} className=\"p-3 border-b last:border-b-0\">\n                                  <p className=\"text-sm font-medium text-red-700 dark:text-red-300\">\n                                    아이템 #{error.index}: {error.error}\n                                  </p>\n                                  <p className=\"text-xs text-muted-foreground mt-1\">\n                                    {error.draft?.nameKo || error.draft?.name || '이름 없음'}\n                                  </p>\n                                </div>\n                              ))}\n                              {mergeResults.results.validationErrors.length > 5 && (\n                                <div className=\"p-3 text-center text-sm text-muted-foreground border-b-0\">\n                                  ... 및 {mergeResults.results.validationErrors.length - 5}개 더\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Imports Tab - Draft Management System */}\n              <div className=\"space-y-6\">\n                {/* Header with actions */}\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h2 className=\"text-2xl font-bold\">제품 Import 관리</h2>\n                    <p className=\"text-muted-foreground\">Excel에서 가져온 제품 초안을 관리하고 승인합니다.</p>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => refetchDrafts()}\n                      disabled={draftsLoading}\n                      data-testid=\"button-refresh-drafts\"\n                    >\n                      새로고침\n                    </Button>\n                    <Button \n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => {\n                        if (confirm(`정말로 모든 초안 ${drafts.length}개를 삭제하시겠습니까?\\n\\n이 작업은 되돌릴 수 없습니다.`)) {\n                          deleteAllDraftsMutation.mutate();\n                        }\n                      }}\n                      disabled={drafts.length === 0 || deleteAllDraftsMutation.isPending}\n                      data-testid=\"button-delete-all-drafts\"\n                    >\n                      <Trash2 className=\"h-4 w-4 mr-1\" />\n                      {deleteAllDraftsMutation.isPending ? '삭제 중...' : `모든 초안 삭제 (${drafts.length})`}\n                    </Button>\n                    <Button \n                      disabled={selectedDrafts.length === 0}\n                      data-testid=\"button-bulk-approve\"\n                    >\n                      일괄 승인 ({selectedDrafts.length})\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Draft List Card */}\n                <Card data-testid=\"drafts-list-card\">\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle>제품 초안 목록</CardTitle>\n                      <div className=\"flex items-center space-x-2\">\n                        <Select value={statusFilter} onValueChange={setStatusFilter}>\n                          <SelectTrigger className=\"w-32\" data-testid=\"select-status-filter\">\n                            <SelectValue placeholder=\"상태\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"all\">전체</SelectItem>\n                            <SelectItem value=\"pending\">대기중</SelectItem>\n                            <SelectItem value=\"approved\">승인됨</SelectItem>\n                            <SelectItem value=\"rejected\">거절됨</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    {draftsLoading ? (\n                      <div className=\"text-center py-8 text-muted-foreground\">\n                        제품 초안 목록을 로드하는 중...\n                      </div>\n                    ) : drafts.length === 0 ? (\n                      <div className=\"text-center py-8 text-muted-foreground\">\n                        {statusFilter === 'all' ? '등록된 제품 초안이 없습니다.' : `${statusFilter} 상태의 제품 초안이 없습니다.`}\n                        <p className=\"text-sm mt-2\">Excel 업로드 탭에서 제품을 업로드하고 저장해보세요.</p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {/* Draft 목록 테이블 */}\n                        <div className=\"rounded-md border\">\n                          <div className=\"grid grid-cols-6 gap-4 p-4 font-medium text-sm bg-muted/50\">\n                            <div>제품명</div>\n                            <div>브랜드</div>\n                            <div>카테고리</div>\n                            <div>월 렌탈료</div>\n                            <div>상태</div>\n                            <div>작업</div>\n                          </div>\n                          {drafts.map((draft) => (\n                            <div key={draft.id} className=\"grid grid-cols-6 gap-4 p-4 border-t items-center\">\n                              <div>\n                                <p className=\"font-medium\">{draft.nameKo || 'N/A'}</p>\n                                <p className=\"text-sm text-muted-foreground\">{draft.name || 'N/A'}</p>\n                              </div>\n                              <div>{draft.brand || 'N/A'}</div>\n                              <div>{draft.category?.nameKo || 'N/A'}</div>\n                              <div>\n                                {draft.monthlyPrice ? `${draft.monthlyPrice.toLocaleString()}원` : 'N/A'}\n                              </div>\n                              <div>\n                                <Badge \n                                  variant={\n                                    draft.status === 'approved' ? 'default' : \n                                    draft.status === 'pending' ? 'secondary' : 'destructive'\n                                  }\n                                >\n                                  {draft.status === 'approved' ? '승인됨' : \n                                   draft.status === 'pending' ? '대기중' : '거절됨'}\n                                </Badge>\n                              </div>\n                              <div className=\"flex space-x-1\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => setEditingDraft(draft)}\n                                  data-testid={`button-edit-draft-${draft.id}`}\n                                >\n                                  <Edit className=\"h-3 w-3\" />\n                                </Button>\n                                {draft.status === 'pending' && (\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"default\"\n                                    onClick={() => approveDraftMutation.mutate(draft.id)}\n                                    disabled={approveDraftMutation.isPending}\n                                    data-testid={`button-approve-draft-${draft.id}`}\n                                  >\n                                    <Check className=\"h-3 w-3\" />\n                                  </Button>\n                                )}\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  onClick={() => deleteDraftMutation.mutate(draft.id)}\n                                  disabled={deleteDraftMutation.isPending}\n                                  data-testid={`button-delete-draft-${draft.id}`}\n                                >\n                                  <Trash2 className=\"h-3 w-3\" />\n                                </Button>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                        \n                        {/* 페이지네이션 (향후 추가 예정) */}\n                        <div className=\"text-center text-sm text-muted-foreground\">\n                          총 {drafts.length}개 항목\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"excel\" className=\"space-y-6\">\n              <Card data-testid=\"excel-upload-card\">\n                <CardHeader>\n                  <CardTitle>Excel 파일로 제품 일괄 등록</CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Excel 파일을 업로드하여 여러 제품을 한 번에 등록할 수 있습니다. AI가 자동으로 컬럼을 분석하여 매핑합니다.\n                  </p>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {/* Excel 파일 업로드 UI */}\n                  <div className=\"space-y-4\">\n                    <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center\">\n                      <Upload className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                      <div className=\"space-y-2\">\n                        <p className=\"text-lg font-medium\">Excel 파일을 선택하세요</p>\n                        <p className=\"text-sm text-gray-600\">\n                          .xlsx 또는 .xls 파일만 업로드 가능합니다. (최대 10MB)\n                        </p>\n                      </div>\n                      <div className=\"mt-4\">\n                        <Input\n                          type=\"file\"\n                          accept=\".xlsx,.xls\"\n                          onChange={handleExcelFileSelect}\n                          className=\"hidden\"\n                          id=\"excel-file-input\"\n                          data-testid=\"input-excel-file\"\n                        />\n                        <Button\n                          type=\"button\"\n                          onClick={() => document.getElementById('excel-file-input')?.click()}\n                          disabled={uploadingExcel}\n                          data-testid=\"button-select-excel\"\n                        >\n                          {uploadingExcel ? (\n                            <>\n                              <Upload className=\"h-4 w-4 mr-2 animate-spin\" />\n                              업로드 중...\n                            </>\n                          ) : (\n                            <>\n                              <Upload className=\"h-4 w-4 mr-2\" />\n                              파일 선택\n                            </>\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    {/* 업로드 결과 표시 */}\n                    {excelResults && (\n                      <div className=\"space-y-4\">\n                        <h3 className=\"text-lg font-semibold\">파싱 결과</h3>\n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                          <Card>\n                            <CardContent className=\"pt-4\">\n                              <div className=\"text-center\">\n                                <p className=\"text-2xl font-bold text-green-600\">{excelResults.stats?.successfullyParsed || 0}</p>\n                                <p className=\"text-sm text-gray-600\">성공</p>\n                              </div>\n                            </CardContent>\n                          </Card>\n                          <Card>\n                            <CardContent className=\"pt-4\">\n                              <div className=\"text-center\">\n                                <p className=\"text-2xl font-bold text-red-600\">{excelResults.stats?.errors || 0}</p>\n                                <p className=\"text-sm text-gray-600\">오류</p>\n                              </div>\n                            </CardContent>\n                          </Card>\n                          <Card>\n                            <CardContent className=\"pt-4\">\n                              <div className=\"text-center\">\n                                <p className=\"text-2xl font-bold text-blue-600\">{excelResults.stats?.totalRows || 0}</p>\n                                <p className=\"text-sm text-gray-600\">전체 행</p>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        </div>\n                        \n                        {/* 매핑 정보 */}\n                        {excelResults.mapping && (\n                          <Card>\n                            <CardContent className=\"pt-4\">\n                              <h4 className=\"font-semibold mb-2\">매핑 정보</h4>\n                              <div className=\"space-y-2\">\n                                <p className=\"text-sm\">\n                                  <span className=\"font-medium\">매핑 방식:</span> {excelResults.mapping.source === 'ai' ? 'AI 자동 매핑' : '키워드 기반 매핑'}\n                                </p>\n                                <p className=\"text-sm\">\n                                  <span className=\"font-medium\">신뢰도:</span> {Math.round((excelResults.mapping.confidence || 0) * 100)}%\n                                </p>\n                                {excelResults.mapping.missingEssentials?.length > 0 && (\n                                  <p className=\"text-sm text-yellow-600\">\n                                    <span className=\"font-medium\">누락된 필수 필드:</span> {excelResults.mapping.missingEssentials.join(', ')}\n                                  </p>\n                                )}\n                              </div>\n                            </CardContent>\n                          </Card>\n                        )}\n                        \n                        {/* 오류 목록 */}\n                        {excelResults.errors?.length > 0 && (\n                          <Card>\n                            <CardContent className=\"pt-4\">\n                              <h4 className=\"font-semibold mb-2\">오류 목록</h4>\n                              <div className=\"max-h-40 overflow-y-auto space-y-2\">\n                                {excelResults.errors.slice(0, 10).map((error: any, index: number) => (\n                                  <div key={index} className=\"text-sm p-2 bg-red-50 border border-red-200 rounded\">\n                                    <p className=\"font-medium\">행 {error.row}: {error.error}</p>\n                                  </div>\n                                ))}\n                                {excelResults.errors.length > 10 && (\n                                  <p className=\"text-sm text-gray-600\">... 및 {excelResults.errors.length - 10}개 추가 오류</p>\n                                )}\n                              </div>\n                            </CardContent>\n                          </Card>\n                        )}\n                        \n                        <div className=\"flex space-x-2\">\n                          <Button\n                            onClick={() => setExcelResults(null)}\n                            variant=\"outline\"\n                            data-testid=\"button-clear-results\"\n                          >\n                            결과 지우기\n                          </Button>\n                          <Button\n                            onClick={handleSaveDrafts}\n                            disabled={!excelResults.drafts?.length}\n                            data-testid=\"button-save-drafts\"\n                          >\n                            제품 초안 저장 ({excelResults.drafts?.length || 0}개)\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"rentals\">\n              <Card data-testid=\"rentals-management-card\">\n                <CardHeader>\n                  <CardTitle>대여 관리</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">대여 관리 기능이 곧 제공될 예정입니다.</p>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"settings\">\n              <Card data-testid=\"settings-card\">\n                <CardHeader>\n                  <CardTitle>시스템 설정</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">시스템 설정 기능이 곧 제공될 예정입니다.</p>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </motion.div>\n      </div>\n\n      {/* Edit Draft Modal */}\n      <Dialog open={!!editingDraft} onOpenChange={() => setEditingDraft(null)}>\n        <DialogContent className=\"max-w-md\" data-testid=\"edit-draft-modal\">\n          <DialogHeader>\n            <DialogTitle>제품 초안 편집</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n                {/* 제품명 (한국어) */}\n                <FormField\n                  control={editForm.control}\n                  name=\"nameKo\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>제품명 (한국어) *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"예: 아이콘 냉온정 정수기\" {...field} data-testid=\"input-edit-name-ko\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* 브랜드 */}\n                <FormField\n                  control={editForm.control}\n                  name=\"brand\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>브랜드 *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"예: 코웨이\" {...field} data-testid=\"input-edit-brand\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* 카테고리 */}\n                <FormField\n                  control={editForm.control}\n                  name=\"categoryId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>카테고리</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-category\">\n                            <SelectValue placeholder=\"카테고리 선택\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"none\">카테고리 선택 안함</SelectItem>\n                          {categories.map((category) => (\n                            <SelectItem key={category.id} value={category.id}>\n                              {category.nameKo}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* 월 렌탈료 */}\n                <FormField\n                  control={editForm.control}\n                  name=\"monthlyPrice\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>월 렌탈료 *</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          placeholder=\"15000\" \n                          value={field.value || 0}\n                          onChange={(e) => {\n                            const value = e.target.value ? Number(e.target.value) : 0;\n                            console.log('Monthly price changed:', value); // Debug log\n                            field.onChange(value);\n                          }}\n                          data-testid=\"input-edit-monthly-price\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* 정상가 */}\n                <FormField\n                  control={editForm.control}\n                  name=\"originalPrice\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>정상가</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          placeholder=\"50000\" \n                          value={field.value || 0}\n                          onChange={(e) => {\n                            const value = e.target.value ? Number(e.target.value) : 0;\n                            field.onChange(value);\n                          }}\n                          data-testid=\"input-edit-original-price\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setEditingDraft(null)}\n                    data-testid=\"button-cancel-edit\"\n                  >\n                    <X className=\"h-4 w-4 mr-2\" />\n                    취소\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={editDraftMutation.isPending}\n                    onClick={(e) => {\n                      console.log('Save button clicked!');\n                      console.log('Form is valid:', editForm.formState.isValid);\n                      console.log('Form values:', editForm.getValues());\n                      if (!editForm.formState.isValid) {\n                        console.log('Form validation errors:', editForm.formState.errors);\n                      }\n                    }}\n                    data-testid=\"button-save-edit\"\n                  >\n                    {editDraftMutation.isPending ? (\n                      <>\n                        <RotateCcw className=\"h-4 w-4 mr-2 animate-spin\" />\n                        저장 중...\n                      </>\n                    ) : (\n                      <>\n                        <Save className=\"h-4 w-4 mr-2\" />\n                        저장\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":103788},"client/src/components/ui/motion-button.tsx":{"content":"import * as React from \"react\"\nimport { motion, useReducedMotion } from \"framer-motion\"\nimport { Button, type ButtonProps } from \"@/components/ui/button\"\nimport { interactiveVariants, springPresets } from \"@/lib/motion\"\n\ninterface MotionButtonProps extends ButtonProps {\n  motionVariant?: \"button\" | \"category\" | \"subtle\"\n  enablePulse?: boolean\n}\n\nconst MotionButton = React.forwardRef<HTMLButtonElement, MotionButtonProps>(\n  ({ \n    className, \n    children, \n    motionVariant = \"button\",\n    enablePulse = false,\n    disabled,\n    ...props \n  }, ref) => {\n    \n    const shouldReduceMotion = useReducedMotion();\n    \n    // 모션 variant에 따른 애니메이션 선택\n    const getMotionProps = () => {\n      if (disabled || shouldReduceMotion) {\n        return {}; // 비활성화되거나 reduced-motion 사용자는 애니메이션 없음\n      }\n\n      const baseMotion: any = {\n        whileHover: motionVariant === \"category\" \n          ? interactiveVariants.categoryHover \n          : interactiveVariants.buttonHover,\n        whileTap: motionVariant === \"category\"\n          ? interactiveVariants.categoryPress \n          : interactiveVariants.buttonPress,\n        transition: springPresets.snappy,\n      };\n\n      // Pulse 효과 추가\n      if (enablePulse) {\n        baseMotion.animate = interactiveVariants.attentionPulse;\n      }\n\n      return baseMotion;\n    };\n\n    return (\n      <motion.div\n        {...getMotionProps()}\n        className=\"inline-block\"\n        style={{\n          // GPU 가속을 위한 최적화\n          willChange: 'transform, box-shadow',\n          transformStyle: 'preserve-3d',\n        }}\n      >\n        <Button \n          ref={ref}\n          className={className}\n          disabled={disabled}\n          {...props}\n        >\n          {children}\n        </Button>\n      </motion.div>\n    )\n  }\n)\n\nMotionButton.displayName = \"MotionButton\"\n\nexport { MotionButton, type MotionButtonProps }","size_bytes":1940},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"openpyxl>=3.1.5\",\n    \"requests>=2.32.5\",\n]\n","size_bytes":191}},"version":1}